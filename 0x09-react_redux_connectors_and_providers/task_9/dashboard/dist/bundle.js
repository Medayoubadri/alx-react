/*! For license information please see bundle.js.LICENSE.txt */
(()=>{var e,t,n={56:(e,t,n)=>{"use strict";e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},72:(e,t)=>{"use strict";var n="function"==typeof Symbol&&Symbol.for,r=n?Symbol.for("react.element"):60103,o=n?Symbol.for("react.portal"):60106,i=n?Symbol.for("react.fragment"):60107,a=n?Symbol.for("react.strict_mode"):60108,u=n?Symbol.for("react.profiler"):60114,l=n?Symbol.for("react.provider"):60109,s=n?Symbol.for("react.context"):60110,c=n?Symbol.for("react.async_mode"):60111,f=n?Symbol.for("react.concurrent_mode"):60111,d=n?Symbol.for("react.forward_ref"):60112,p=n?Symbol.for("react.suspense"):60113,h=n?Symbol.for("react.suspense_list"):60120,y=n?Symbol.for("react.memo"):60115,m=n?Symbol.for("react.lazy"):60116,v=n?Symbol.for("react.block"):60121,g=n?Symbol.for("react.fundamental"):60117,b=n?Symbol.for("react.responder"):60118,_=n?Symbol.for("react.scope"):60119;function w(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case r:switch(e=e.type){case c:case f:case i:case u:case a:case p:return e;default:switch(e=e&&e.$$typeof){case s:case d:case m:case y:case l:return e;default:return t}}case o:return t}}}function S(e){return w(e)===f}t.AsyncMode=c,t.ConcurrentMode=f,t.ContextConsumer=s,t.ContextProvider=l,t.Element=r,t.ForwardRef=d,t.Fragment=i,t.Lazy=m,t.Memo=y,t.Portal=o,t.Profiler=u,t.StrictMode=a,t.Suspense=p,t.isAsyncMode=function(e){return S(e)||w(e)===c},t.isConcurrentMode=S,t.isContextConsumer=function(e){return w(e)===s},t.isContextProvider=function(e){return w(e)===l},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===r},t.isForwardRef=function(e){return w(e)===d},t.isFragment=function(e){return w(e)===i},t.isLazy=function(e){return w(e)===m},t.isMemo=function(e){return w(e)===y},t.isPortal=function(e){return w(e)===o},t.isProfiler=function(e){return w(e)===u},t.isStrictMode=function(e){return w(e)===a},t.isSuspense=function(e){return w(e)===p},t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===i||e===f||e===u||e===a||e===p||e===h||"object"==typeof e&&null!==e&&(e.$$typeof===m||e.$$typeof===y||e.$$typeof===l||e.$$typeof===s||e.$$typeof===d||e.$$typeof===g||e.$$typeof===b||e.$$typeof===_||e.$$typeof===v)},t.typeOf=w},113:e=>{"use strict";e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},126:(e,t,n)=>{"use strict";n.d(t,{A:()=>u});var r=n(354),o=n.n(r),i=n(314),a=n.n(i)()(o());a.push([e.id,".App-footer {\n  position: absolute;\n  bottom: 0;\n  width: 100%;\n  border-top: 3px solid #e0354b;\n}\n\n.App-footer p {\n  text-align: center;\n  padding: 16px 0;\n}\n","",{version:3,sources:["webpack://./src/Footer/Footer.css"],names:[],mappings:"AAAA;EACE,kBAAkB;EAClB,SAAS;EACT,WAAW;EACX,6BAA6B;AAC/B;;AAEA;EACE,kBAAkB;EAClB,eAAe;AACjB",sourcesContent:[".App-footer {\n  position: absolute;\n  bottom: 0;\n  width: 100%;\n  border-top: 3px solid #e0354b;\n}\n\n.App-footer p {\n  text-align: center;\n  padding: 16px 0;\n}\n"],sourceRoot:""}]);const u=a},146:(e,t,n)=>{"use strict";var r=n(404),o={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},i={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},a={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},u={};function l(e){return r.isMemo(e)?a:u[e.$$typeof]||o}u[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},u[r.Memo]=a;var s=Object.defineProperty,c=Object.getOwnPropertyNames,f=Object.getOwnPropertySymbols,d=Object.getOwnPropertyDescriptor,p=Object.getPrototypeOf,h=Object.prototype;e.exports=function e(t,n,r){if("string"!=typeof n){if(h){var o=p(n);o&&o!==h&&e(t,o,r)}var a=c(n);f&&(a=a.concat(f(n)));for(var u=l(t),y=l(n),m=0;m<a.length;++m){var v=a[m];if(!(i[v]||r&&r[v]||y&&y[v]||u&&u[v])){var g=d(n,v);try{s(t,v,g)}catch(e){}}}}return t}},159:e=>{"use strict";e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},162:(e,t,n)=>{"use strict";var r=n(540),o=n(888),i="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},a=o.useSyncExternalStore,u=r.useRef,l=r.useEffect,s=r.useMemo,c=r.useDebugValue;t.useSyncExternalStoreWithSelector=function(e,t,n,r,o){var f=u(null);if(null===f.current){var d={hasValue:!1,value:null};f.current=d}else d=f.current;f=s(function(){function e(e){if(!l){if(l=!0,a=e,e=r(e),void 0!==o&&d.hasValue){var t=d.value;if(o(t,e))return u=t}return u=e}if(t=u,i(a,e))return t;var n=r(e);return void 0!==o&&o(t,n)?(a=e,t):(a=e,u=n)}var a,u,l=!1,s=void 0===n?null:n;return[function(){return e(t())},null===s?void 0:function(){return e(s())}]},[t,n,r,o]);var p=a(e,f[0],f[1]);return l(function(){d.hasValue=!0,d.value=p},[p]),c(p),p}},236:(e,t,n)=>{"use strict";var r=n(795),o=[],i=[],a=r.makeRequestCallFromTimer(function(){if(i.length)throw i.shift()});function u(e){var t;(t=o.length?o.pop():new l).task=e,r(t)}function l(){this.task=null}e.exports=u,l.prototype.call=function(){try{this.task.call()}catch(e){u.onerror?u.onerror(e):(i.push(e),a())}finally{this.task=null,o[o.length]=this}}},242:(e,t,n)=>{"use strict";e.exports=n(162)},287:(e,t)=>{"use strict";var n=Symbol.for("react.element"),r=Symbol.for("react.portal"),o=Symbol.for("react.fragment"),i=Symbol.for("react.strict_mode"),a=Symbol.for("react.profiler"),u=Symbol.for("react.provider"),l=Symbol.for("react.context"),s=Symbol.for("react.forward_ref"),c=Symbol.for("react.suspense"),f=Symbol.for("react.memo"),d=Symbol.for("react.lazy"),p=Symbol.iterator,h={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},y=Object.assign,m={};function v(e,t,n){this.props=e,this.context=t,this.refs=m,this.updater=n||h}function g(){}function b(e,t,n){this.props=e,this.context=t,this.refs=m,this.updater=n||h}v.prototype.isReactComponent={},v.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,t,"setState")},v.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},g.prototype=v.prototype;var _=b.prototype=new g;_.constructor=b,y(_,v.prototype),_.isPureReactComponent=!0;var w=Array.isArray,S=Object.prototype.hasOwnProperty,k={current:null},x={key:!0,ref:!0,__self:!0,__source:!0};function E(e,t,r){var o,i={},a=null,u=null;if(null!=t)for(o in void 0!==t.ref&&(u=t.ref),void 0!==t.key&&(a=""+t.key),t)S.call(t,o)&&!x.hasOwnProperty(o)&&(i[o]=t[o]);var l=arguments.length-2;if(1===l)i.children=r;else if(1<l){for(var s=Array(l),c=0;c<l;c++)s[c]=arguments[c+2];i.children=s}if(e&&e.defaultProps)for(o in l=e.defaultProps)void 0===i[o]&&(i[o]=l[o]);return{$$typeof:n,type:e,key:a,ref:u,props:i,_owner:k.current}}function O(e){return"object"==typeof e&&null!==e&&e.$$typeof===n}var C=/\/+/g;function P(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,function(e){return t[e]})}(""+e.key):t.toString(36)}function z(e,t,o,i,a){var u=typeof e;"undefined"!==u&&"boolean"!==u||(e=null);var l=!1;if(null===e)l=!0;else switch(u){case"string":case"number":l=!0;break;case"object":switch(e.$$typeof){case n:case r:l=!0}}if(l)return a=a(l=e),e=""===i?"."+P(l,0):i,w(a)?(o="",null!=e&&(o=e.replace(C,"$&/")+"/"),z(a,t,o,"",function(e){return e})):null!=a&&(O(a)&&(a=function(e,t){return{$$typeof:n,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(a,o+(!a.key||l&&l.key===a.key?"":(""+a.key).replace(C,"$&/")+"/")+e)),t.push(a)),1;if(l=0,i=""===i?".":i+":",w(e))for(var s=0;s<e.length;s++){var c=i+P(u=e[s],s);l+=z(u,t,o,c,a)}else if(c=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=p&&e[p]||e["@@iterator"])?e:null}(e),"function"==typeof c)for(e=c.call(e),s=0;!(u=e.next()).done;)l+=z(u=u.value,t,o,c=i+P(u,s++),a);else if("object"===u)throw t=String(e),Error("Objects are not valid as a React child (found: "+("[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t)+"). If you meant to render a collection of children, use an array instead.");return l}function j(e,t,n){if(null==e)return e;var r=[],o=0;return z(e,r,"","",function(e){return t.call(n,e,o++)}),r}function I(e){if(-1===e._status){var t=e._result;(t=t()).then(function(t){0!==e._status&&-1!==e._status||(e._status=1,e._result=t)},function(t){0!==e._status&&-1!==e._status||(e._status=2,e._result=t)}),-1===e._status&&(e._status=0,e._result=t)}if(1===e._status)return e._result.default;throw e._result}var N={current:null},T={transition:null},M={ReactCurrentDispatcher:N,ReactCurrentBatchConfig:T,ReactCurrentOwner:k};function R(){throw Error("act(...) is not supported in production builds of React.")}t.Children={map:j,forEach:function(e,t,n){j(e,function(){t.apply(this,arguments)},n)},count:function(e){var t=0;return j(e,function(){t++}),t},toArray:function(e){return j(e,function(e){return e})||[]},only:function(e){if(!O(e))throw Error("React.Children.only expected to receive a single React element child.");return e}},t.Component=v,t.Fragment=o,t.Profiler=a,t.PureComponent=b,t.StrictMode=i,t.Suspense=c,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=M,t.act=R,t.cloneElement=function(e,t,r){if(null==e)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+e+".");var o=y({},e.props),i=e.key,a=e.ref,u=e._owner;if(null!=t){if(void 0!==t.ref&&(a=t.ref,u=k.current),void 0!==t.key&&(i=""+t.key),e.type&&e.type.defaultProps)var l=e.type.defaultProps;for(s in t)S.call(t,s)&&!x.hasOwnProperty(s)&&(o[s]=void 0===t[s]&&void 0!==l?l[s]:t[s])}var s=arguments.length-2;if(1===s)o.children=r;else if(1<s){l=Array(s);for(var c=0;c<s;c++)l[c]=arguments[c+2];o.children=l}return{$$typeof:n,type:e.type,key:i,ref:a,props:o,_owner:u}},t.createContext=function(e){return(e={$$typeof:l,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null}).Provider={$$typeof:u,_context:e},e.Consumer=e},t.createElement=E,t.createFactory=function(e){var t=E.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:s,render:e}},t.isValidElement=O,t.lazy=function(e){return{$$typeof:d,_payload:{_status:-1,_result:e},_init:I}},t.memo=function(e,t){return{$$typeof:f,type:e,compare:void 0===t?null:t}},t.startTransition=function(e){var t=T.transition;T.transition={};try{e()}finally{T.transition=t}},t.unstable_act=R,t.useCallback=function(e,t){return N.current.useCallback(e,t)},t.useContext=function(e){return N.current.useContext(e)},t.useDebugValue=function(){},t.useDeferredValue=function(e){return N.current.useDeferredValue(e)},t.useEffect=function(e,t){return N.current.useEffect(e,t)},t.useId=function(){return N.current.useId()},t.useImperativeHandle=function(e,t,n){return N.current.useImperativeHandle(e,t,n)},t.useInsertionEffect=function(e,t){return N.current.useInsertionEffect(e,t)},t.useLayoutEffect=function(e,t){return N.current.useLayoutEffect(e,t)},t.useMemo=function(e,t){return N.current.useMemo(e,t)},t.useReducer=function(e,t,n){return N.current.useReducer(e,t,n)},t.useRef=function(e){return N.current.useRef(e)},t.useState=function(e){return N.current.useState(e)},t.useSyncExternalStore=function(e,t,n){return N.current.useSyncExternalStore(e,t,n)},t.useTransition=function(){return N.current.useTransition()},t.version="18.3.1"},314:e=>{"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map(function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n}).join("")},t.i=function(e,n,r,o,i){"string"==typeof e&&(e=[[null,e,void 0]]);var a={};if(r)for(var u=0;u<this.length;u++){var l=this[u][0];null!=l&&(a[l]=!0)}for(var s=0;s<e.length;s++){var c=[].concat(e[s]);r&&a[c[0]]||(void 0!==i&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=i),n&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=n):c[2]=n),o&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=o):c[4]="".concat(o)),t.push(c))}},t}},354:e=>{"use strict";e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(o," */");return[t].concat([i]).join("\n")}return[t].join("\n")}},363:(e,t,n)=>{"use strict";e.exports=n(799)},404:(e,t,n)=>{"use strict";e.exports=n(72)},459:e=>{"use strict";e.exports=function(e){for(var t=5381,n=e.length;n;)t=33*t^e.charCodeAt(--n);return t>>>0}},463:(e,t)=>{"use strict";function n(e,t){var n=e.length;e.push(t);e:for(;0<n;){var r=n-1>>>1,o=e[r];if(!(0<i(o,t)))break e;e[r]=t,e[n]=o,n=r}}function r(e){return 0===e.length?null:e[0]}function o(e){if(0===e.length)return null;var t=e[0],n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,o=e.length,a=o>>>1;r<a;){var u=2*(r+1)-1,l=e[u],s=u+1,c=e[s];if(0>i(l,n))s<o&&0>i(c,l)?(e[r]=c,e[s]=n,r=s):(e[r]=l,e[u]=n,r=u);else{if(!(s<o&&0>i(c,n)))break e;e[r]=c,e[s]=n,r=s}}}return t}function i(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}if("object"==typeof performance&&"function"==typeof performance.now){var a=performance;t.unstable_now=function(){return a.now()}}else{var u=Date,l=u.now();t.unstable_now=function(){return u.now()-l}}var s=[],c=[],f=1,d=null,p=3,h=!1,y=!1,m=!1,v="function"==typeof setTimeout?setTimeout:null,g="function"==typeof clearTimeout?clearTimeout:null,b="undefined"!=typeof setImmediate?setImmediate:null;function _(e){for(var t=r(c);null!==t;){if(null===t.callback)o(c);else{if(!(t.startTime<=e))break;o(c),t.sortIndex=t.expirationTime,n(s,t)}t=r(c)}}function w(e){if(m=!1,_(e),!y)if(null!==r(s))y=!0,T(S);else{var t=r(c);null!==t&&M(w,t.startTime-e)}}function S(e,n){y=!1,m&&(m=!1,g(O),O=-1),h=!0;var i=p;try{for(_(n),d=r(s);null!==d&&(!(d.expirationTime>n)||e&&!z());){var a=d.callback;if("function"==typeof a){d.callback=null,p=d.priorityLevel;var u=a(d.expirationTime<=n);n=t.unstable_now(),"function"==typeof u?d.callback=u:d===r(s)&&o(s),_(n)}else o(s);d=r(s)}if(null!==d)var l=!0;else{var f=r(c);null!==f&&M(w,f.startTime-n),l=!1}return l}finally{d=null,p=i,h=!1}}"undefined"!=typeof navigator&&void 0!==navigator.scheduling&&void 0!==navigator.scheduling.isInputPending&&navigator.scheduling.isInputPending.bind(navigator.scheduling);var k,x=!1,E=null,O=-1,C=5,P=-1;function z(){return!(t.unstable_now()-P<C)}function j(){if(null!==E){var e=t.unstable_now();P=e;var n=!0;try{n=E(!0,e)}finally{n?k():(x=!1,E=null)}}else x=!1}if("function"==typeof b)k=function(){b(j)};else if("undefined"!=typeof MessageChannel){var I=new MessageChannel,N=I.port2;I.port1.onmessage=j,k=function(){N.postMessage(null)}}else k=function(){v(j,0)};function T(e){E=e,x||(x=!0,k())}function M(e,n){O=v(function(){e(t.unstable_now())},n)}t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){y||h||(y=!0,T(S))},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):C=0<e?Math.floor(1e3/e):5},t.unstable_getCurrentPriorityLevel=function(){return p},t.unstable_getFirstCallbackNode=function(){return r(s)},t.unstable_next=function(e){switch(p){case 1:case 2:case 3:var t=3;break;default:t=p}var n=p;p=t;try{return e()}finally{p=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=function(){},t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=p;p=e;try{return t()}finally{p=n}},t.unstable_scheduleCallback=function(e,o,i){var a=t.unstable_now();switch(i="object"==typeof i&&null!==i&&"number"==typeof(i=i.delay)&&0<i?a+i:a,e){case 1:var u=-1;break;case 2:u=250;break;case 5:u=1073741823;break;case 4:u=1e4;break;default:u=5e3}return e={id:f++,callback:o,priorityLevel:e,startTime:i,expirationTime:u=i+u,sortIndex:-1},i>a?(e.sortIndex=i,n(c,e),null===r(s)&&e===r(c)&&(m?(g(O),O=-1):m=!0,M(w,i-a))):(e.sortIndex=u,n(s,e),y||h||(y=!0,T(S))),e},t.unstable_shouldYield=z,t.unstable_wrapCallback=function(e){var t=p;return function(){var n=p;p=t;try{return e.apply(this,arguments)}finally{p=n}}}},493:(e,t,n)=>{"use strict";var r=n(540),o="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},i=r.useState,a=r.useEffect,u=r.useLayoutEffect,l=r.useDebugValue;function s(e){var t=e.getSnapshot;e=e.value;try{var n=t();return!o(e,n)}catch(e){return!0}}var c="undefined"==typeof window||void 0===window.document||void 0===window.document.createElement?function(e,t){return t()}:function(e,t){var n=t(),r=i({inst:{value:n,getSnapshot:t}}),o=r[0].inst,c=r[1];return u(function(){o.value=n,o.getSnapshot=t,s(o)&&c({inst:o})},[e,n,t]),a(function(){return s(o)&&c({inst:o}),e(function(){s(o)&&c({inst:o})})},[e]),l(n),n};t.useSyncExternalStore=void 0!==r.useSyncExternalStore?r.useSyncExternalStore:c},540:(e,t,n)=>{"use strict";e.exports=n(287)},551:(e,t,n)=>{"use strict";var r=n(540),o=n(982);function i(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var a=new Set,u={};function l(e,t){s(e,t),s(e+"Capture",t)}function s(e,t){for(u[e]=t,e=0;e<t.length;e++)a.add(t[e])}var c=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),f=Object.prototype.hasOwnProperty,d=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,p={},h={};function y(e,t,n,r,o,i,a){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=i,this.removeEmptyString=a}var m={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(e){m[e]=new y(e,0,!1,e,null,!1,!1)}),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach(function(e){var t=e[0];m[t]=new y(t,1,!1,e[1],null,!1,!1)}),["contentEditable","draggable","spellCheck","value"].forEach(function(e){m[e]=new y(e,2,!1,e.toLowerCase(),null,!1,!1)}),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach(function(e){m[e]=new y(e,2,!1,e,null,!1,!1)}),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(e){m[e]=new y(e,3,!1,e.toLowerCase(),null,!1,!1)}),["checked","multiple","muted","selected"].forEach(function(e){m[e]=new y(e,3,!0,e,null,!1,!1)}),["capture","download"].forEach(function(e){m[e]=new y(e,4,!1,e,null,!1,!1)}),["cols","rows","size","span"].forEach(function(e){m[e]=new y(e,6,!1,e,null,!1,!1)}),["rowSpan","start"].forEach(function(e){m[e]=new y(e,5,!1,e.toLowerCase(),null,!1,!1)});var v=/[\-:]([a-z])/g;function g(e){return e[1].toUpperCase()}function b(e,t,n,r){var o=m.hasOwnProperty(t)?m[t]:null;(null!==o?0!==o.type:r||!(2<t.length)||"o"!==t[0]&&"O"!==t[0]||"n"!==t[1]&&"N"!==t[1])&&(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,o,r)&&(n=null),r||null===o?function(e){return!!f.call(h,e)||!f.call(p,e)&&(d.test(e)?h[e]=!0:(p[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=null===n?3!==o.type&&"":n:(t=o.attributeName,r=o.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(o=o.type)||4===o&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(e){var t=e.replace(v,g);m[t]=new y(t,1,!1,e,null,!1,!1)}),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(e){var t=e.replace(v,g);m[t]=new y(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)}),["xml:base","xml:lang","xml:space"].forEach(function(e){var t=e.replace(v,g);m[t]=new y(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)}),["tabIndex","crossOrigin"].forEach(function(e){m[e]=new y(e,1,!1,e.toLowerCase(),null,!1,!1)}),m.xlinkHref=new y("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach(function(e){m[e]=new y(e,1,!1,e.toLowerCase(),null,!0,!0)});var _=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,w=Symbol.for("react.element"),S=Symbol.for("react.portal"),k=Symbol.for("react.fragment"),x=Symbol.for("react.strict_mode"),E=Symbol.for("react.profiler"),O=Symbol.for("react.provider"),C=Symbol.for("react.context"),P=Symbol.for("react.forward_ref"),z=Symbol.for("react.suspense"),j=Symbol.for("react.suspense_list"),I=Symbol.for("react.memo"),N=Symbol.for("react.lazy");Symbol.for("react.scope"),Symbol.for("react.debug_trace_mode");var T=Symbol.for("react.offscreen");Symbol.for("react.legacy_hidden"),Symbol.for("react.cache"),Symbol.for("react.tracing_marker");var M=Symbol.iterator;function R(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=M&&e[M]||e["@@iterator"])?e:null}var D,A=Object.assign;function L(e){if(void 0===D)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);D=t&&t[1]||""}return"\n"+D+e}var F=!1;function B(e,t){if(!e||F)return"";F=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var r=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){r=e}e.call(t.prototype)}else{try{throw Error()}catch(e){r=e}e()}}catch(t){if(t&&r&&"string"==typeof t.stack){for(var o=t.stack.split("\n"),i=r.stack.split("\n"),a=o.length-1,u=i.length-1;1<=a&&0<=u&&o[a]!==i[u];)u--;for(;1<=a&&0<=u;a--,u--)if(o[a]!==i[u]){if(1!==a||1!==u)do{if(a--,0>--u||o[a]!==i[u]){var l="\n"+o[a].replace(" at new "," at ");return e.displayName&&l.includes("<anonymous>")&&(l=l.replace("<anonymous>",e.displayName)),l}}while(1<=a&&0<=u);break}}}finally{F=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?L(e):""}function U(e){switch(e.tag){case 5:return L(e.type);case 16:return L("Lazy");case 13:return L("Suspense");case 19:return L("SuspenseList");case 0:case 2:case 15:return B(e.type,!1);case 11:return B(e.type.render,!1);case 1:return B(e.type,!0);default:return""}}function W(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case k:return"Fragment";case S:return"Portal";case E:return"Profiler";case x:return"StrictMode";case z:return"Suspense";case j:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case C:return(e.displayName||"Context")+".Consumer";case O:return(e._context.displayName||"Context")+".Provider";case P:var t=e.render;return(e=e.displayName)||(e=""!==(e=t.displayName||t.name||"")?"ForwardRef("+e+")":"ForwardRef"),e;case I:return null!==(t=e.displayName||null)?t:W(e.type)||"Memo";case N:t=e._payload,e=e._init;try{return W(e(t))}catch(e){}}return null}function q(e){var t=e.type;switch(e.tag){case 24:return"Cache";case 9:return(t.displayName||"Context")+".Consumer";case 10:return(t._context.displayName||"Context")+".Provider";case 18:return"DehydratedFragment";case 11:return e=(e=t.render).displayName||e.name||"",t.displayName||(""!==e?"ForwardRef("+e+")":"ForwardRef");case 7:return"Fragment";case 5:return t;case 4:return"Portal";case 3:return"Root";case 6:return"Text";case 16:return W(t);case 8:return t===x?"StrictMode":"Mode";case 22:return"Offscreen";case 12:return"Profiler";case 21:return"Scope";case 13:return"Suspense";case 19:return"SuspenseList";case 25:return"TracingMarker";case 1:case 0:case 17:case 2:case 14:case 15:if("function"==typeof t)return t.displayName||t.name||null;if("string"==typeof t)return t}return null}function $(e){switch(typeof e){case"boolean":case"number":case"string":case"undefined":case"object":return e;default:return""}}function V(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function H(e){e._valueTracker||(e._valueTracker=function(e){var t=V(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var o=n.get,i=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){r=""+e,i.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function K(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=V(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function Q(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function G(e,t){var n=t.checked;return A({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function Y(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=$(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function X(e,t){null!=(t=t.checked)&&b(e,"checked",t,!1)}function J(e,t){X(e,t);var n=$(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?ee(e,t.type,n):t.hasOwnProperty("defaultValue")&&ee(e,t.type,$(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function Z(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function ee(e,t,n){"number"===t&&Q(e.ownerDocument)===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}var te=Array.isArray;function ne(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+$(n),t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function re(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(i(91));return A({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function oe(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(i(92));if(te(n)){if(1<n.length)throw Error(i(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:$(n)}}function ie(e,t){var n=$(t.value),r=$(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function ae(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}function ue(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function le(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?ue(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var se,ce,fe=(ce=function(e,t){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=t;else{for((se=se||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=se.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction(function(){return ce(e,t)})}:ce);function de(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var pe={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},he=["Webkit","ms","Moz","O"];function ye(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||pe.hasOwnProperty(e)&&pe[e]?(""+t).trim():t+"px"}function me(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=ye(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}Object.keys(pe).forEach(function(e){he.forEach(function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),pe[t]=pe[e]})});var ve=A({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function ge(e,t){if(t){if(ve[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(i(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(i(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(i(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(i(62))}}function be(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var _e=null;function we(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var Se=null,ke=null,xe=null;function Ee(e){if(e=_o(e)){if("function"!=typeof Se)throw Error(i(280));var t=e.stateNode;t&&(t=So(t),Se(e.stateNode,e.type,t))}}function Oe(e){ke?xe?xe.push(e):xe=[e]:ke=e}function Ce(){if(ke){var e=ke,t=xe;if(xe=ke=null,Ee(e),t)for(e=0;e<t.length;e++)Ee(t[e])}}function Pe(e,t){return e(t)}function ze(){}var je=!1;function Ie(e,t,n){if(je)return e(t,n);je=!0;try{return Pe(e,t,n)}finally{je=!1,(null!==ke||null!==xe)&&(ze(),Ce())}}function Ne(e,t){var n=e.stateNode;if(null===n)return null;var r=So(n);if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(i(231,t,typeof n));return n}var Te=!1;if(c)try{var Me={};Object.defineProperty(Me,"passive",{get:function(){Te=!0}}),window.addEventListener("test",Me,Me),window.removeEventListener("test",Me,Me)}catch(ce){Te=!1}function Re(e,t,n,r,o,i,a,u,l){var s=Array.prototype.slice.call(arguments,3);try{t.apply(n,s)}catch(e){this.onError(e)}}var De=!1,Ae=null,Le=!1,Fe=null,Be={onError:function(e){De=!0,Ae=e}};function Ue(e,t,n,r,o,i,a,u,l){De=!1,Ae=null,Re.apply(Be,arguments)}function We(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{!!(4098&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function qe(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function $e(e){if(We(e)!==e)throw Error(i(188))}function Ve(e){return null!==(e=function(e){var t=e.alternate;if(!t){if(null===(t=We(e)))throw Error(i(188));return t!==e?null:e}for(var n=e,r=t;;){var o=n.return;if(null===o)break;var a=o.alternate;if(null===a){if(null!==(r=o.return)){n=r;continue}break}if(o.child===a.child){for(a=o.child;a;){if(a===n)return $e(o),e;if(a===r)return $e(o),t;a=a.sibling}throw Error(i(188))}if(n.return!==r.return)n=o,r=a;else{for(var u=!1,l=o.child;l;){if(l===n){u=!0,n=o,r=a;break}if(l===r){u=!0,r=o,n=a;break}l=l.sibling}if(!u){for(l=a.child;l;){if(l===n){u=!0,n=a,r=o;break}if(l===r){u=!0,r=a,n=o;break}l=l.sibling}if(!u)throw Error(i(189))}}if(n.alternate!==r)throw Error(i(190))}if(3!==n.tag)throw Error(i(188));return n.stateNode.current===n?e:t}(e))?He(e):null}function He(e){if(5===e.tag||6===e.tag)return e;for(e=e.child;null!==e;){var t=He(e);if(null!==t)return t;e=e.sibling}return null}var Ke=o.unstable_scheduleCallback,Qe=o.unstable_cancelCallback,Ge=o.unstable_shouldYield,Ye=o.unstable_requestPaint,Xe=o.unstable_now,Je=o.unstable_getCurrentPriorityLevel,Ze=o.unstable_ImmediatePriority,et=o.unstable_UserBlockingPriority,tt=o.unstable_NormalPriority,nt=o.unstable_LowPriority,rt=o.unstable_IdlePriority,ot=null,it=null,at=Math.clz32?Math.clz32:function(e){return 0===(e>>>=0)?32:31-(ut(e)/lt|0)|0},ut=Math.log,lt=Math.LN2,st=64,ct=4194304;function ft(e){switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return 4194240&e;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return 130023424&e;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;default:return e}}function dt(e,t){var n=e.pendingLanes;if(0===n)return 0;var r=0,o=e.suspendedLanes,i=e.pingedLanes,a=268435455&n;if(0!==a){var u=a&~o;0!==u?r=ft(u):0!==(i&=a)&&(r=ft(i))}else 0!==(a=n&~o)?r=ft(a):0!==i&&(r=ft(i));if(0===r)return 0;if(0!==t&&t!==r&&0===(t&o)&&((o=r&-r)>=(i=t&-t)||16===o&&4194240&i))return t;if(4&r&&(r|=16&n),0!==(t=e.entangledLanes))for(e=e.entanglements,t&=r;0<t;)o=1<<(n=31-at(t)),r|=e[n],t&=~o;return r}function pt(e,t){switch(e){case 1:case 2:case 4:return t+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return t+5e3;default:return-1}}function ht(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function yt(){var e=st;return!(4194240&(st<<=1))&&(st=64),e}function mt(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function vt(e,t,n){e.pendingLanes|=t,536870912!==t&&(e.suspendedLanes=0,e.pingedLanes=0),(e=e.eventTimes)[t=31-at(t)]=n}function gt(e,t){var n=e.entangledLanes|=t;for(e=e.entanglements;n;){var r=31-at(n),o=1<<r;o&t|e[r]&t&&(e[r]|=t),n&=~o}}var bt=0;function _t(e){return 1<(e&=-e)?4<e?268435455&e?16:536870912:4:1}var wt,St,kt,xt,Et,Ot=!1,Ct=[],Pt=null,zt=null,jt=null,It=new Map,Nt=new Map,Tt=[],Mt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function Rt(e,t){switch(e){case"focusin":case"focusout":Pt=null;break;case"dragenter":case"dragleave":zt=null;break;case"mouseover":case"mouseout":jt=null;break;case"pointerover":case"pointerout":It.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":Nt.delete(t.pointerId)}}function Dt(e,t,n,r,o,i){return null===e||e.nativeEvent!==i?(e={blockedOn:t,domEventName:n,eventSystemFlags:r,nativeEvent:i,targetContainers:[o]},null!==t&&null!==(t=_o(t))&&St(t),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==o&&-1===t.indexOf(o)&&t.push(o),e)}function At(e){var t=bo(e.target);if(null!==t){var n=We(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=qe(n)))return e.blockedOn=t,void Et(e.priority,function(){kt(n)})}else if(3===t&&n.stateNode.current.memoizedState.isDehydrated)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function Lt(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=Gt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n)return null!==(t=_o(n))&&St(t),e.blockedOn=n,!1;var r=new(n=e.nativeEvent).constructor(n.type,n);_e=r,n.target.dispatchEvent(r),_e=null,t.shift()}return!0}function Ft(e,t,n){Lt(e)&&n.delete(t)}function Bt(){Ot=!1,null!==Pt&&Lt(Pt)&&(Pt=null),null!==zt&&Lt(zt)&&(zt=null),null!==jt&&Lt(jt)&&(jt=null),It.forEach(Ft),Nt.forEach(Ft)}function Ut(e,t){e.blockedOn===t&&(e.blockedOn=null,Ot||(Ot=!0,o.unstable_scheduleCallback(o.unstable_NormalPriority,Bt)))}function Wt(e){function t(t){return Ut(t,e)}if(0<Ct.length){Ut(Ct[0],e);for(var n=1;n<Ct.length;n++){var r=Ct[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==Pt&&Ut(Pt,e),null!==zt&&Ut(zt,e),null!==jt&&Ut(jt,e),It.forEach(t),Nt.forEach(t),n=0;n<Tt.length;n++)(r=Tt[n]).blockedOn===e&&(r.blockedOn=null);for(;0<Tt.length&&null===(n=Tt[0]).blockedOn;)At(n),null===n.blockedOn&&Tt.shift()}var qt=_.ReactCurrentBatchConfig,$t=!0;function Vt(e,t,n,r){var o=bt,i=qt.transition;qt.transition=null;try{bt=1,Kt(e,t,n,r)}finally{bt=o,qt.transition=i}}function Ht(e,t,n,r){var o=bt,i=qt.transition;qt.transition=null;try{bt=4,Kt(e,t,n,r)}finally{bt=o,qt.transition=i}}function Kt(e,t,n,r){if($t){var o=Gt(e,t,n,r);if(null===o)$r(e,t,r,Qt,n),Rt(e,r);else if(function(e,t,n,r,o){switch(t){case"focusin":return Pt=Dt(Pt,e,t,n,r,o),!0;case"dragenter":return zt=Dt(zt,e,t,n,r,o),!0;case"mouseover":return jt=Dt(jt,e,t,n,r,o),!0;case"pointerover":var i=o.pointerId;return It.set(i,Dt(It.get(i)||null,e,t,n,r,o)),!0;case"gotpointercapture":return i=o.pointerId,Nt.set(i,Dt(Nt.get(i)||null,e,t,n,r,o)),!0}return!1}(o,e,t,n,r))r.stopPropagation();else if(Rt(e,r),4&t&&-1<Mt.indexOf(e)){for(;null!==o;){var i=_o(o);if(null!==i&&wt(i),null===(i=Gt(e,t,n,r))&&$r(e,t,r,Qt,n),i===o)break;o=i}null!==o&&r.stopPropagation()}else $r(e,t,r,null,n)}}var Qt=null;function Gt(e,t,n,r){if(Qt=null,null!==(e=bo(e=we(r))))if(null===(t=We(e)))e=null;else if(13===(n=t.tag)){if(null!==(e=qe(t)))return e;e=null}else if(3===n){if(t.stateNode.current.memoizedState.isDehydrated)return 3===t.tag?t.stateNode.containerInfo:null;e=null}else t!==e&&(e=null);return Qt=e,null}function Yt(e){switch(e){case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 1;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"toggle":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 4;case"message":switch(Je()){case Ze:return 1;case et:return 4;case tt:case nt:return 16;case rt:return 536870912;default:return 16}default:return 16}}var Xt=null,Jt=null,Zt=null;function en(){if(Zt)return Zt;var e,t,n=Jt,r=n.length,o="value"in Xt?Xt.value:Xt.textContent,i=o.length;for(e=0;e<r&&n[e]===o[e];e++);var a=r-e;for(t=1;t<=a&&n[r-t]===o[i-t];t++);return Zt=o.slice(e,1<t?1-t:void 0)}function tn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function nn(){return!0}function rn(){return!1}function on(e){function t(t,n,r,o,i){for(var a in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=o,this.target=i,this.currentTarget=null,e)e.hasOwnProperty(a)&&(t=e[a],this[a]=t?t(o):o[a]);return this.isDefaultPrevented=(null!=o.defaultPrevented?o.defaultPrevented:!1===o.returnValue)?nn:rn,this.isPropagationStopped=rn,this}return A(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=nn)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=nn)},persist:function(){},isPersistent:nn}),t}var an,un,ln,sn={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},cn=on(sn),fn=A({},sn,{view:0,detail:0}),dn=on(fn),pn=A({},fn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:En,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==ln&&(ln&&"mousemove"===e.type?(an=e.screenX-ln.screenX,un=e.screenY-ln.screenY):un=an=0,ln=e),an)},movementY:function(e){return"movementY"in e?e.movementY:un}}),hn=on(pn),yn=on(A({},pn,{dataTransfer:0})),mn=on(A({},fn,{relatedTarget:0})),vn=on(A({},sn,{animationName:0,elapsedTime:0,pseudoElement:0})),gn=A({},sn,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),bn=on(gn),_n=on(A({},sn,{data:0})),wn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},Sn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},kn={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function xn(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=kn[e])&&!!t[e]}function En(){return xn}var On=A({},fn,{key:function(e){if(e.key){var t=wn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=tn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?Sn[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:En,charCode:function(e){return"keypress"===e.type?tn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?tn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),Cn=on(On),Pn=on(A({},pn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),zn=on(A({},fn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:En})),jn=on(A({},sn,{propertyName:0,elapsedTime:0,pseudoElement:0})),In=A({},pn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0}),Nn=on(In),Tn=[9,13,27,32],Mn=c&&"CompositionEvent"in window,Rn=null;c&&"documentMode"in document&&(Rn=document.documentMode);var Dn=c&&"TextEvent"in window&&!Rn,An=c&&(!Mn||Rn&&8<Rn&&11>=Rn),Ln=String.fromCharCode(32),Fn=!1;function Bn(e,t){switch(e){case"keyup":return-1!==Tn.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Un(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Wn=!1,qn={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function $n(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!qn[e.type]:"textarea"===t}function Vn(e,t,n,r){Oe(r),0<(t=Hr(t,"onChange")).length&&(n=new cn("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var Hn=null,Kn=null;function Qn(e){Lr(e,0)}function Gn(e){if(K(wo(e)))return e}function Yn(e,t){if("change"===e)return t}var Xn=!1;if(c){var Jn;if(c){var Zn="oninput"in document;if(!Zn){var er=document.createElement("div");er.setAttribute("oninput","return;"),Zn="function"==typeof er.oninput}Jn=Zn}else Jn=!1;Xn=Jn&&(!document.documentMode||9<document.documentMode)}function tr(){Hn&&(Hn.detachEvent("onpropertychange",nr),Kn=Hn=null)}function nr(e){if("value"===e.propertyName&&Gn(Kn)){var t=[];Vn(t,Kn,e,we(e)),Ie(Qn,t)}}function rr(e,t,n){"focusin"===e?(tr(),Kn=n,(Hn=t).attachEvent("onpropertychange",nr)):"focusout"===e&&tr()}function or(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Gn(Kn)}function ir(e,t){if("click"===e)return Gn(t)}function ar(e,t){if("input"===e||"change"===e)return Gn(t)}var ur="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t};function lr(e,t){if(ur(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++){var o=n[r];if(!f.call(t,o)||!ur(e[o],t[o]))return!1}return!0}function sr(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function cr(e,t){var n,r=sr(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=sr(r)}}function fr(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?fr(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function dr(){for(var e=window,t=Q();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=Q((e=t.contentWindow).document)}return t}function pr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}function hr(e){var t=dr(),n=e.focusedElem,r=e.selectionRange;if(t!==n&&n&&n.ownerDocument&&fr(n.ownerDocument.documentElement,n)){if(null!==r&&pr(n))if(t=r.start,void 0===(e=r.end)&&(e=t),"selectionStart"in n)n.selectionStart=t,n.selectionEnd=Math.min(e,n.value.length);else if((e=(t=n.ownerDocument||document)&&t.defaultView||window).getSelection){e=e.getSelection();var o=n.textContent.length,i=Math.min(r.start,o);r=void 0===r.end?i:Math.min(r.end,o),!e.extend&&i>r&&(o=r,r=i,i=o),o=cr(n,i);var a=cr(n,r);o&&a&&(1!==e.rangeCount||e.anchorNode!==o.node||e.anchorOffset!==o.offset||e.focusNode!==a.node||e.focusOffset!==a.offset)&&((t=t.createRange()).setStart(o.node,o.offset),e.removeAllRanges(),i>r?(e.addRange(t),e.extend(a.node,a.offset)):(t.setEnd(a.node,a.offset),e.addRange(t)))}for(t=[],e=n;e=e.parentNode;)1===e.nodeType&&t.push({element:e,left:e.scrollLeft,top:e.scrollTop});for("function"==typeof n.focus&&n.focus(),n=0;n<t.length;n++)(e=t[n]).element.scrollLeft=e.left,e.element.scrollTop=e.top}}var yr=c&&"documentMode"in document&&11>=document.documentMode,mr=null,vr=null,gr=null,br=!1;function _r(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;br||null==mr||mr!==Q(r)||(r="selectionStart"in(r=mr)&&pr(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},gr&&lr(gr,r)||(gr=r,0<(r=Hr(vr,"onSelect")).length&&(t=new cn("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=mr)))}function wr(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var Sr={animationend:wr("Animation","AnimationEnd"),animationiteration:wr("Animation","AnimationIteration"),animationstart:wr("Animation","AnimationStart"),transitionend:wr("Transition","TransitionEnd")},kr={},xr={};function Er(e){if(kr[e])return kr[e];if(!Sr[e])return e;var t,n=Sr[e];for(t in n)if(n.hasOwnProperty(t)&&t in xr)return kr[e]=n[t];return e}c&&(xr=document.createElement("div").style,"AnimationEvent"in window||(delete Sr.animationend.animation,delete Sr.animationiteration.animation,delete Sr.animationstart.animation),"TransitionEvent"in window||delete Sr.transitionend.transition);var Or=Er("animationend"),Cr=Er("animationiteration"),Pr=Er("animationstart"),zr=Er("transitionend"),jr=new Map,Ir="abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");function Nr(e,t){jr.set(e,t),l(t,[e])}for(var Tr=0;Tr<Ir.length;Tr++){var Mr=Ir[Tr];Nr(Mr.toLowerCase(),"on"+(Mr[0].toUpperCase()+Mr.slice(1)))}Nr(Or,"onAnimationEnd"),Nr(Cr,"onAnimationIteration"),Nr(Pr,"onAnimationStart"),Nr("dblclick","onDoubleClick"),Nr("focusin","onFocus"),Nr("focusout","onBlur"),Nr(zr,"onTransitionEnd"),s("onMouseEnter",["mouseout","mouseover"]),s("onMouseLeave",["mouseout","mouseover"]),s("onPointerEnter",["pointerout","pointerover"]),s("onPointerLeave",["pointerout","pointerover"]),l("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),l("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),l("onBeforeInput",["compositionend","keypress","textInput","paste"]),l("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),l("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),l("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Rr="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Dr=new Set("cancel close invalid load scroll toggle".split(" ").concat(Rr));function Ar(e,t,n){var r=e.type||"unknown-event";e.currentTarget=n,function(e,t,n,r,o,a,u,l,s){if(Ue.apply(this,arguments),De){if(!De)throw Error(i(198));var c=Ae;De=!1,Ae=null,Le||(Le=!0,Fe=c)}}(r,t,void 0,e),e.currentTarget=null}function Lr(e,t){t=!!(4&t);for(var n=0;n<e.length;n++){var r=e[n],o=r.event;r=r.listeners;e:{var i=void 0;if(t)for(var a=r.length-1;0<=a;a--){var u=r[a],l=u.instance,s=u.currentTarget;if(u=u.listener,l!==i&&o.isPropagationStopped())break e;Ar(o,u,s),i=l}else for(a=0;a<r.length;a++){if(l=(u=r[a]).instance,s=u.currentTarget,u=u.listener,l!==i&&o.isPropagationStopped())break e;Ar(o,u,s),i=l}}}if(Le)throw e=Fe,Le=!1,Fe=null,e}function Fr(e,t){var n=t[mo];void 0===n&&(n=t[mo]=new Set);var r=e+"__bubble";n.has(r)||(qr(t,e,2,!1),n.add(r))}function Br(e,t,n){var r=0;t&&(r|=4),qr(n,e,r,t)}var Ur="_reactListening"+Math.random().toString(36).slice(2);function Wr(e){if(!e[Ur]){e[Ur]=!0,a.forEach(function(t){"selectionchange"!==t&&(Dr.has(t)||Br(t,!1,e),Br(t,!0,e))});var t=9===e.nodeType?e:e.ownerDocument;null===t||t[Ur]||(t[Ur]=!0,Br("selectionchange",!1,t))}}function qr(e,t,n,r){switch(Yt(t)){case 1:var o=Vt;break;case 4:o=Ht;break;default:o=Kt}n=o.bind(null,t,n,e),o=void 0,!Te||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(o=!0),r?void 0!==o?e.addEventListener(t,n,{capture:!0,passive:o}):e.addEventListener(t,n,!0):void 0!==o?e.addEventListener(t,n,{passive:o}):e.addEventListener(t,n,!1)}function $r(e,t,n,r,o){var i=r;if(!(1&t||2&t||null===r))e:for(;;){if(null===r)return;var a=r.tag;if(3===a||4===a){var u=r.stateNode.containerInfo;if(u===o||8===u.nodeType&&u.parentNode===o)break;if(4===a)for(a=r.return;null!==a;){var l=a.tag;if((3===l||4===l)&&((l=a.stateNode.containerInfo)===o||8===l.nodeType&&l.parentNode===o))return;a=a.return}for(;null!==u;){if(null===(a=bo(u)))return;if(5===(l=a.tag)||6===l){r=i=a;continue e}u=u.parentNode}}r=r.return}Ie(function(){var r=i,o=we(n),a=[];e:{var u=jr.get(e);if(void 0!==u){var l=cn,s=e;switch(e){case"keypress":if(0===tn(n))break e;case"keydown":case"keyup":l=Cn;break;case"focusin":s="focus",l=mn;break;case"focusout":s="blur",l=mn;break;case"beforeblur":case"afterblur":l=mn;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":l=hn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":l=yn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":l=zn;break;case Or:case Cr:case Pr:l=vn;break;case zr:l=jn;break;case"scroll":l=dn;break;case"wheel":l=Nn;break;case"copy":case"cut":case"paste":l=bn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":l=Pn}var c=!!(4&t),f=!c&&"scroll"===e,d=c?null!==u?u+"Capture":null:u;c=[];for(var p,h=r;null!==h;){var y=(p=h).stateNode;if(5===p.tag&&null!==y&&(p=y,null!==d&&null!=(y=Ne(h,d))&&c.push(Vr(h,y,p))),f)break;h=h.return}0<c.length&&(u=new l(u,s,null,n,o),a.push({event:u,listeners:c}))}}if(!(7&t)){if(l="mouseout"===e||"pointerout"===e,(!(u="mouseover"===e||"pointerover"===e)||n===_e||!(s=n.relatedTarget||n.fromElement)||!bo(s)&&!s[yo])&&(l||u)&&(u=o.window===o?o:(u=o.ownerDocument)?u.defaultView||u.parentWindow:window,l?(l=r,null!==(s=(s=n.relatedTarget||n.toElement)?bo(s):null)&&(s!==(f=We(s))||5!==s.tag&&6!==s.tag)&&(s=null)):(l=null,s=r),l!==s)){if(c=hn,y="onMouseLeave",d="onMouseEnter",h="mouse","pointerout"!==e&&"pointerover"!==e||(c=Pn,y="onPointerLeave",d="onPointerEnter",h="pointer"),f=null==l?u:wo(l),p=null==s?u:wo(s),(u=new c(y,h+"leave",l,n,o)).target=f,u.relatedTarget=p,y=null,bo(o)===r&&((c=new c(d,h+"enter",s,n,o)).target=p,c.relatedTarget=f,y=c),f=y,l&&s)e:{for(d=s,h=0,p=c=l;p;p=Kr(p))h++;for(p=0,y=d;y;y=Kr(y))p++;for(;0<h-p;)c=Kr(c),h--;for(;0<p-h;)d=Kr(d),p--;for(;h--;){if(c===d||null!==d&&c===d.alternate)break e;c=Kr(c),d=Kr(d)}c=null}else c=null;null!==l&&Qr(a,u,l,c,!1),null!==s&&null!==f&&Qr(a,f,s,c,!0)}if("select"===(l=(u=r?wo(r):window).nodeName&&u.nodeName.toLowerCase())||"input"===l&&"file"===u.type)var m=Yn;else if($n(u))if(Xn)m=ar;else{m=or;var v=rr}else(l=u.nodeName)&&"input"===l.toLowerCase()&&("checkbox"===u.type||"radio"===u.type)&&(m=ir);switch(m&&(m=m(e,r))?Vn(a,m,n,o):(v&&v(e,u,r),"focusout"===e&&(v=u._wrapperState)&&v.controlled&&"number"===u.type&&ee(u,"number",u.value)),v=r?wo(r):window,e){case"focusin":($n(v)||"true"===v.contentEditable)&&(mr=v,vr=r,gr=null);break;case"focusout":gr=vr=mr=null;break;case"mousedown":br=!0;break;case"contextmenu":case"mouseup":case"dragend":br=!1,_r(a,n,o);break;case"selectionchange":if(yr)break;case"keydown":case"keyup":_r(a,n,o)}var g;if(Mn)e:{switch(e){case"compositionstart":var b="onCompositionStart";break e;case"compositionend":b="onCompositionEnd";break e;case"compositionupdate":b="onCompositionUpdate";break e}b=void 0}else Wn?Bn(e,n)&&(b="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(b="onCompositionStart");b&&(An&&"ko"!==n.locale&&(Wn||"onCompositionStart"!==b?"onCompositionEnd"===b&&Wn&&(g=en()):(Jt="value"in(Xt=o)?Xt.value:Xt.textContent,Wn=!0)),0<(v=Hr(r,b)).length&&(b=new _n(b,e,null,n,o),a.push({event:b,listeners:v}),(g||null!==(g=Un(n)))&&(b.data=g))),(g=Dn?function(e,t){switch(e){case"compositionend":return Un(t);case"keypress":return 32!==t.which?null:(Fn=!0,Ln);case"textInput":return(e=t.data)===Ln&&Fn?null:e;default:return null}}(e,n):function(e,t){if(Wn)return"compositionend"===e||!Mn&&Bn(e,t)?(e=en(),Zt=Jt=Xt=null,Wn=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return An&&"ko"!==t.locale?null:t.data}}(e,n))&&0<(r=Hr(r,"onBeforeInput")).length&&(o=new _n("onBeforeInput","beforeinput",null,n,o),a.push({event:o,listeners:r}),o.data=g)}Lr(a,t)})}function Vr(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Hr(e,t){for(var n=t+"Capture",r=[];null!==e;){var o=e,i=o.stateNode;5===o.tag&&null!==i&&(o=i,null!=(i=Ne(e,n))&&r.unshift(Vr(e,i,o)),null!=(i=Ne(e,t))&&r.push(Vr(e,i,o))),e=e.return}return r}function Kr(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function Qr(e,t,n,r,o){for(var i=t._reactName,a=[];null!==n&&n!==r;){var u=n,l=u.alternate,s=u.stateNode;if(null!==l&&l===r)break;5===u.tag&&null!==s&&(u=s,o?null!=(l=Ne(n,i))&&a.unshift(Vr(n,l,u)):o||null!=(l=Ne(n,i))&&a.push(Vr(n,l,u))),n=n.return}0!==a.length&&e.push({event:t,listeners:a})}var Gr=/\r\n?/g,Yr=/\u0000|\uFFFD/g;function Xr(e){return("string"==typeof e?e:""+e).replace(Gr,"\n").replace(Yr,"")}function Jr(e,t,n){if(t=Xr(t),Xr(e)!==t&&n)throw Error(i(425))}function Zr(){}var eo=null,to=null;function no(e,t){return"textarea"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var ro="function"==typeof setTimeout?setTimeout:void 0,oo="function"==typeof clearTimeout?clearTimeout:void 0,io="function"==typeof Promise?Promise:void 0,ao="function"==typeof queueMicrotask?queueMicrotask:void 0!==io?function(e){return io.resolve(null).then(e).catch(uo)}:ro;function uo(e){setTimeout(function(){throw e})}function lo(e,t){var n=t,r=0;do{var o=n.nextSibling;if(e.removeChild(n),o&&8===o.nodeType)if("/$"===(n=o.data)){if(0===r)return e.removeChild(o),void Wt(t);r--}else"$"!==n&&"$?"!==n&&"$!"!==n||r++;n=o}while(n);Wt(t)}function so(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break;if(8===t){if("$"===(t=e.data)||"$!"===t||"$?"===t)break;if("/$"===t)return null}}return e}function co(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var fo=Math.random().toString(36).slice(2),po="__reactFiber$"+fo,ho="__reactProps$"+fo,yo="__reactContainer$"+fo,mo="__reactEvents$"+fo,vo="__reactListeners$"+fo,go="__reactHandles$"+fo;function bo(e){var t=e[po];if(t)return t;for(var n=e.parentNode;n;){if(t=n[yo]||n[po]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=co(e);null!==e;){if(n=e[po])return n;e=co(e)}return t}n=(e=n).parentNode}return null}function _o(e){return!(e=e[po]||e[yo])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function wo(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(i(33))}function So(e){return e[ho]||null}var ko=[],xo=-1;function Eo(e){return{current:e}}function Oo(e){0>xo||(e.current=ko[xo],ko[xo]=null,xo--)}function Co(e,t){xo++,ko[xo]=e.current,e.current=t}var Po={},zo=Eo(Po),jo=Eo(!1),Io=Po;function No(e,t){var n=e.type.contextTypes;if(!n)return Po;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var o,i={};for(o in n)i[o]=t[o];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=i),i}function To(e){return null!=e.childContextTypes}function Mo(){Oo(jo),Oo(zo)}function Ro(e,t,n){if(zo.current!==Po)throw Error(i(168));Co(zo,t),Co(jo,n)}function Do(e,t,n){var r=e.stateNode;if(t=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var o in r=r.getChildContext())if(!(o in t))throw Error(i(108,q(e)||"Unknown",o));return A({},n,r)}function Ao(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||Po,Io=zo.current,Co(zo,e),Co(jo,jo.current),!0}function Lo(e,t,n){var r=e.stateNode;if(!r)throw Error(i(169));n?(e=Do(e,t,Io),r.__reactInternalMemoizedMergedChildContext=e,Oo(jo),Oo(zo),Co(zo,e)):Oo(jo),Co(jo,n)}var Fo=null,Bo=!1,Uo=!1;function Wo(e){null===Fo?Fo=[e]:Fo.push(e)}function qo(){if(!Uo&&null!==Fo){Uo=!0;var e=0,t=bt;try{var n=Fo;for(bt=1;e<n.length;e++){var r=n[e];do{r=r(!0)}while(null!==r)}Fo=null,Bo=!1}catch(t){throw null!==Fo&&(Fo=Fo.slice(e+1)),Ke(Ze,qo),t}finally{bt=t,Uo=!1}}return null}var $o=[],Vo=0,Ho=null,Ko=0,Qo=[],Go=0,Yo=null,Xo=1,Jo="";function Zo(e,t){$o[Vo++]=Ko,$o[Vo++]=Ho,Ho=e,Ko=t}function ei(e,t,n){Qo[Go++]=Xo,Qo[Go++]=Jo,Qo[Go++]=Yo,Yo=e;var r=Xo;e=Jo;var o=32-at(r)-1;r&=~(1<<o),n+=1;var i=32-at(t)+o;if(30<i){var a=o-o%5;i=(r&(1<<a)-1).toString(32),r>>=a,o-=a,Xo=1<<32-at(t)+o|n<<o|r,Jo=i+e}else Xo=1<<i|n<<o|r,Jo=e}function ti(e){null!==e.return&&(Zo(e,1),ei(e,1,0))}function ni(e){for(;e===Ho;)Ho=$o[--Vo],$o[Vo]=null,Ko=$o[--Vo],$o[Vo]=null;for(;e===Yo;)Yo=Qo[--Go],Qo[Go]=null,Jo=Qo[--Go],Qo[Go]=null,Xo=Qo[--Go],Qo[Go]=null}var ri=null,oi=null,ii=!1,ai=null;function ui(e,t){var n=Is(5,null,null,0);n.elementType="DELETED",n.stateNode=t,n.return=e,null===(t=e.deletions)?(e.deletions=[n],e.flags|=16):t.push(n)}function li(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,ri=e,oi=so(t.firstChild),!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,ri=e,oi=null,!0);case 13:return null!==(t=8!==t.nodeType?null:t)&&(n=null!==Yo?{id:Xo,overflow:Jo}:null,e.memoizedState={dehydrated:t,treeContext:n,retryLane:1073741824},(n=Is(18,null,null,0)).stateNode=t,n.return=e,e.child=n,ri=e,oi=null,!0);default:return!1}}function si(e){return!(!(1&e.mode)||128&e.flags)}function ci(e){if(ii){var t=oi;if(t){var n=t;if(!li(e,t)){if(si(e))throw Error(i(418));t=so(n.nextSibling);var r=ri;t&&li(e,t)?ui(r,n):(e.flags=-4097&e.flags|2,ii=!1,ri=e)}}else{if(si(e))throw Error(i(418));e.flags=-4097&e.flags|2,ii=!1,ri=e}}}function fi(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;ri=e}function di(e){if(e!==ri)return!1;if(!ii)return fi(e),ii=!0,!1;var t;if((t=3!==e.tag)&&!(t=5!==e.tag)&&(t="head"!==(t=e.type)&&"body"!==t&&!no(e.type,e.memoizedProps)),t&&(t=oi)){if(si(e))throw pi(),Error(i(418));for(;t;)ui(e,t),t=so(t.nextSibling)}if(fi(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(i(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){oi=so(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}oi=null}}else oi=ri?so(e.stateNode.nextSibling):null;return!0}function pi(){for(var e=oi;e;)e=so(e.nextSibling)}function hi(){oi=ri=null,ii=!1}function yi(e){null===ai?ai=[e]:ai.push(e)}var mi=_.ReactCurrentBatchConfig;function vi(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(i(309));var r=n.stateNode}if(!r)throw Error(i(147,e));var o=r,a=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===a?t.ref:(t=function(e){var t=o.refs;null===e?delete t[a]:t[a]=e},t._stringRef=a,t)}if("string"!=typeof e)throw Error(i(284));if(!n._owner)throw Error(i(290,e))}return e}function gi(e,t){throw e=Object.prototype.toString.call(t),Error(i(31,"[object Object]"===e?"object with keys {"+Object.keys(t).join(", ")+"}":e))}function bi(e){return(0,e._init)(e._payload)}function _i(e){function t(t,n){if(e){var r=t.deletions;null===r?(t.deletions=[n],t.flags|=16):r.push(n)}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t){return(e=Ts(e,t)).index=0,e.sibling=null,e}function a(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags|=2,n):r:(t.flags|=2,n):(t.flags|=1048576,n)}function u(t){return e&&null===t.alternate&&(t.flags|=2),t}function l(e,t,n,r){return null===t||6!==t.tag?((t=As(n,e.mode,r)).return=e,t):((t=o(t,n)).return=e,t)}function s(e,t,n,r){var i=n.type;return i===k?f(e,t,n.props.children,r,n.key):null!==t&&(t.elementType===i||"object"==typeof i&&null!==i&&i.$$typeof===N&&bi(i)===t.type)?((r=o(t,n.props)).ref=vi(e,t,n),r.return=e,r):((r=Ms(n.type,n.key,n.props,null,e.mode,r)).ref=vi(e,t,n),r.return=e,r)}function c(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Ls(n,e.mode,r)).return=e,t):((t=o(t,n.children||[])).return=e,t)}function f(e,t,n,r,i){return null===t||7!==t.tag?((t=Rs(n,e.mode,r,i)).return=e,t):((t=o(t,n)).return=e,t)}function d(e,t,n){if("string"==typeof t&&""!==t||"number"==typeof t)return(t=As(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case w:return(n=Ms(t.type,t.key,t.props,null,e.mode,n)).ref=vi(e,null,t),n.return=e,n;case S:return(t=Ls(t,e.mode,n)).return=e,t;case N:return d(e,(0,t._init)(t._payload),n)}if(te(t)||R(t))return(t=Rs(t,e.mode,n,null)).return=e,t;gi(e,t)}return null}function p(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n&&""!==n||"number"==typeof n)return null!==o?null:l(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case w:return n.key===o?s(e,t,n,r):null;case S:return n.key===o?c(e,t,n,r):null;case N:return p(e,t,(o=n._init)(n._payload),r)}if(te(n)||R(n))return null!==o?null:f(e,t,n,r,null);gi(e,n)}return null}function h(e,t,n,r,o){if("string"==typeof r&&""!==r||"number"==typeof r)return l(t,e=e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case w:return s(t,e=e.get(null===r.key?n:r.key)||null,r,o);case S:return c(t,e=e.get(null===r.key?n:r.key)||null,r,o);case N:return h(e,t,n,(0,r._init)(r._payload),o)}if(te(r)||R(r))return f(t,e=e.get(n)||null,r,o,null);gi(t,r)}return null}function y(o,i,u,l){for(var s=null,c=null,f=i,y=i=0,m=null;null!==f&&y<u.length;y++){f.index>y?(m=f,f=null):m=f.sibling;var v=p(o,f,u[y],l);if(null===v){null===f&&(f=m);break}e&&f&&null===v.alternate&&t(o,f),i=a(v,i,y),null===c?s=v:c.sibling=v,c=v,f=m}if(y===u.length)return n(o,f),ii&&Zo(o,y),s;if(null===f){for(;y<u.length;y++)null!==(f=d(o,u[y],l))&&(i=a(f,i,y),null===c?s=f:c.sibling=f,c=f);return ii&&Zo(o,y),s}for(f=r(o,f);y<u.length;y++)null!==(m=h(f,o,y,u[y],l))&&(e&&null!==m.alternate&&f.delete(null===m.key?y:m.key),i=a(m,i,y),null===c?s=m:c.sibling=m,c=m);return e&&f.forEach(function(e){return t(o,e)}),ii&&Zo(o,y),s}function m(o,u,l,s){var c=R(l);if("function"!=typeof c)throw Error(i(150));if(null==(l=c.call(l)))throw Error(i(151));for(var f=c=null,y=u,m=u=0,v=null,g=l.next();null!==y&&!g.done;m++,g=l.next()){y.index>m?(v=y,y=null):v=y.sibling;var b=p(o,y,g.value,s);if(null===b){null===y&&(y=v);break}e&&y&&null===b.alternate&&t(o,y),u=a(b,u,m),null===f?c=b:f.sibling=b,f=b,y=v}if(g.done)return n(o,y),ii&&Zo(o,m),c;if(null===y){for(;!g.done;m++,g=l.next())null!==(g=d(o,g.value,s))&&(u=a(g,u,m),null===f?c=g:f.sibling=g,f=g);return ii&&Zo(o,m),c}for(y=r(o,y);!g.done;m++,g=l.next())null!==(g=h(y,o,m,g.value,s))&&(e&&null!==g.alternate&&y.delete(null===g.key?m:g.key),u=a(g,u,m),null===f?c=g:f.sibling=g,f=g);return e&&y.forEach(function(e){return t(o,e)}),ii&&Zo(o,m),c}return function e(r,i,a,l){if("object"==typeof a&&null!==a&&a.type===k&&null===a.key&&(a=a.props.children),"object"==typeof a&&null!==a){switch(a.$$typeof){case w:e:{for(var s=a.key,c=i;null!==c;){if(c.key===s){if((s=a.type)===k){if(7===c.tag){n(r,c.sibling),(i=o(c,a.props.children)).return=r,r=i;break e}}else if(c.elementType===s||"object"==typeof s&&null!==s&&s.$$typeof===N&&bi(s)===c.type){n(r,c.sibling),(i=o(c,a.props)).ref=vi(r,c,a),i.return=r,r=i;break e}n(r,c);break}t(r,c),c=c.sibling}a.type===k?((i=Rs(a.props.children,r.mode,l,a.key)).return=r,r=i):((l=Ms(a.type,a.key,a.props,null,r.mode,l)).ref=vi(r,i,a),l.return=r,r=l)}return u(r);case S:e:{for(c=a.key;null!==i;){if(i.key===c){if(4===i.tag&&i.stateNode.containerInfo===a.containerInfo&&i.stateNode.implementation===a.implementation){n(r,i.sibling),(i=o(i,a.children||[])).return=r,r=i;break e}n(r,i);break}t(r,i),i=i.sibling}(i=Ls(a,r.mode,l)).return=r,r=i}return u(r);case N:return e(r,i,(c=a._init)(a._payload),l)}if(te(a))return y(r,i,a,l);if(R(a))return m(r,i,a,l);gi(r,a)}return"string"==typeof a&&""!==a||"number"==typeof a?(a=""+a,null!==i&&6===i.tag?(n(r,i.sibling),(i=o(i,a)).return=r,r=i):(n(r,i),(i=As(a,r.mode,l)).return=r,r=i),u(r)):n(r,i)}}var wi=_i(!0),Si=_i(!1),ki=Eo(null),xi=null,Ei=null,Oi=null;function Ci(){Oi=Ei=xi=null}function Pi(e){var t=ki.current;Oo(ki),e._currentValue=t}function zi(e,t,n){for(;null!==e;){var r=e.alternate;if((e.childLanes&t)!==t?(e.childLanes|=t,null!==r&&(r.childLanes|=t)):null!==r&&(r.childLanes&t)!==t&&(r.childLanes|=t),e===n)break;e=e.return}}function ji(e,t){xi=e,Oi=Ei=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!==(e.lanes&t)&&(bu=!0),e.firstContext=null)}function Ii(e){var t=e._currentValue;if(Oi!==e)if(e={context:e,memoizedValue:t,next:null},null===Ei){if(null===xi)throw Error(i(308));Ei=e,xi.dependencies={lanes:0,firstContext:e}}else Ei=Ei.next=e;return t}var Ni=null;function Ti(e){null===Ni?Ni=[e]:Ni.push(e)}function Mi(e,t,n,r){var o=t.interleaved;return null===o?(n.next=n,Ti(t)):(n.next=o.next,o.next=n),t.interleaved=n,Ri(e,r)}function Ri(e,t){e.lanes|=t;var n=e.alternate;for(null!==n&&(n.lanes|=t),n=e,e=e.return;null!==e;)e.childLanes|=t,null!==(n=e.alternate)&&(n.childLanes|=t),n=e,e=e.return;return 3===n.tag?n.stateNode:null}var Di=!1;function Ai(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null}}function Li(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function Fi(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function Bi(e,t,n){var r=e.updateQueue;if(null===r)return null;if(r=r.shared,2&Pl){var o=r.pending;return null===o?t.next=t:(t.next=o.next,o.next=t),r.pending=t,Ri(e,n)}return null===(o=r.interleaved)?(t.next=t,Ti(r)):(t.next=o.next,o.next=t),r.interleaved=t,Ri(e,n)}function Ui(e,t,n){if(null!==(t=t.updateQueue)&&(t=t.shared,4194240&n)){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,gt(e,n)}}function Wi(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var o=null,i=null;if(null!==(n=n.firstBaseUpdate)){do{var a={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===i?o=i=a:i=i.next=a,n=n.next}while(null!==n);null===i?o=i=t:i=i.next=t}else o=i=t;return n={baseState:r.baseState,firstBaseUpdate:o,lastBaseUpdate:i,shared:r.shared,effects:r.effects},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function qi(e,t,n,r){var o=e.updateQueue;Di=!1;var i=o.firstBaseUpdate,a=o.lastBaseUpdate,u=o.shared.pending;if(null!==u){o.shared.pending=null;var l=u,s=l.next;l.next=null,null===a?i=s:a.next=s,a=l;var c=e.alternate;null!==c&&(u=(c=c.updateQueue).lastBaseUpdate)!==a&&(null===u?c.firstBaseUpdate=s:u.next=s,c.lastBaseUpdate=l)}if(null!==i){var f=o.baseState;for(a=0,c=s=l=null,u=i;;){var d=u.lane,p=u.eventTime;if((r&d)===d){null!==c&&(c=c.next={eventTime:p,lane:0,tag:u.tag,payload:u.payload,callback:u.callback,next:null});e:{var h=e,y=u;switch(d=t,p=n,y.tag){case 1:if("function"==typeof(h=y.payload)){f=h.call(p,f,d);break e}f=h;break e;case 3:h.flags=-65537&h.flags|128;case 0:if(null==(d="function"==typeof(h=y.payload)?h.call(p,f,d):h))break e;f=A({},f,d);break e;case 2:Di=!0}}null!==u.callback&&0!==u.lane&&(e.flags|=64,null===(d=o.effects)?o.effects=[u]:d.push(u))}else p={eventTime:p,lane:d,tag:u.tag,payload:u.payload,callback:u.callback,next:null},null===c?(s=c=p,l=f):c=c.next=p,a|=d;if(null===(u=u.next)){if(null===(u=o.shared.pending))break;u=(d=u).next,d.next=null,o.lastBaseUpdate=d,o.shared.pending=null}}if(null===c&&(l=f),o.baseState=l,o.firstBaseUpdate=s,o.lastBaseUpdate=c,null!==(t=o.shared.interleaved)){o=t;do{a|=o.lane,o=o.next}while(o!==t)}else null===i&&(o.shared.lanes=0);Dl|=a,e.lanes=a,e.memoizedState=f}}function $i(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],o=r.callback;if(null!==o){if(r.callback=null,r=n,"function"!=typeof o)throw Error(i(191,o));o.call(r)}}}var Vi={},Hi=Eo(Vi),Ki=Eo(Vi),Qi=Eo(Vi);function Gi(e){if(e===Vi)throw Error(i(174));return e}function Yi(e,t){switch(Co(Qi,t),Co(Ki,e),Co(Hi,Vi),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:le(null,"");break;default:t=le(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}Oo(Hi),Co(Hi,t)}function Xi(){Oo(Hi),Oo(Ki),Oo(Qi)}function Ji(e){Gi(Qi.current);var t=Gi(Hi.current),n=le(t,e.type);t!==n&&(Co(Ki,e),Co(Hi,n))}function Zi(e){Ki.current===e&&(Oo(Hi),Oo(Ki))}var ea=Eo(0);function ta(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(128&t.flags)return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var na=[];function ra(){for(var e=0;e<na.length;e++)na[e]._workInProgressVersionPrimary=null;na.length=0}var oa=_.ReactCurrentDispatcher,ia=_.ReactCurrentBatchConfig,aa=0,ua=null,la=null,sa=null,ca=!1,fa=!1,da=0,pa=0;function ha(){throw Error(i(321))}function ya(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!ur(e[n],t[n]))return!1;return!0}function ma(e,t,n,r,o,a){if(aa=a,ua=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,oa.current=null===e||null===e.memoizedState?Za:eu,e=n(r,o),fa){a=0;do{if(fa=!1,da=0,25<=a)throw Error(i(301));a+=1,sa=la=null,t.updateQueue=null,oa.current=tu,e=n(r,o)}while(fa)}if(oa.current=Ja,t=null!==la&&null!==la.next,aa=0,sa=la=ua=null,ca=!1,t)throw Error(i(300));return e}function va(){var e=0!==da;return da=0,e}function ga(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===sa?ua.memoizedState=sa=e:sa=sa.next=e,sa}function ba(){if(null===la){var e=ua.alternate;e=null!==e?e.memoizedState:null}else e=la.next;var t=null===sa?ua.memoizedState:sa.next;if(null!==t)sa=t,la=e;else{if(null===e)throw Error(i(310));e={memoizedState:(la=e).memoizedState,baseState:la.baseState,baseQueue:la.baseQueue,queue:la.queue,next:null},null===sa?ua.memoizedState=sa=e:sa=sa.next=e}return sa}function _a(e,t){return"function"==typeof t?t(e):t}function wa(e){var t=ba(),n=t.queue;if(null===n)throw Error(i(311));n.lastRenderedReducer=e;var r=la,o=r.baseQueue,a=n.pending;if(null!==a){if(null!==o){var u=o.next;o.next=a.next,a.next=u}r.baseQueue=o=a,n.pending=null}if(null!==o){a=o.next,r=r.baseState;var l=u=null,s=null,c=a;do{var f=c.lane;if((aa&f)===f)null!==s&&(s=s.next={lane:0,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null}),r=c.hasEagerState?c.eagerState:e(r,c.action);else{var d={lane:f,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null};null===s?(l=s=d,u=r):s=s.next=d,ua.lanes|=f,Dl|=f}c=c.next}while(null!==c&&c!==a);null===s?u=r:s.next=l,ur(r,t.memoizedState)||(bu=!0),t.memoizedState=r,t.baseState=u,t.baseQueue=s,n.lastRenderedState=r}if(null!==(e=n.interleaved)){o=e;do{a=o.lane,ua.lanes|=a,Dl|=a,o=o.next}while(o!==e)}else null===o&&(n.lanes=0);return[t.memoizedState,n.dispatch]}function Sa(e){var t=ba(),n=t.queue;if(null===n)throw Error(i(311));n.lastRenderedReducer=e;var r=n.dispatch,o=n.pending,a=t.memoizedState;if(null!==o){n.pending=null;var u=o=o.next;do{a=e(a,u.action),u=u.next}while(u!==o);ur(a,t.memoizedState)||(bu=!0),t.memoizedState=a,null===t.baseQueue&&(t.baseState=a),n.lastRenderedState=a}return[a,r]}function ka(){}function xa(e,t){var n=ua,r=ba(),o=t(),a=!ur(r.memoizedState,o);if(a&&(r.memoizedState=o,bu=!0),r=r.queue,Da(Ca.bind(null,n,r,e),[e]),r.getSnapshot!==t||a||null!==sa&&1&sa.memoizedState.tag){if(n.flags|=2048,Ia(9,Oa.bind(null,n,r,o,t),void 0,null),null===zl)throw Error(i(349));30&aa||Ea(n,t,o)}return o}function Ea(e,t,n){e.flags|=16384,e={getSnapshot:t,value:n},null===(t=ua.updateQueue)?(t={lastEffect:null,stores:null},ua.updateQueue=t,t.stores=[e]):null===(n=t.stores)?t.stores=[e]:n.push(e)}function Oa(e,t,n,r){t.value=n,t.getSnapshot=r,Pa(t)&&za(e)}function Ca(e,t,n){return n(function(){Pa(t)&&za(e)})}function Pa(e){var t=e.getSnapshot;e=e.value;try{var n=t();return!ur(e,n)}catch(e){return!0}}function za(e){var t=Ri(e,1);null!==t&&ns(t,e,1,-1)}function ja(e){var t=ga();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:_a,lastRenderedState:e},t.queue=e,e=e.dispatch=Qa.bind(null,ua,e),[t.memoizedState,e]}function Ia(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=ua.updateQueue)?(t={lastEffect:null,stores:null},ua.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function Na(){return ba().memoizedState}function Ta(e,t,n,r){var o=ga();ua.flags|=e,o.memoizedState=Ia(1|t,n,void 0,void 0===r?null:r)}function Ma(e,t,n,r){var o=ba();r=void 0===r?null:r;var i=void 0;if(null!==la){var a=la.memoizedState;if(i=a.destroy,null!==r&&ya(r,a.deps))return void(o.memoizedState=Ia(t,n,i,r))}ua.flags|=e,o.memoizedState=Ia(1|t,n,i,r)}function Ra(e,t){return Ta(8390656,8,e,t)}function Da(e,t){return Ma(2048,8,e,t)}function Aa(e,t){return Ma(4,2,e,t)}function La(e,t){return Ma(4,4,e,t)}function Fa(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function Ba(e,t,n){return n=null!=n?n.concat([e]):null,Ma(4,4,Fa.bind(null,t,e),n)}function Ua(){}function Wa(e,t){var n=ba();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&ya(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function qa(e,t){var n=ba();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&ya(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function $a(e,t,n){return 21&aa?(ur(n,t)||(n=yt(),ua.lanes|=n,Dl|=n,e.baseState=!0),t):(e.baseState&&(e.baseState=!1,bu=!0),e.memoizedState=n)}function Va(e,t){var n=bt;bt=0!==n&&4>n?n:4,e(!0);var r=ia.transition;ia.transition={};try{e(!1),t()}finally{bt=n,ia.transition=r}}function Ha(){return ba().memoizedState}function Ka(e,t,n){var r=ts(e);n={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null},Ga(e)?Ya(t,n):null!==(n=Mi(e,t,n,r))&&(ns(n,e,r,es()),Xa(n,t,r))}function Qa(e,t,n){var r=ts(e),o={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null};if(Ga(e))Ya(t,o);else{var i=e.alternate;if(0===e.lanes&&(null===i||0===i.lanes)&&null!==(i=t.lastRenderedReducer))try{var a=t.lastRenderedState,u=i(a,n);if(o.hasEagerState=!0,o.eagerState=u,ur(u,a)){var l=t.interleaved;return null===l?(o.next=o,Ti(t)):(o.next=l.next,l.next=o),void(t.interleaved=o)}}catch(e){}null!==(n=Mi(e,t,o,r))&&(ns(n,e,r,o=es()),Xa(n,t,r))}}function Ga(e){var t=e.alternate;return e===ua||null!==t&&t===ua}function Ya(e,t){fa=ca=!0;var n=e.pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}function Xa(e,t,n){if(4194240&n){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,gt(e,n)}}var Ja={readContext:Ii,useCallback:ha,useContext:ha,useEffect:ha,useImperativeHandle:ha,useInsertionEffect:ha,useLayoutEffect:ha,useMemo:ha,useReducer:ha,useRef:ha,useState:ha,useDebugValue:ha,useDeferredValue:ha,useTransition:ha,useMutableSource:ha,useSyncExternalStore:ha,useId:ha,unstable_isNewReconciler:!1},Za={readContext:Ii,useCallback:function(e,t){return ga().memoizedState=[e,void 0===t?null:t],e},useContext:Ii,useEffect:Ra,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,Ta(4194308,4,Fa.bind(null,t,e),n)},useLayoutEffect:function(e,t){return Ta(4194308,4,e,t)},useInsertionEffect:function(e,t){return Ta(4,2,e,t)},useMemo:function(e,t){var n=ga();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=ga();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:t},r.queue=e,e=e.dispatch=Ka.bind(null,ua,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},ga().memoizedState=e},useState:ja,useDebugValue:Ua,useDeferredValue:function(e){return ga().memoizedState=e},useTransition:function(){var e=ja(!1),t=e[0];return e=Va.bind(null,e[1]),ga().memoizedState=e,[t,e]},useMutableSource:function(){},useSyncExternalStore:function(e,t,n){var r=ua,o=ga();if(ii){if(void 0===n)throw Error(i(407));n=n()}else{if(n=t(),null===zl)throw Error(i(349));30&aa||Ea(r,t,n)}o.memoizedState=n;var a={value:n,getSnapshot:t};return o.queue=a,Ra(Ca.bind(null,r,a,e),[e]),r.flags|=2048,Ia(9,Oa.bind(null,r,a,n,t),void 0,null),n},useId:function(){var e=ga(),t=zl.identifierPrefix;if(ii){var n=Jo;t=":"+t+"R"+(n=(Xo&~(1<<32-at(Xo)-1)).toString(32)+n),0<(n=da++)&&(t+="H"+n.toString(32)),t+=":"}else t=":"+t+"r"+(n=pa++).toString(32)+":";return e.memoizedState=t},unstable_isNewReconciler:!1},eu={readContext:Ii,useCallback:Wa,useContext:Ii,useEffect:Da,useImperativeHandle:Ba,useInsertionEffect:Aa,useLayoutEffect:La,useMemo:qa,useReducer:wa,useRef:Na,useState:function(){return wa(_a)},useDebugValue:Ua,useDeferredValue:function(e){return $a(ba(),la.memoizedState,e)},useTransition:function(){return[wa(_a)[0],ba().memoizedState]},useMutableSource:ka,useSyncExternalStore:xa,useId:Ha,unstable_isNewReconciler:!1},tu={readContext:Ii,useCallback:Wa,useContext:Ii,useEffect:Da,useImperativeHandle:Ba,useInsertionEffect:Aa,useLayoutEffect:La,useMemo:qa,useReducer:Sa,useRef:Na,useState:function(){return Sa(_a)},useDebugValue:Ua,useDeferredValue:function(e){var t=ba();return null===la?t.memoizedState=e:$a(t,la.memoizedState,e)},useTransition:function(){return[Sa(_a)[0],ba().memoizedState]},useMutableSource:ka,useSyncExternalStore:xa,useId:Ha,unstable_isNewReconciler:!1};function nu(e,t){if(e&&e.defaultProps){for(var n in t=A({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}function ru(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:A({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var ou={isMounted:function(e){return!!(e=e._reactInternals)&&We(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=es(),o=ts(e),i=Fi(r,o);i.payload=t,null!=n&&(i.callback=n),null!==(t=Bi(e,i,o))&&(ns(t,e,o,r),Ui(t,e,o))},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=es(),o=ts(e),i=Fi(r,o);i.tag=1,i.payload=t,null!=n&&(i.callback=n),null!==(t=Bi(e,i,o))&&(ns(t,e,o,r),Ui(t,e,o))},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=es(),r=ts(e),o=Fi(n,r);o.tag=2,null!=t&&(o.callback=t),null!==(t=Bi(e,o,r))&&(ns(t,e,r,n),Ui(t,e,r))}};function iu(e,t,n,r,o,i,a){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,i,a):!(t.prototype&&t.prototype.isPureReactComponent&&lr(n,r)&&lr(o,i))}function au(e,t,n){var r=!1,o=Po,i=t.contextType;return"object"==typeof i&&null!==i?i=Ii(i):(o=To(t)?Io:zo.current,i=(r=null!=(r=t.contextTypes))?No(e,o):Po),t=new t(n,i),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=ou,e.stateNode=t,t._reactInternals=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=o,e.__reactInternalMemoizedMaskedChildContext=i),t}function uu(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&ou.enqueueReplaceState(t,t.state,null)}function lu(e,t,n,r){var o=e.stateNode;o.props=n,o.state=e.memoizedState,o.refs={},Ai(e);var i=t.contextType;"object"==typeof i&&null!==i?o.context=Ii(i):(i=To(t)?Io:zo.current,o.context=No(e,i)),o.state=e.memoizedState,"function"==typeof(i=t.getDerivedStateFromProps)&&(ru(e,t,i,n),o.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(t=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),t!==o.state&&ou.enqueueReplaceState(o,o.state,null),qi(e,n,o,r),o.state=e.memoizedState),"function"==typeof o.componentDidMount&&(e.flags|=4194308)}function su(e,t){try{var n="",r=t;do{n+=U(r),r=r.return}while(r);var o=n}catch(e){o="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:o,digest:null}}function cu(e,t,n){return{value:e,source:null,stack:null!=n?n:null,digest:null!=t?t:null}}function fu(e,t){try{console.error(t.value)}catch(e){setTimeout(function(){throw e})}}var du="function"==typeof WeakMap?WeakMap:Map;function pu(e,t,n){(n=Fi(-1,n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){$l||($l=!0,Vl=r),fu(0,t)},n}function hu(e,t,n){(n=Fi(-1,n)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var o=t.value;n.payload=function(){return r(o)},n.callback=function(){fu(0,t)}}var i=e.stateNode;return null!==i&&"function"==typeof i.componentDidCatch&&(n.callback=function(){fu(0,t),"function"!=typeof r&&(null===Hl?Hl=new Set([this]):Hl.add(this));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),n}function yu(e,t,n){var r=e.pingCache;if(null===r){r=e.pingCache=new du;var o=new Set;r.set(t,o)}else void 0===(o=r.get(t))&&(o=new Set,r.set(t,o));o.has(n)||(o.add(n),e=Es.bind(null,e,t,n),t.then(e,e))}function mu(e){do{var t;if((t=13===e.tag)&&(t=null===(t=e.memoizedState)||null!==t.dehydrated),t)return e;e=e.return}while(null!==e);return null}function vu(e,t,n,r,o){return 1&e.mode?(e.flags|=65536,e.lanes=o,e):(e===t?e.flags|=65536:(e.flags|=128,n.flags|=131072,n.flags&=-52805,1===n.tag&&(null===n.alternate?n.tag=17:((t=Fi(-1,1)).tag=2,Bi(n,t,1))),n.lanes|=1),e)}var gu=_.ReactCurrentOwner,bu=!1;function _u(e,t,n,r){t.child=null===e?Si(t,null,n,r):wi(t,e.child,n,r)}function wu(e,t,n,r,o){n=n.render;var i=t.ref;return ji(t,o),r=ma(e,t,n,r,i,o),n=va(),null===e||bu?(ii&&n&&ti(t),t.flags|=1,_u(e,t,r,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~o,$u(e,t,o))}function Su(e,t,n,r,o){if(null===e){var i=n.type;return"function"!=typeof i||Ns(i)||void 0!==i.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Ms(n.type,null,r,t,t.mode,o)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=i,ku(e,t,i,r,o))}if(i=e.child,0===(e.lanes&o)){var a=i.memoizedProps;if((n=null!==(n=n.compare)?n:lr)(a,r)&&e.ref===t.ref)return $u(e,t,o)}return t.flags|=1,(e=Ts(i,r)).ref=t.ref,e.return=t,t.child=e}function ku(e,t,n,r,o){if(null!==e){var i=e.memoizedProps;if(lr(i,r)&&e.ref===t.ref){if(bu=!1,t.pendingProps=r=i,0===(e.lanes&o))return t.lanes=e.lanes,$u(e,t,o);131072&e.flags&&(bu=!0)}}return Ou(e,t,n,r,o)}function xu(e,t,n){var r=t.pendingProps,o=r.children,i=null!==e?e.memoizedState:null;if("hidden"===r.mode)if(1&t.mode){if(!(1073741824&n))return e=null!==i?i.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e,cachePool:null,transitions:null},t.updateQueue=null,Co(Tl,Nl),Nl|=e,null;t.memoizedState={baseLanes:0,cachePool:null,transitions:null},r=null!==i?i.baseLanes:n,Co(Tl,Nl),Nl|=r}else t.memoizedState={baseLanes:0,cachePool:null,transitions:null},Co(Tl,Nl),Nl|=n;else null!==i?(r=i.baseLanes|n,t.memoizedState=null):r=n,Co(Tl,Nl),Nl|=r;return _u(e,t,o,n),t.child}function Eu(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=512,t.flags|=2097152)}function Ou(e,t,n,r,o){var i=To(n)?Io:zo.current;return i=No(t,i),ji(t,o),n=ma(e,t,n,r,i,o),r=va(),null===e||bu?(ii&&r&&ti(t),t.flags|=1,_u(e,t,n,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~o,$u(e,t,o))}function Cu(e,t,n,r,o){if(To(n)){var i=!0;Ao(t)}else i=!1;if(ji(t,o),null===t.stateNode)qu(e,t),au(t,n,r),lu(t,n,r,o),r=!0;else if(null===e){var a=t.stateNode,u=t.memoizedProps;a.props=u;var l=a.context,s=n.contextType;s="object"==typeof s&&null!==s?Ii(s):No(t,s=To(n)?Io:zo.current);var c=n.getDerivedStateFromProps,f="function"==typeof c||"function"==typeof a.getSnapshotBeforeUpdate;f||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(u!==r||l!==s)&&uu(t,a,r,s),Di=!1;var d=t.memoizedState;a.state=d,qi(t,r,a,o),l=t.memoizedState,u!==r||d!==l||jo.current||Di?("function"==typeof c&&(ru(t,n,c,r),l=t.memoizedState),(u=Di||iu(t,n,u,r,d,l,s))?(f||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||("function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount()),"function"==typeof a.componentDidMount&&(t.flags|=4194308)):("function"==typeof a.componentDidMount&&(t.flags|=4194308),t.memoizedProps=r,t.memoizedState=l),a.props=r,a.state=l,a.context=s,r=u):("function"==typeof a.componentDidMount&&(t.flags|=4194308),r=!1)}else{a=t.stateNode,Li(e,t),u=t.memoizedProps,s=t.type===t.elementType?u:nu(t.type,u),a.props=s,f=t.pendingProps,d=a.context,l="object"==typeof(l=n.contextType)&&null!==l?Ii(l):No(t,l=To(n)?Io:zo.current);var p=n.getDerivedStateFromProps;(c="function"==typeof p||"function"==typeof a.getSnapshotBeforeUpdate)||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(u!==f||d!==l)&&uu(t,a,r,l),Di=!1,d=t.memoizedState,a.state=d,qi(t,r,a,o);var h=t.memoizedState;u!==f||d!==h||jo.current||Di?("function"==typeof p&&(ru(t,n,p,r),h=t.memoizedState),(s=Di||iu(t,n,s,r,d,h,l)||!1)?(c||"function"!=typeof a.UNSAFE_componentWillUpdate&&"function"!=typeof a.componentWillUpdate||("function"==typeof a.componentWillUpdate&&a.componentWillUpdate(r,h,l),"function"==typeof a.UNSAFE_componentWillUpdate&&a.UNSAFE_componentWillUpdate(r,h,l)),"function"==typeof a.componentDidUpdate&&(t.flags|=4),"function"==typeof a.getSnapshotBeforeUpdate&&(t.flags|=1024)):("function"!=typeof a.componentDidUpdate||u===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||u===e.memoizedProps&&d===e.memoizedState||(t.flags|=1024),t.memoizedProps=r,t.memoizedState=h),a.props=r,a.state=h,a.context=l,r=s):("function"!=typeof a.componentDidUpdate||u===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||u===e.memoizedProps&&d===e.memoizedState||(t.flags|=1024),r=!1)}return Pu(e,t,n,r,i,o)}function Pu(e,t,n,r,o,i){Eu(e,t);var a=!!(128&t.flags);if(!r&&!a)return o&&Lo(t,n,!1),$u(e,t,i);r=t.stateNode,gu.current=t;var u=a&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.flags|=1,null!==e&&a?(t.child=wi(t,e.child,null,i),t.child=wi(t,null,u,i)):_u(e,t,u,i),t.memoizedState=r.state,o&&Lo(t,n,!0),t.child}function zu(e){var t=e.stateNode;t.pendingContext?Ro(0,t.pendingContext,t.pendingContext!==t.context):t.context&&Ro(0,t.context,!1),Yi(e,t.containerInfo)}function ju(e,t,n,r,o){return hi(),yi(o),t.flags|=256,_u(e,t,n,r),t.child}var Iu,Nu,Tu,Mu,Ru={dehydrated:null,treeContext:null,retryLane:0};function Du(e){return{baseLanes:e,cachePool:null,transitions:null}}function Au(e,t,n){var r,o=t.pendingProps,a=ea.current,u=!1,l=!!(128&t.flags);if((r=l)||(r=(null===e||null!==e.memoizedState)&&!!(2&a)),r?(u=!0,t.flags&=-129):null!==e&&null===e.memoizedState||(a|=1),Co(ea,1&a),null===e)return ci(t),null!==(e=t.memoizedState)&&null!==(e=e.dehydrated)?(1&t.mode?"$!"===e.data?t.lanes=8:t.lanes=1073741824:t.lanes=1,null):(l=o.children,e=o.fallback,u?(o=t.mode,u=t.child,l={mode:"hidden",children:l},1&o||null===u?u=Ds(l,o,0,null):(u.childLanes=0,u.pendingProps=l),e=Rs(e,o,n,null),u.return=t,e.return=t,u.sibling=e,t.child=u,t.child.memoizedState=Du(n),t.memoizedState=Ru,e):Lu(t,l));if(null!==(a=e.memoizedState)&&null!==(r=a.dehydrated))return function(e,t,n,r,o,a,u){if(n)return 256&t.flags?(t.flags&=-257,Fu(e,t,u,r=cu(Error(i(422))))):null!==t.memoizedState?(t.child=e.child,t.flags|=128,null):(a=r.fallback,o=t.mode,r=Ds({mode:"visible",children:r.children},o,0,null),(a=Rs(a,o,u,null)).flags|=2,r.return=t,a.return=t,r.sibling=a,t.child=r,1&t.mode&&wi(t,e.child,null,u),t.child.memoizedState=Du(u),t.memoizedState=Ru,a);if(!(1&t.mode))return Fu(e,t,u,null);if("$!"===o.data){if(r=o.nextSibling&&o.nextSibling.dataset)var l=r.dgst;return r=l,Fu(e,t,u,r=cu(a=Error(i(419)),r,void 0))}if(l=0!==(u&e.childLanes),bu||l){if(null!==(r=zl)){switch(u&-u){case 4:o=2;break;case 16:o=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:o=32;break;case 536870912:o=268435456;break;default:o=0}0!==(o=0!==(o&(r.suspendedLanes|u))?0:o)&&o!==a.retryLane&&(a.retryLane=o,Ri(e,o),ns(r,e,o,-1))}return ys(),Fu(e,t,u,r=cu(Error(i(421))))}return"$?"===o.data?(t.flags|=128,t.child=e.child,t=Cs.bind(null,e),o._reactRetry=t,null):(e=a.treeContext,oi=so(o.nextSibling),ri=t,ii=!0,ai=null,null!==e&&(Qo[Go++]=Xo,Qo[Go++]=Jo,Qo[Go++]=Yo,Xo=e.id,Jo=e.overflow,Yo=t),(t=Lu(t,r.children)).flags|=4096,t)}(e,t,l,o,r,a,n);if(u){u=o.fallback,l=t.mode,r=(a=e.child).sibling;var s={mode:"hidden",children:o.children};return 1&l||t.child===a?(o=Ts(a,s)).subtreeFlags=14680064&a.subtreeFlags:((o=t.child).childLanes=0,o.pendingProps=s,t.deletions=null),null!==r?u=Ts(r,u):(u=Rs(u,l,n,null)).flags|=2,u.return=t,o.return=t,o.sibling=u,t.child=o,o=u,u=t.child,l=null===(l=e.child.memoizedState)?Du(n):{baseLanes:l.baseLanes|n,cachePool:null,transitions:l.transitions},u.memoizedState=l,u.childLanes=e.childLanes&~n,t.memoizedState=Ru,o}return e=(u=e.child).sibling,o=Ts(u,{mode:"visible",children:o.children}),!(1&t.mode)&&(o.lanes=n),o.return=t,o.sibling=null,null!==e&&(null===(n=t.deletions)?(t.deletions=[e],t.flags|=16):n.push(e)),t.child=o,t.memoizedState=null,o}function Lu(e,t){return(t=Ds({mode:"visible",children:t},e.mode,0,null)).return=e,e.child=t}function Fu(e,t,n,r){return null!==r&&yi(r),wi(t,e.child,null,n),(e=Lu(t,t.pendingProps.children)).flags|=2,t.memoizedState=null,e}function Bu(e,t,n){e.lanes|=t;var r=e.alternate;null!==r&&(r.lanes|=t),zi(e.return,t,n)}function Uu(e,t,n,r,o){var i=e.memoizedState;null===i?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:o}:(i.isBackwards=t,i.rendering=null,i.renderingStartTime=0,i.last=r,i.tail=n,i.tailMode=o)}function Wu(e,t,n){var r=t.pendingProps,o=r.revealOrder,i=r.tail;if(_u(e,t,r.children,n),2&(r=ea.current))r=1&r|2,t.flags|=128;else{if(null!==e&&128&e.flags)e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Bu(e,n,t);else if(19===e.tag)Bu(e,n,t);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(Co(ea,r),1&t.mode)switch(o){case"forwards":for(n=t.child,o=null;null!==n;)null!==(e=n.alternate)&&null===ta(e)&&(o=n),n=n.sibling;null===(n=o)?(o=t.child,t.child=null):(o=n.sibling,n.sibling=null),Uu(t,!1,o,n,i);break;case"backwards":for(n=null,o=t.child,t.child=null;null!==o;){if(null!==(e=o.alternate)&&null===ta(e)){t.child=o;break}e=o.sibling,o.sibling=n,n=o,o=e}Uu(t,!0,n,null,i);break;case"together":Uu(t,!1,null,null,void 0);break;default:t.memoizedState=null}else t.memoizedState=null;return t.child}function qu(e,t){!(1&t.mode)&&null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2)}function $u(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),Dl|=t.lanes,0===(n&t.childLanes))return null;if(null!==e&&t.child!==e.child)throw Error(i(153));if(null!==t.child){for(n=Ts(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Ts(e,e.pendingProps)).return=t;n.sibling=null}return t.child}function Vu(e,t){if(!ii)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function Hu(e){var t=null!==e.alternate&&e.alternate.child===e.child,n=0,r=0;if(t)for(var o=e.child;null!==o;)n|=o.lanes|o.childLanes,r|=14680064&o.subtreeFlags,r|=14680064&o.flags,o.return=e,o=o.sibling;else for(o=e.child;null!==o;)n|=o.lanes|o.childLanes,r|=o.subtreeFlags,r|=o.flags,o.return=e,o=o.sibling;return e.subtreeFlags|=r,e.childLanes=n,t}function Ku(e,t,n){var r=t.pendingProps;switch(ni(t),t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return Hu(t),null;case 1:case 17:return To(t.type)&&Mo(),Hu(t),null;case 3:return r=t.stateNode,Xi(),Oo(jo),Oo(zo),ra(),r.pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(di(t)?t.flags|=4:null===e||e.memoizedState.isDehydrated&&!(256&t.flags)||(t.flags|=1024,null!==ai&&(as(ai),ai=null))),Nu(e,t),Hu(t),null;case 5:Zi(t);var o=Gi(Qi.current);if(n=t.type,null!==e&&null!=t.stateNode)Tu(e,t,n,r,o),e.ref!==t.ref&&(t.flags|=512,t.flags|=2097152);else{if(!r){if(null===t.stateNode)throw Error(i(166));return Hu(t),null}if(e=Gi(Hi.current),di(t)){r=t.stateNode,n=t.type;var a=t.memoizedProps;switch(r[po]=t,r[ho]=a,e=!!(1&t.mode),n){case"dialog":Fr("cancel",r),Fr("close",r);break;case"iframe":case"object":case"embed":Fr("load",r);break;case"video":case"audio":for(o=0;o<Rr.length;o++)Fr(Rr[o],r);break;case"source":Fr("error",r);break;case"img":case"image":case"link":Fr("error",r),Fr("load",r);break;case"details":Fr("toggle",r);break;case"input":Y(r,a),Fr("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!a.multiple},Fr("invalid",r);break;case"textarea":oe(r,a),Fr("invalid",r)}for(var l in ge(n,a),o=null,a)if(a.hasOwnProperty(l)){var s=a[l];"children"===l?"string"==typeof s?r.textContent!==s&&(!0!==a.suppressHydrationWarning&&Jr(r.textContent,s,e),o=["children",s]):"number"==typeof s&&r.textContent!==""+s&&(!0!==a.suppressHydrationWarning&&Jr(r.textContent,s,e),o=["children",""+s]):u.hasOwnProperty(l)&&null!=s&&"onScroll"===l&&Fr("scroll",r)}switch(n){case"input":H(r),Z(r,a,!0);break;case"textarea":H(r),ae(r);break;case"select":case"option":break;default:"function"==typeof a.onClick&&(r.onclick=Zr)}r=o,t.updateQueue=r,null!==r&&(t.flags|=4)}else{l=9===o.nodeType?o:o.ownerDocument,"http://www.w3.org/1999/xhtml"===e&&(e=ue(n)),"http://www.w3.org/1999/xhtml"===e?"script"===n?((e=l.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=l.createElement(n,{is:r.is}):(e=l.createElement(n),"select"===n&&(l=e,r.multiple?l.multiple=!0:r.size&&(l.size=r.size))):e=l.createElementNS(e,n),e[po]=t,e[ho]=r,Iu(e,t,!1,!1),t.stateNode=e;e:{switch(l=be(n,r),n){case"dialog":Fr("cancel",e),Fr("close",e),o=r;break;case"iframe":case"object":case"embed":Fr("load",e),o=r;break;case"video":case"audio":for(o=0;o<Rr.length;o++)Fr(Rr[o],e);o=r;break;case"source":Fr("error",e),o=r;break;case"img":case"image":case"link":Fr("error",e),Fr("load",e),o=r;break;case"details":Fr("toggle",e),o=r;break;case"input":Y(e,r),o=G(e,r),Fr("invalid",e);break;case"option":default:o=r;break;case"select":e._wrapperState={wasMultiple:!!r.multiple},o=A({},r,{value:void 0}),Fr("invalid",e);break;case"textarea":oe(e,r),o=re(e,r),Fr("invalid",e)}for(a in ge(n,o),s=o)if(s.hasOwnProperty(a)){var c=s[a];"style"===a?me(e,c):"dangerouslySetInnerHTML"===a?null!=(c=c?c.__html:void 0)&&fe(e,c):"children"===a?"string"==typeof c?("textarea"!==n||""!==c)&&de(e,c):"number"==typeof c&&de(e,""+c):"suppressContentEditableWarning"!==a&&"suppressHydrationWarning"!==a&&"autoFocus"!==a&&(u.hasOwnProperty(a)?null!=c&&"onScroll"===a&&Fr("scroll",e):null!=c&&b(e,a,c,l))}switch(n){case"input":H(e),Z(e,r,!1);break;case"textarea":H(e),ae(e);break;case"option":null!=r.value&&e.setAttribute("value",""+$(r.value));break;case"select":e.multiple=!!r.multiple,null!=(a=r.value)?ne(e,!!r.multiple,a,!1):null!=r.defaultValue&&ne(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof o.onClick&&(e.onclick=Zr)}switch(n){case"button":case"input":case"select":case"textarea":r=!!r.autoFocus;break e;case"img":r=!0;break e;default:r=!1}}r&&(t.flags|=4)}null!==t.ref&&(t.flags|=512,t.flags|=2097152)}return Hu(t),null;case 6:if(e&&null!=t.stateNode)Mu(e,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(i(166));if(n=Gi(Qi.current),Gi(Hi.current),di(t)){if(r=t.stateNode,n=t.memoizedProps,r[po]=t,(a=r.nodeValue!==n)&&null!==(e=ri))switch(e.tag){case 3:Jr(r.nodeValue,n,!!(1&e.mode));break;case 5:!0!==e.memoizedProps.suppressHydrationWarning&&Jr(r.nodeValue,n,!!(1&e.mode))}a&&(t.flags|=4)}else(r=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[po]=t,t.stateNode=r}return Hu(t),null;case 13:if(Oo(ea),r=t.memoizedState,null===e||null!==e.memoizedState&&null!==e.memoizedState.dehydrated){if(ii&&null!==oi&&1&t.mode&&!(128&t.flags))pi(),hi(),t.flags|=98560,a=!1;else if(a=di(t),null!==r&&null!==r.dehydrated){if(null===e){if(!a)throw Error(i(318));if(!(a=null!==(a=t.memoizedState)?a.dehydrated:null))throw Error(i(317));a[po]=t}else hi(),!(128&t.flags)&&(t.memoizedState=null),t.flags|=4;Hu(t),a=!1}else null!==ai&&(as(ai),ai=null),a=!0;if(!a)return 65536&t.flags?t:null}return 128&t.flags?(t.lanes=n,t):((r=null!==r)!=(null!==e&&null!==e.memoizedState)&&r&&(t.child.flags|=8192,1&t.mode&&(null===e||1&ea.current?0===Ml&&(Ml=3):ys())),null!==t.updateQueue&&(t.flags|=4),Hu(t),null);case 4:return Xi(),Nu(e,t),null===e&&Wr(t.stateNode.containerInfo),Hu(t),null;case 10:return Pi(t.type._context),Hu(t),null;case 19:if(Oo(ea),null===(a=t.memoizedState))return Hu(t),null;if(r=!!(128&t.flags),null===(l=a.rendering))if(r)Vu(a,!1);else{if(0!==Ml||null!==e&&128&e.flags)for(e=t.child;null!==e;){if(null!==(l=ta(e))){for(t.flags|=128,Vu(a,!1),null!==(r=l.updateQueue)&&(t.updateQueue=r,t.flags|=4),t.subtreeFlags=0,r=n,n=t.child;null!==n;)e=r,(a=n).flags&=14680066,null===(l=a.alternate)?(a.childLanes=0,a.lanes=e,a.child=null,a.subtreeFlags=0,a.memoizedProps=null,a.memoizedState=null,a.updateQueue=null,a.dependencies=null,a.stateNode=null):(a.childLanes=l.childLanes,a.lanes=l.lanes,a.child=l.child,a.subtreeFlags=0,a.deletions=null,a.memoizedProps=l.memoizedProps,a.memoizedState=l.memoizedState,a.updateQueue=l.updateQueue,a.type=l.type,e=l.dependencies,a.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return Co(ea,1&ea.current|2),t.child}e=e.sibling}null!==a.tail&&Xe()>Wl&&(t.flags|=128,r=!0,Vu(a,!1),t.lanes=4194304)}else{if(!r)if(null!==(e=ta(l))){if(t.flags|=128,r=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.flags|=4),Vu(a,!0),null===a.tail&&"hidden"===a.tailMode&&!l.alternate&&!ii)return Hu(t),null}else 2*Xe()-a.renderingStartTime>Wl&&1073741824!==n&&(t.flags|=128,r=!0,Vu(a,!1),t.lanes=4194304);a.isBackwards?(l.sibling=t.child,t.child=l):(null!==(n=a.last)?n.sibling=l:t.child=l,a.last=l)}return null!==a.tail?(t=a.tail,a.rendering=t,a.tail=t.sibling,a.renderingStartTime=Xe(),t.sibling=null,n=ea.current,Co(ea,r?1&n|2:1&n),t):(Hu(t),null);case 22:case 23:return fs(),r=null!==t.memoizedState,null!==e&&null!==e.memoizedState!==r&&(t.flags|=8192),r&&1&t.mode?!!(1073741824&Nl)&&(Hu(t),6&t.subtreeFlags&&(t.flags|=8192)):Hu(t),null;case 24:case 25:return null}throw Error(i(156,t.tag))}function Qu(e,t){switch(ni(t),t.tag){case 1:return To(t.type)&&Mo(),65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 3:return Xi(),Oo(jo),Oo(zo),ra(),65536&(e=t.flags)&&!(128&e)?(t.flags=-65537&e|128,t):null;case 5:return Zi(t),null;case 13:if(Oo(ea),null!==(e=t.memoizedState)&&null!==e.dehydrated){if(null===t.alternate)throw Error(i(340));hi()}return 65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 19:return Oo(ea),null;case 4:return Xi(),null;case 10:return Pi(t.type._context),null;case 22:case 23:return fs(),null;default:return null}}Iu=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Nu=function(){},Tu=function(e,t,n,r){var o=e.memoizedProps;if(o!==r){e=t.stateNode,Gi(Hi.current);var i,a=null;switch(n){case"input":o=G(e,o),r=G(e,r),a=[];break;case"select":o=A({},o,{value:void 0}),r=A({},r,{value:void 0}),a=[];break;case"textarea":o=re(e,o),r=re(e,r),a=[];break;default:"function"!=typeof o.onClick&&"function"==typeof r.onClick&&(e.onclick=Zr)}for(c in ge(n,r),n=null,o)if(!r.hasOwnProperty(c)&&o.hasOwnProperty(c)&&null!=o[c])if("style"===c){var l=o[c];for(i in l)l.hasOwnProperty(i)&&(n||(n={}),n[i]="")}else"dangerouslySetInnerHTML"!==c&&"children"!==c&&"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&"autoFocus"!==c&&(u.hasOwnProperty(c)?a||(a=[]):(a=a||[]).push(c,null));for(c in r){var s=r[c];if(l=null!=o?o[c]:void 0,r.hasOwnProperty(c)&&s!==l&&(null!=s||null!=l))if("style"===c)if(l){for(i in l)!l.hasOwnProperty(i)||s&&s.hasOwnProperty(i)||(n||(n={}),n[i]="");for(i in s)s.hasOwnProperty(i)&&l[i]!==s[i]&&(n||(n={}),n[i]=s[i])}else n||(a||(a=[]),a.push(c,n)),n=s;else"dangerouslySetInnerHTML"===c?(s=s?s.__html:void 0,l=l?l.__html:void 0,null!=s&&l!==s&&(a=a||[]).push(c,s)):"children"===c?"string"!=typeof s&&"number"!=typeof s||(a=a||[]).push(c,""+s):"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&(u.hasOwnProperty(c)?(null!=s&&"onScroll"===c&&Fr("scroll",e),a||l===s||(a=[])):(a=a||[]).push(c,s))}n&&(a=a||[]).push("style",n);var c=a;(t.updateQueue=c)&&(t.flags|=4)}},Mu=function(e,t,n,r){n!==r&&(t.flags|=4)};var Gu=!1,Yu=!1,Xu="function"==typeof WeakSet?WeakSet:Set,Ju=null;function Zu(e,t){var n=e.ref;if(null!==n)if("function"==typeof n)try{n(null)}catch(n){xs(e,t,n)}else n.current=null}function el(e,t,n){try{n()}catch(n){xs(e,t,n)}}var tl=!1;function nl(e,t,n){var r=t.updateQueue;if(null!==(r=null!==r?r.lastEffect:null)){var o=r=r.next;do{if((o.tag&e)===e){var i=o.destroy;o.destroy=void 0,void 0!==i&&el(t,n,i)}o=o.next}while(o!==r)}}function rl(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var r=n.create;n.destroy=r()}n=n.next}while(n!==t)}}function ol(e){var t=e.ref;if(null!==t){var n=e.stateNode;e.tag,e=n,"function"==typeof t?t(e):t.current=e}}function il(e){var t=e.alternate;null!==t&&(e.alternate=null,il(t)),e.child=null,e.deletions=null,e.sibling=null,5===e.tag&&null!==(t=e.stateNode)&&(delete t[po],delete t[ho],delete t[mo],delete t[vo],delete t[go]),e.stateNode=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}function al(e){return 5===e.tag||3===e.tag||4===e.tag}function ul(e){e:for(;;){for(;null===e.sibling;){if(null===e.return||al(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;5!==e.tag&&6!==e.tag&&18!==e.tag;){if(2&e.flags)continue e;if(null===e.child||4===e.tag)continue e;e.child.return=e,e=e.child}if(!(2&e.flags))return e.stateNode}}function ll(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=Zr));else if(4!==r&&null!==(e=e.child))for(ll(e,t,n),e=e.sibling;null!==e;)ll(e,t,n),e=e.sibling}function sl(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&null!==(e=e.child))for(sl(e,t,n),e=e.sibling;null!==e;)sl(e,t,n),e=e.sibling}var cl=null,fl=!1;function dl(e,t,n){for(n=n.child;null!==n;)pl(e,t,n),n=n.sibling}function pl(e,t,n){if(it&&"function"==typeof it.onCommitFiberUnmount)try{it.onCommitFiberUnmount(ot,n)}catch(e){}switch(n.tag){case 5:Yu||Zu(n,t);case 6:var r=cl,o=fl;cl=null,dl(e,t,n),fl=o,null!==(cl=r)&&(fl?(e=cl,n=n.stateNode,8===e.nodeType?e.parentNode.removeChild(n):e.removeChild(n)):cl.removeChild(n.stateNode));break;case 18:null!==cl&&(fl?(e=cl,n=n.stateNode,8===e.nodeType?lo(e.parentNode,n):1===e.nodeType&&lo(e,n),Wt(e)):lo(cl,n.stateNode));break;case 4:r=cl,o=fl,cl=n.stateNode.containerInfo,fl=!0,dl(e,t,n),cl=r,fl=o;break;case 0:case 11:case 14:case 15:if(!Yu&&null!==(r=n.updateQueue)&&null!==(r=r.lastEffect)){o=r=r.next;do{var i=o,a=i.destroy;i=i.tag,void 0!==a&&(2&i||4&i)&&el(n,t,a),o=o.next}while(o!==r)}dl(e,t,n);break;case 1:if(!Yu&&(Zu(n,t),"function"==typeof(r=n.stateNode).componentWillUnmount))try{r.props=n.memoizedProps,r.state=n.memoizedState,r.componentWillUnmount()}catch(e){xs(n,t,e)}dl(e,t,n);break;case 21:dl(e,t,n);break;case 22:1&n.mode?(Yu=(r=Yu)||null!==n.memoizedState,dl(e,t,n),Yu=r):dl(e,t,n);break;default:dl(e,t,n)}}function hl(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new Xu),t.forEach(function(t){var r=Ps.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))})}}function yl(e,t){var n=t.deletions;if(null!==n)for(var r=0;r<n.length;r++){var o=n[r];try{var a=e,u=t,l=u;e:for(;null!==l;){switch(l.tag){case 5:cl=l.stateNode,fl=!1;break e;case 3:case 4:cl=l.stateNode.containerInfo,fl=!0;break e}l=l.return}if(null===cl)throw Error(i(160));pl(a,u,o),cl=null,fl=!1;var s=o.alternate;null!==s&&(s.return=null),o.return=null}catch(e){xs(o,t,e)}}if(12854&t.subtreeFlags)for(t=t.child;null!==t;)ml(t,e),t=t.sibling}function ml(e,t){var n=e.alternate,r=e.flags;switch(e.tag){case 0:case 11:case 14:case 15:if(yl(t,e),vl(e),4&r){try{nl(3,e,e.return),rl(3,e)}catch(t){xs(e,e.return,t)}try{nl(5,e,e.return)}catch(t){xs(e,e.return,t)}}break;case 1:yl(t,e),vl(e),512&r&&null!==n&&Zu(n,n.return);break;case 5:if(yl(t,e),vl(e),512&r&&null!==n&&Zu(n,n.return),32&e.flags){var o=e.stateNode;try{de(o,"")}catch(t){xs(e,e.return,t)}}if(4&r&&null!=(o=e.stateNode)){var a=e.memoizedProps,u=null!==n?n.memoizedProps:a,l=e.type,s=e.updateQueue;if(e.updateQueue=null,null!==s)try{"input"===l&&"radio"===a.type&&null!=a.name&&X(o,a),be(l,u);var c=be(l,a);for(u=0;u<s.length;u+=2){var f=s[u],d=s[u+1];"style"===f?me(o,d):"dangerouslySetInnerHTML"===f?fe(o,d):"children"===f?de(o,d):b(o,f,d,c)}switch(l){case"input":J(o,a);break;case"textarea":ie(o,a);break;case"select":var p=o._wrapperState.wasMultiple;o._wrapperState.wasMultiple=!!a.multiple;var h=a.value;null!=h?ne(o,!!a.multiple,h,!1):p!==!!a.multiple&&(null!=a.defaultValue?ne(o,!!a.multiple,a.defaultValue,!0):ne(o,!!a.multiple,a.multiple?[]:"",!1))}o[ho]=a}catch(t){xs(e,e.return,t)}}break;case 6:if(yl(t,e),vl(e),4&r){if(null===e.stateNode)throw Error(i(162));o=e.stateNode,a=e.memoizedProps;try{o.nodeValue=a}catch(t){xs(e,e.return,t)}}break;case 3:if(yl(t,e),vl(e),4&r&&null!==n&&n.memoizedState.isDehydrated)try{Wt(t.containerInfo)}catch(t){xs(e,e.return,t)}break;case 4:default:yl(t,e),vl(e);break;case 13:yl(t,e),vl(e),8192&(o=e.child).flags&&(a=null!==o.memoizedState,o.stateNode.isHidden=a,!a||null!==o.alternate&&null!==o.alternate.memoizedState||(Ul=Xe())),4&r&&hl(e);break;case 22:if(f=null!==n&&null!==n.memoizedState,1&e.mode?(Yu=(c=Yu)||f,yl(t,e),Yu=c):yl(t,e),vl(e),8192&r){if(c=null!==e.memoizedState,(e.stateNode.isHidden=c)&&!f&&1&e.mode)for(Ju=e,f=e.child;null!==f;){for(d=Ju=f;null!==Ju;){switch(h=(p=Ju).child,p.tag){case 0:case 11:case 14:case 15:nl(4,p,p.return);break;case 1:Zu(p,p.return);var y=p.stateNode;if("function"==typeof y.componentWillUnmount){r=p,n=p.return;try{t=r,y.props=t.memoizedProps,y.state=t.memoizedState,y.componentWillUnmount()}catch(e){xs(r,n,e)}}break;case 5:Zu(p,p.return);break;case 22:if(null!==p.memoizedState){wl(d);continue}}null!==h?(h.return=p,Ju=h):wl(d)}f=f.sibling}e:for(f=null,d=e;;){if(5===d.tag){if(null===f){f=d;try{o=d.stateNode,c?"function"==typeof(a=o.style).setProperty?a.setProperty("display","none","important"):a.display="none":(l=d.stateNode,u=null!=(s=d.memoizedProps.style)&&s.hasOwnProperty("display")?s.display:null,l.style.display=ye("display",u))}catch(t){xs(e,e.return,t)}}}else if(6===d.tag){if(null===f)try{d.stateNode.nodeValue=c?"":d.memoizedProps}catch(t){xs(e,e.return,t)}}else if((22!==d.tag&&23!==d.tag||null===d.memoizedState||d===e)&&null!==d.child){d.child.return=d,d=d.child;continue}if(d===e)break e;for(;null===d.sibling;){if(null===d.return||d.return===e)break e;f===d&&(f=null),d=d.return}f===d&&(f=null),d.sibling.return=d.return,d=d.sibling}}break;case 19:yl(t,e),vl(e),4&r&&hl(e);case 21:}}function vl(e){var t=e.flags;if(2&t){try{e:{for(var n=e.return;null!==n;){if(al(n)){var r=n;break e}n=n.return}throw Error(i(160))}switch(r.tag){case 5:var o=r.stateNode;32&r.flags&&(de(o,""),r.flags&=-33),sl(e,ul(e),o);break;case 3:case 4:var a=r.stateNode.containerInfo;ll(e,ul(e),a);break;default:throw Error(i(161))}}catch(t){xs(e,e.return,t)}e.flags&=-3}4096&t&&(e.flags&=-4097)}function gl(e,t,n){Ju=e,bl(e,t,n)}function bl(e,t,n){for(var r=!!(1&e.mode);null!==Ju;){var o=Ju,i=o.child;if(22===o.tag&&r){var a=null!==o.memoizedState||Gu;if(!a){var u=o.alternate,l=null!==u&&null!==u.memoizedState||Yu;u=Gu;var s=Yu;if(Gu=a,(Yu=l)&&!s)for(Ju=o;null!==Ju;)l=(a=Ju).child,22===a.tag&&null!==a.memoizedState?Sl(o):null!==l?(l.return=a,Ju=l):Sl(o);for(;null!==i;)Ju=i,bl(i,t,n),i=i.sibling;Ju=o,Gu=u,Yu=s}_l(e)}else 8772&o.subtreeFlags&&null!==i?(i.return=o,Ju=i):_l(e)}}function _l(e){for(;null!==Ju;){var t=Ju;if(8772&t.flags){var n=t.alternate;try{if(8772&t.flags)switch(t.tag){case 0:case 11:case 15:Yu||rl(5,t);break;case 1:var r=t.stateNode;if(4&t.flags&&!Yu)if(null===n)r.componentDidMount();else{var o=t.elementType===t.type?n.memoizedProps:nu(t.type,n.memoizedProps);r.componentDidUpdate(o,n.memoizedState,r.__reactInternalSnapshotBeforeUpdate)}var a=t.updateQueue;null!==a&&$i(t,a,r);break;case 3:var u=t.updateQueue;if(null!==u){if(n=null,null!==t.child)switch(t.child.tag){case 5:case 1:n=t.child.stateNode}$i(t,u,n)}break;case 5:var l=t.stateNode;if(null===n&&4&t.flags){n=l;var s=t.memoizedProps;switch(t.type){case"button":case"input":case"select":case"textarea":s.autoFocus&&n.focus();break;case"img":s.src&&(n.src=s.src)}}break;case 6:case 4:case 12:case 19:case 17:case 21:case 22:case 23:case 25:break;case 13:if(null===t.memoizedState){var c=t.alternate;if(null!==c){var f=c.memoizedState;if(null!==f){var d=f.dehydrated;null!==d&&Wt(d)}}}break;default:throw Error(i(163))}Yu||512&t.flags&&ol(t)}catch(e){xs(t,t.return,e)}}if(t===e){Ju=null;break}if(null!==(n=t.sibling)){n.return=t.return,Ju=n;break}Ju=t.return}}function wl(e){for(;null!==Ju;){var t=Ju;if(t===e){Ju=null;break}var n=t.sibling;if(null!==n){n.return=t.return,Ju=n;break}Ju=t.return}}function Sl(e){for(;null!==Ju;){var t=Ju;try{switch(t.tag){case 0:case 11:case 15:var n=t.return;try{rl(4,t)}catch(e){xs(t,n,e)}break;case 1:var r=t.stateNode;if("function"==typeof r.componentDidMount){var o=t.return;try{r.componentDidMount()}catch(e){xs(t,o,e)}}var i=t.return;try{ol(t)}catch(e){xs(t,i,e)}break;case 5:var a=t.return;try{ol(t)}catch(e){xs(t,a,e)}}}catch(e){xs(t,t.return,e)}if(t===e){Ju=null;break}var u=t.sibling;if(null!==u){u.return=t.return,Ju=u;break}Ju=t.return}}var kl,xl=Math.ceil,El=_.ReactCurrentDispatcher,Ol=_.ReactCurrentOwner,Cl=_.ReactCurrentBatchConfig,Pl=0,zl=null,jl=null,Il=0,Nl=0,Tl=Eo(0),Ml=0,Rl=null,Dl=0,Al=0,Ll=0,Fl=null,Bl=null,Ul=0,Wl=1/0,ql=null,$l=!1,Vl=null,Hl=null,Kl=!1,Ql=null,Gl=0,Yl=0,Xl=null,Jl=-1,Zl=0;function es(){return 6&Pl?Xe():-1!==Jl?Jl:Jl=Xe()}function ts(e){return 1&e.mode?2&Pl&&0!==Il?Il&-Il:null!==mi.transition?(0===Zl&&(Zl=yt()),Zl):0!==(e=bt)?e:e=void 0===(e=window.event)?16:Yt(e.type):1}function ns(e,t,n,r){if(50<Yl)throw Yl=0,Xl=null,Error(i(185));vt(e,n,r),2&Pl&&e===zl||(e===zl&&(!(2&Pl)&&(Al|=n),4===Ml&&us(e,Il)),rs(e,r),1===n&&0===Pl&&!(1&t.mode)&&(Wl=Xe()+500,Bo&&qo()))}function rs(e,t){var n=e.callbackNode;!function(e,t){for(var n=e.suspendedLanes,r=e.pingedLanes,o=e.expirationTimes,i=e.pendingLanes;0<i;){var a=31-at(i),u=1<<a,l=o[a];-1===l?0!==(u&n)&&0===(u&r)||(o[a]=pt(u,t)):l<=t&&(e.expiredLanes|=u),i&=~u}}(e,t);var r=dt(e,e===zl?Il:0);if(0===r)null!==n&&Qe(n),e.callbackNode=null,e.callbackPriority=0;else if(t=r&-r,e.callbackPriority!==t){if(null!=n&&Qe(n),1===t)0===e.tag?function(e){Bo=!0,Wo(e)}(ls.bind(null,e)):Wo(ls.bind(null,e)),ao(function(){!(6&Pl)&&qo()}),n=null;else{switch(_t(r)){case 1:n=Ze;break;case 4:n=et;break;case 16:default:n=tt;break;case 536870912:n=rt}n=zs(n,os.bind(null,e))}e.callbackPriority=t,e.callbackNode=n}}function os(e,t){if(Jl=-1,Zl=0,6&Pl)throw Error(i(327));var n=e.callbackNode;if(Ss()&&e.callbackNode!==n)return null;var r=dt(e,e===zl?Il:0);if(0===r)return null;if(30&r||0!==(r&e.expiredLanes)||t)t=ms(e,r);else{t=r;var o=Pl;Pl|=2;var a=hs();for(zl===e&&Il===t||(ql=null,Wl=Xe()+500,ds(e,t));;)try{gs();break}catch(t){ps(e,t)}Ci(),El.current=a,Pl=o,null!==jl?t=0:(zl=null,Il=0,t=Ml)}if(0!==t){if(2===t&&0!==(o=ht(e))&&(r=o,t=is(e,o)),1===t)throw n=Rl,ds(e,0),us(e,r),rs(e,Xe()),n;if(6===t)us(e,r);else{if(o=e.current.alternate,!(30&r||function(e){for(var t=e;;){if(16384&t.flags){var n=t.updateQueue;if(null!==n&&null!==(n=n.stores))for(var r=0;r<n.length;r++){var o=n[r],i=o.getSnapshot;o=o.value;try{if(!ur(i(),o))return!1}catch(e){return!1}}}if(n=t.child,16384&t.subtreeFlags&&null!==n)n.return=t,t=n;else{if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return!0;t=t.return}t.sibling.return=t.return,t=t.sibling}}return!0}(o)||(t=ms(e,r),2===t&&(a=ht(e),0!==a&&(r=a,t=is(e,a))),1!==t)))throw n=Rl,ds(e,0),us(e,r),rs(e,Xe()),n;switch(e.finishedWork=o,e.finishedLanes=r,t){case 0:case 1:throw Error(i(345));case 2:case 5:ws(e,Bl,ql);break;case 3:if(us(e,r),(130023424&r)===r&&10<(t=Ul+500-Xe())){if(0!==dt(e,0))break;if(((o=e.suspendedLanes)&r)!==r){es(),e.pingedLanes|=e.suspendedLanes&o;break}e.timeoutHandle=ro(ws.bind(null,e,Bl,ql),t);break}ws(e,Bl,ql);break;case 4:if(us(e,r),(4194240&r)===r)break;for(t=e.eventTimes,o=-1;0<r;){var u=31-at(r);a=1<<u,(u=t[u])>o&&(o=u),r&=~a}if(r=o,10<(r=(120>(r=Xe()-r)?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*xl(r/1960))-r)){e.timeoutHandle=ro(ws.bind(null,e,Bl,ql),r);break}ws(e,Bl,ql);break;default:throw Error(i(329))}}}return rs(e,Xe()),e.callbackNode===n?os.bind(null,e):null}function is(e,t){var n=Fl;return e.current.memoizedState.isDehydrated&&(ds(e,t).flags|=256),2!==(e=ms(e,t))&&(t=Bl,Bl=n,null!==t&&as(t)),e}function as(e){null===Bl?Bl=e:Bl.push.apply(Bl,e)}function us(e,t){for(t&=~Ll,t&=~Al,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-at(t),r=1<<n;e[n]=-1,t&=~r}}function ls(e){if(6&Pl)throw Error(i(327));Ss();var t=dt(e,0);if(!(1&t))return rs(e,Xe()),null;var n=ms(e,t);if(0!==e.tag&&2===n){var r=ht(e);0!==r&&(t=r,n=is(e,r))}if(1===n)throw n=Rl,ds(e,0),us(e,t),rs(e,Xe()),n;if(6===n)throw Error(i(345));return e.finishedWork=e.current.alternate,e.finishedLanes=t,ws(e,Bl,ql),rs(e,Xe()),null}function ss(e,t){var n=Pl;Pl|=1;try{return e(t)}finally{0===(Pl=n)&&(Wl=Xe()+500,Bo&&qo())}}function cs(e){null!==Ql&&0===Ql.tag&&!(6&Pl)&&Ss();var t=Pl;Pl|=1;var n=Cl.transition,r=bt;try{if(Cl.transition=null,bt=1,e)return e()}finally{bt=r,Cl.transition=n,!(6&(Pl=t))&&qo()}}function fs(){Nl=Tl.current,Oo(Tl)}function ds(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,oo(n)),null!==jl)for(n=jl.return;null!==n;){var r=n;switch(ni(r),r.tag){case 1:null!=(r=r.type.childContextTypes)&&Mo();break;case 3:Xi(),Oo(jo),Oo(zo),ra();break;case 5:Zi(r);break;case 4:Xi();break;case 13:case 19:Oo(ea);break;case 10:Pi(r.type._context);break;case 22:case 23:fs()}n=n.return}if(zl=e,jl=e=Ts(e.current,null),Il=Nl=t,Ml=0,Rl=null,Ll=Al=Dl=0,Bl=Fl=null,null!==Ni){for(t=0;t<Ni.length;t++)if(null!==(r=(n=Ni[t]).interleaved)){n.interleaved=null;var o=r.next,i=n.pending;if(null!==i){var a=i.next;i.next=o,r.next=a}n.pending=r}Ni=null}return e}function ps(e,t){for(;;){var n=jl;try{if(Ci(),oa.current=Ja,ca){for(var r=ua.memoizedState;null!==r;){var o=r.queue;null!==o&&(o.pending=null),r=r.next}ca=!1}if(aa=0,sa=la=ua=null,fa=!1,da=0,Ol.current=null,null===n||null===n.return){Ml=1,Rl=t,jl=null;break}e:{var a=e,u=n.return,l=n,s=t;if(t=Il,l.flags|=32768,null!==s&&"object"==typeof s&&"function"==typeof s.then){var c=s,f=l,d=f.tag;if(!(1&f.mode||0!==d&&11!==d&&15!==d)){var p=f.alternate;p?(f.updateQueue=p.updateQueue,f.memoizedState=p.memoizedState,f.lanes=p.lanes):(f.updateQueue=null,f.memoizedState=null)}var h=mu(u);if(null!==h){h.flags&=-257,vu(h,u,l,0,t),1&h.mode&&yu(a,c,t),s=c;var y=(t=h).updateQueue;if(null===y){var m=new Set;m.add(s),t.updateQueue=m}else y.add(s);break e}if(!(1&t)){yu(a,c,t),ys();break e}s=Error(i(426))}else if(ii&&1&l.mode){var v=mu(u);if(null!==v){!(65536&v.flags)&&(v.flags|=256),vu(v,u,l,0,t),yi(su(s,l));break e}}a=s=su(s,l),4!==Ml&&(Ml=2),null===Fl?Fl=[a]:Fl.push(a),a=u;do{switch(a.tag){case 3:a.flags|=65536,t&=-t,a.lanes|=t,Wi(a,pu(0,s,t));break e;case 1:l=s;var g=a.type,b=a.stateNode;if(!(128&a.flags||"function"!=typeof g.getDerivedStateFromError&&(null===b||"function"!=typeof b.componentDidCatch||null!==Hl&&Hl.has(b)))){a.flags|=65536,t&=-t,a.lanes|=t,Wi(a,hu(a,l,t));break e}}a=a.return}while(null!==a)}_s(n)}catch(e){t=e,jl===n&&null!==n&&(jl=n=n.return);continue}break}}function hs(){var e=El.current;return El.current=Ja,null===e?Ja:e}function ys(){0!==Ml&&3!==Ml&&2!==Ml||(Ml=4),null===zl||!(268435455&Dl)&&!(268435455&Al)||us(zl,Il)}function ms(e,t){var n=Pl;Pl|=2;var r=hs();for(zl===e&&Il===t||(ql=null,ds(e,t));;)try{vs();break}catch(t){ps(e,t)}if(Ci(),Pl=n,El.current=r,null!==jl)throw Error(i(261));return zl=null,Il=0,Ml}function vs(){for(;null!==jl;)bs(jl)}function gs(){for(;null!==jl&&!Ge();)bs(jl)}function bs(e){var t=kl(e.alternate,e,Nl);e.memoizedProps=e.pendingProps,null===t?_s(e):jl=t,Ol.current=null}function _s(e){var t=e;do{var n=t.alternate;if(e=t.return,32768&t.flags){if(null!==(n=Qu(n,t)))return n.flags&=32767,void(jl=n);if(null===e)return Ml=6,void(jl=null);e.flags|=32768,e.subtreeFlags=0,e.deletions=null}else if(null!==(n=Ku(n,t,Nl)))return void(jl=n);if(null!==(t=t.sibling))return void(jl=t);jl=t=e}while(null!==t);0===Ml&&(Ml=5)}function ws(e,t,n){var r=bt,o=Cl.transition;try{Cl.transition=null,bt=1,function(e,t,n,r){do{Ss()}while(null!==Ql);if(6&Pl)throw Error(i(327));n=e.finishedWork;var o=e.finishedLanes;if(null===n)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(i(177));e.callbackNode=null,e.callbackPriority=0;var a=n.lanes|n.childLanes;if(function(e,t){var n=e.pendingLanes&~t;e.pendingLanes=t,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=t,e.mutableReadLanes&=t,e.entangledLanes&=t,t=e.entanglements;var r=e.eventTimes;for(e=e.expirationTimes;0<n;){var o=31-at(n),i=1<<o;t[o]=0,r[o]=-1,e[o]=-1,n&=~i}}(e,a),e===zl&&(jl=zl=null,Il=0),!(2064&n.subtreeFlags)&&!(2064&n.flags)||Kl||(Kl=!0,zs(tt,function(){return Ss(),null})),a=!!(15990&n.flags),15990&n.subtreeFlags||a){a=Cl.transition,Cl.transition=null;var u=bt;bt=1;var l=Pl;Pl|=4,Ol.current=null,function(e,t){if(eo=$t,pr(e=dr())){if("selectionStart"in e)var n={start:e.selectionStart,end:e.selectionEnd};else e:{var r=(n=(n=e.ownerDocument)&&n.defaultView||window).getSelection&&n.getSelection();if(r&&0!==r.rangeCount){n=r.anchorNode;var o=r.anchorOffset,a=r.focusNode;r=r.focusOffset;try{n.nodeType,a.nodeType}catch(e){n=null;break e}var u=0,l=-1,s=-1,c=0,f=0,d=e,p=null;t:for(;;){for(var h;d!==n||0!==o&&3!==d.nodeType||(l=u+o),d!==a||0!==r&&3!==d.nodeType||(s=u+r),3===d.nodeType&&(u+=d.nodeValue.length),null!==(h=d.firstChild);)p=d,d=h;for(;;){if(d===e)break t;if(p===n&&++c===o&&(l=u),p===a&&++f===r&&(s=u),null!==(h=d.nextSibling))break;p=(d=p).parentNode}d=h}n=-1===l||-1===s?null:{start:l,end:s}}else n=null}n=n||{start:0,end:0}}else n=null;for(to={focusedElem:e,selectionRange:n},$t=!1,Ju=t;null!==Ju;)if(e=(t=Ju).child,1028&t.subtreeFlags&&null!==e)e.return=t,Ju=e;else for(;null!==Ju;){t=Ju;try{var y=t.alternate;if(1024&t.flags)switch(t.tag){case 0:case 11:case 15:case 5:case 6:case 4:case 17:break;case 1:if(null!==y){var m=y.memoizedProps,v=y.memoizedState,g=t.stateNode,b=g.getSnapshotBeforeUpdate(t.elementType===t.type?m:nu(t.type,m),v);g.__reactInternalSnapshotBeforeUpdate=b}break;case 3:var _=t.stateNode.containerInfo;1===_.nodeType?_.textContent="":9===_.nodeType&&_.documentElement&&_.removeChild(_.documentElement);break;default:throw Error(i(163))}}catch(e){xs(t,t.return,e)}if(null!==(e=t.sibling)){e.return=t.return,Ju=e;break}Ju=t.return}y=tl,tl=!1}(e,n),ml(n,e),hr(to),$t=!!eo,to=eo=null,e.current=n,gl(n,e,o),Ye(),Pl=l,bt=u,Cl.transition=a}else e.current=n;if(Kl&&(Kl=!1,Ql=e,Gl=o),0===(a=e.pendingLanes)&&(Hl=null),function(e){if(it&&"function"==typeof it.onCommitFiberRoot)try{it.onCommitFiberRoot(ot,e,void 0,!(128&~e.current.flags))}catch(e){}}(n.stateNode),rs(e,Xe()),null!==t)for(r=e.onRecoverableError,n=0;n<t.length;n++)r((o=t[n]).value,{componentStack:o.stack,digest:o.digest});if($l)throw $l=!1,e=Vl,Vl=null,e;!!(1&Gl)&&0!==e.tag&&Ss(),1&(a=e.pendingLanes)?e===Xl?Yl++:(Yl=0,Xl=e):Yl=0,qo()}(e,t,n,r)}finally{Cl.transition=o,bt=r}return null}function Ss(){if(null!==Ql){var e=_t(Gl),t=Cl.transition,n=bt;try{if(Cl.transition=null,bt=16>e?16:e,null===Ql)var r=!1;else{if(e=Ql,Ql=null,Gl=0,6&Pl)throw Error(i(331));var o=Pl;for(Pl|=4,Ju=e.current;null!==Ju;){var a=Ju,u=a.child;if(16&Ju.flags){var l=a.deletions;if(null!==l){for(var s=0;s<l.length;s++){var c=l[s];for(Ju=c;null!==Ju;){var f=Ju;switch(f.tag){case 0:case 11:case 15:nl(8,f,a)}var d=f.child;if(null!==d)d.return=f,Ju=d;else for(;null!==Ju;){var p=(f=Ju).sibling,h=f.return;if(il(f),f===c){Ju=null;break}if(null!==p){p.return=h,Ju=p;break}Ju=h}}}var y=a.alternate;if(null!==y){var m=y.child;if(null!==m){y.child=null;do{var v=m.sibling;m.sibling=null,m=v}while(null!==m)}}Ju=a}}if(2064&a.subtreeFlags&&null!==u)u.return=a,Ju=u;else e:for(;null!==Ju;){if(2048&(a=Ju).flags)switch(a.tag){case 0:case 11:case 15:nl(9,a,a.return)}var g=a.sibling;if(null!==g){g.return=a.return,Ju=g;break e}Ju=a.return}}var b=e.current;for(Ju=b;null!==Ju;){var _=(u=Ju).child;if(2064&u.subtreeFlags&&null!==_)_.return=u,Ju=_;else e:for(u=b;null!==Ju;){if(2048&(l=Ju).flags)try{switch(l.tag){case 0:case 11:case 15:rl(9,l)}}catch(e){xs(l,l.return,e)}if(l===u){Ju=null;break e}var w=l.sibling;if(null!==w){w.return=l.return,Ju=w;break e}Ju=l.return}}if(Pl=o,qo(),it&&"function"==typeof it.onPostCommitFiberRoot)try{it.onPostCommitFiberRoot(ot,e)}catch(e){}r=!0}return r}finally{bt=n,Cl.transition=t}}return!1}function ks(e,t,n){e=Bi(e,t=pu(0,t=su(n,t),1),1),t=es(),null!==e&&(vt(e,1,t),rs(e,t))}function xs(e,t,n){if(3===e.tag)ks(e,e,n);else for(;null!==t;){if(3===t.tag){ks(t,e,n);break}if(1===t.tag){var r=t.stateNode;if("function"==typeof t.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Hl||!Hl.has(r))){t=Bi(t,e=hu(t,e=su(n,e),1),1),e=es(),null!==t&&(vt(t,1,e),rs(t,e));break}}t=t.return}}function Es(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),t=es(),e.pingedLanes|=e.suspendedLanes&n,zl===e&&(Il&n)===n&&(4===Ml||3===Ml&&(130023424&Il)===Il&&500>Xe()-Ul?ds(e,0):Ll|=n),rs(e,t)}function Os(e,t){0===t&&(1&e.mode?(t=ct,!(130023424&(ct<<=1))&&(ct=4194304)):t=1);var n=es();null!==(e=Ri(e,t))&&(vt(e,t,n),rs(e,n))}function Cs(e){var t=e.memoizedState,n=0;null!==t&&(n=t.retryLane),Os(e,n)}function Ps(e,t){var n=0;switch(e.tag){case 13:var r=e.stateNode,o=e.memoizedState;null!==o&&(n=o.retryLane);break;case 19:r=e.stateNode;break;default:throw Error(i(314))}null!==r&&r.delete(t),Os(e,n)}function zs(e,t){return Ke(e,t)}function js(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function Is(e,t,n,r){return new js(e,t,n,r)}function Ns(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Ts(e,t){var n=e.alternate;return null===n?((n=Is(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.subtreeFlags=0,n.deletions=null),n.flags=14680064&e.flags,n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Ms(e,t,n,r,o,a){var u=2;if(r=e,"function"==typeof e)Ns(e)&&(u=1);else if("string"==typeof e)u=5;else e:switch(e){case k:return Rs(n.children,o,a,t);case x:u=8,o|=8;break;case E:return(e=Is(12,n,t,2|o)).elementType=E,e.lanes=a,e;case z:return(e=Is(13,n,t,o)).elementType=z,e.lanes=a,e;case j:return(e=Is(19,n,t,o)).elementType=j,e.lanes=a,e;case T:return Ds(n,o,a,t);default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case O:u=10;break e;case C:u=9;break e;case P:u=11;break e;case I:u=14;break e;case N:u=16,r=null;break e}throw Error(i(130,null==e?e:typeof e,""))}return(t=Is(u,n,t,o)).elementType=e,t.type=r,t.lanes=a,t}function Rs(e,t,n,r){return(e=Is(7,e,r,t)).lanes=n,e}function Ds(e,t,n,r){return(e=Is(22,e,r,t)).elementType=T,e.lanes=n,e.stateNode={isHidden:!1},e}function As(e,t,n){return(e=Is(6,e,null,t)).lanes=n,e}function Ls(e,t,n){return(t=Is(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Fs(e,t,n,r,o){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.pendingContext=this.context=null,this.callbackPriority=0,this.eventTimes=mt(0),this.expirationTimes=mt(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=mt(0),this.identifierPrefix=r,this.onRecoverableError=o,this.mutableSourceEagerHydrationData=null}function Bs(e,t,n,r,o,i,a,u,l){return e=new Fs(e,t,n,u,l),1===t?(t=1,!0===i&&(t|=8)):t=0,i=Is(3,null,null,t),e.current=i,i.stateNode=e,i.memoizedState={element:r,isDehydrated:n,cache:null,transitions:null,pendingSuspenseBoundaries:null},Ai(i),e}function Us(e){if(!e)return Po;e:{if(We(e=e._reactInternals)!==e||1!==e.tag)throw Error(i(170));var t=e;do{switch(t.tag){case 3:t=t.stateNode.context;break e;case 1:if(To(t.type)){t=t.stateNode.__reactInternalMemoizedMergedChildContext;break e}}t=t.return}while(null!==t);throw Error(i(171))}if(1===e.tag){var n=e.type;if(To(n))return Do(e,n,t)}return t}function Ws(e,t,n,r,o,i,a,u,l){return(e=Bs(n,r,!0,e,0,i,0,u,l)).context=Us(null),n=e.current,(i=Fi(r=es(),o=ts(n))).callback=null!=t?t:null,Bi(n,i,o),e.current.lanes=o,vt(e,o,r),rs(e,r),e}function qs(e,t,n,r){var o=t.current,i=es(),a=ts(o);return n=Us(n),null===t.context?t.context=n:t.pendingContext=n,(t=Fi(i,a)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),null!==(e=Bi(o,t,a))&&(ns(e,o,a,i),Ui(e,o,a)),a}function $s(e){return(e=e.current).child?(e.child.tag,e.child.stateNode):null}function Vs(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function Hs(e,t){Vs(e,t),(e=e.alternate)&&Vs(e,t)}kl=function(e,t,n){if(null!==e)if(e.memoizedProps!==t.pendingProps||jo.current)bu=!0;else{if(0===(e.lanes&n)&&!(128&t.flags))return bu=!1,function(e,t,n){switch(t.tag){case 3:zu(t),hi();break;case 5:Ji(t);break;case 1:To(t.type)&&Ao(t);break;case 4:Yi(t,t.stateNode.containerInfo);break;case 10:var r=t.type._context,o=t.memoizedProps.value;Co(ki,r._currentValue),r._currentValue=o;break;case 13:if(null!==(r=t.memoizedState))return null!==r.dehydrated?(Co(ea,1&ea.current),t.flags|=128,null):0!==(n&t.child.childLanes)?Au(e,t,n):(Co(ea,1&ea.current),null!==(e=$u(e,t,n))?e.sibling:null);Co(ea,1&ea.current);break;case 19:if(r=0!==(n&t.childLanes),128&e.flags){if(r)return Wu(e,t,n);t.flags|=128}if(null!==(o=t.memoizedState)&&(o.rendering=null,o.tail=null,o.lastEffect=null),Co(ea,ea.current),r)break;return null;case 22:case 23:return t.lanes=0,xu(e,t,n)}return $u(e,t,n)}(e,t,n);bu=!!(131072&e.flags)}else bu=!1,ii&&1048576&t.flags&&ei(t,Ko,t.index);switch(t.lanes=0,t.tag){case 2:var r=t.type;qu(e,t),e=t.pendingProps;var o=No(t,zo.current);ji(t,n),o=ma(null,t,r,e,o,n);var a=va();return t.flags|=1,"object"==typeof o&&null!==o&&"function"==typeof o.render&&void 0===o.$$typeof?(t.tag=1,t.memoizedState=null,t.updateQueue=null,To(r)?(a=!0,Ao(t)):a=!1,t.memoizedState=null!==o.state&&void 0!==o.state?o.state:null,Ai(t),o.updater=ou,t.stateNode=o,o._reactInternals=t,lu(t,r,e,n),t=Pu(null,t,r,!0,a,n)):(t.tag=0,ii&&a&&ti(t),_u(null,t,o,n),t=t.child),t;case 16:r=t.elementType;e:{switch(qu(e,t),e=t.pendingProps,r=(o=r._init)(r._payload),t.type=r,o=t.tag=function(e){if("function"==typeof e)return Ns(e)?1:0;if(null!=e){if((e=e.$$typeof)===P)return 11;if(e===I)return 14}return 2}(r),e=nu(r,e),o){case 0:t=Ou(null,t,r,e,n);break e;case 1:t=Cu(null,t,r,e,n);break e;case 11:t=wu(null,t,r,e,n);break e;case 14:t=Su(null,t,r,nu(r.type,e),n);break e}throw Error(i(306,r,""))}return t;case 0:return r=t.type,o=t.pendingProps,Ou(e,t,r,o=t.elementType===r?o:nu(r,o),n);case 1:return r=t.type,o=t.pendingProps,Cu(e,t,r,o=t.elementType===r?o:nu(r,o),n);case 3:e:{if(zu(t),null===e)throw Error(i(387));r=t.pendingProps,o=(a=t.memoizedState).element,Li(e,t),qi(t,r,null,n);var u=t.memoizedState;if(r=u.element,a.isDehydrated){if(a={element:r,isDehydrated:!1,cache:u.cache,pendingSuspenseBoundaries:u.pendingSuspenseBoundaries,transitions:u.transitions},t.updateQueue.baseState=a,t.memoizedState=a,256&t.flags){t=ju(e,t,r,n,o=su(Error(i(423)),t));break e}if(r!==o){t=ju(e,t,r,n,o=su(Error(i(424)),t));break e}for(oi=so(t.stateNode.containerInfo.firstChild),ri=t,ii=!0,ai=null,n=Si(t,null,r,n),t.child=n;n;)n.flags=-3&n.flags|4096,n=n.sibling}else{if(hi(),r===o){t=$u(e,t,n);break e}_u(e,t,r,n)}t=t.child}return t;case 5:return Ji(t),null===e&&ci(t),r=t.type,o=t.pendingProps,a=null!==e?e.memoizedProps:null,u=o.children,no(r,o)?u=null:null!==a&&no(r,a)&&(t.flags|=32),Eu(e,t),_u(e,t,u,n),t.child;case 6:return null===e&&ci(t),null;case 13:return Au(e,t,n);case 4:return Yi(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=wi(t,null,r,n):_u(e,t,r,n),t.child;case 11:return r=t.type,o=t.pendingProps,wu(e,t,r,o=t.elementType===r?o:nu(r,o),n);case 7:return _u(e,t,t.pendingProps,n),t.child;case 8:case 12:return _u(e,t,t.pendingProps.children,n),t.child;case 10:e:{if(r=t.type._context,o=t.pendingProps,a=t.memoizedProps,u=o.value,Co(ki,r._currentValue),r._currentValue=u,null!==a)if(ur(a.value,u)){if(a.children===o.children&&!jo.current){t=$u(e,t,n);break e}}else for(null!==(a=t.child)&&(a.return=t);null!==a;){var l=a.dependencies;if(null!==l){u=a.child;for(var s=l.firstContext;null!==s;){if(s.context===r){if(1===a.tag){(s=Fi(-1,n&-n)).tag=2;var c=a.updateQueue;if(null!==c){var f=(c=c.shared).pending;null===f?s.next=s:(s.next=f.next,f.next=s),c.pending=s}}a.lanes|=n,null!==(s=a.alternate)&&(s.lanes|=n),zi(a.return,n,t),l.lanes|=n;break}s=s.next}}else if(10===a.tag)u=a.type===t.type?null:a.child;else if(18===a.tag){if(null===(u=a.return))throw Error(i(341));u.lanes|=n,null!==(l=u.alternate)&&(l.lanes|=n),zi(u,n,t),u=a.sibling}else u=a.child;if(null!==u)u.return=a;else for(u=a;null!==u;){if(u===t){u=null;break}if(null!==(a=u.sibling)){a.return=u.return,u=a;break}u=u.return}a=u}_u(e,t,o.children,n),t=t.child}return t;case 9:return o=t.type,r=t.pendingProps.children,ji(t,n),r=r(o=Ii(o)),t.flags|=1,_u(e,t,r,n),t.child;case 14:return o=nu(r=t.type,t.pendingProps),Su(e,t,r,o=nu(r.type,o),n);case 15:return ku(e,t,t.type,t.pendingProps,n);case 17:return r=t.type,o=t.pendingProps,o=t.elementType===r?o:nu(r,o),qu(e,t),t.tag=1,To(r)?(e=!0,Ao(t)):e=!1,ji(t,n),au(t,r,o),lu(t,r,o,n),Pu(null,t,r,!0,e,n);case 19:return Wu(e,t,n);case 22:return xu(e,t,n)}throw Error(i(156,t.tag))};var Ks="function"==typeof reportError?reportError:function(e){console.error(e)};function Qs(e){this._internalRoot=e}function Gs(e){this._internalRoot=e}function Ys(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType)}function Xs(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Js(){}function Zs(e,t,n,r,o){var i=n._reactRootContainer;if(i){var a=i;if("function"==typeof o){var u=o;o=function(){var e=$s(a);u.call(e)}}qs(t,a,e,o)}else a=function(e,t,n,r,o){if(o){if("function"==typeof r){var i=r;r=function(){var e=$s(a);i.call(e)}}var a=Ws(t,r,e,0,null,!1,0,"",Js);return e._reactRootContainer=a,e[yo]=a.current,Wr(8===e.nodeType?e.parentNode:e),cs(),a}for(;o=e.lastChild;)e.removeChild(o);if("function"==typeof r){var u=r;r=function(){var e=$s(l);u.call(e)}}var l=Bs(e,0,!1,null,0,!1,0,"",Js);return e._reactRootContainer=l,e[yo]=l.current,Wr(8===e.nodeType?e.parentNode:e),cs(function(){qs(t,l,n,r)}),l}(n,t,e,o,r);return $s(a)}Gs.prototype.render=Qs.prototype.render=function(e){var t=this._internalRoot;if(null===t)throw Error(i(409));qs(e,t,null,null)},Gs.prototype.unmount=Qs.prototype.unmount=function(){var e=this._internalRoot;if(null!==e){this._internalRoot=null;var t=e.containerInfo;cs(function(){qs(null,e,null,null)}),t[yo]=null}},Gs.prototype.unstable_scheduleHydration=function(e){if(e){var t=xt();e={blockedOn:null,target:e,priority:t};for(var n=0;n<Tt.length&&0!==t&&t<Tt[n].priority;n++);Tt.splice(n,0,e),0===n&&At(e)}},wt=function(e){switch(e.tag){case 3:var t=e.stateNode;if(t.current.memoizedState.isDehydrated){var n=ft(t.pendingLanes);0!==n&&(gt(t,1|n),rs(t,Xe()),!(6&Pl)&&(Wl=Xe()+500,qo()))}break;case 13:cs(function(){var t=Ri(e,1);if(null!==t){var n=es();ns(t,e,1,n)}}),Hs(e,1)}},St=function(e){if(13===e.tag){var t=Ri(e,134217728);null!==t&&ns(t,e,134217728,es()),Hs(e,134217728)}},kt=function(e){if(13===e.tag){var t=ts(e),n=Ri(e,t);null!==n&&ns(n,e,t,es()),Hs(e,t)}},xt=function(){return bt},Et=function(e,t){var n=bt;try{return bt=e,t()}finally{bt=n}},Se=function(e,t,n){switch(t){case"input":if(J(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=So(r);if(!o)throw Error(i(90));K(r),J(r,o)}}}break;case"textarea":ie(e,n);break;case"select":null!=(t=n.value)&&ne(e,!!n.multiple,t,!1)}},Pe=ss,ze=cs;var ec={usingClientEntryPoint:!1,Events:[_o,wo,So,Oe,Ce,ss]},tc={findFiberByHostInstance:bo,bundleType:0,version:"18.3.1",rendererPackageName:"react-dom"},nc={bundleType:tc.bundleType,version:tc.version,rendererPackageName:tc.rendererPackageName,rendererConfig:tc.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:_.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=Ve(e))?null:e.stateNode},findFiberByHostInstance:tc.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:"18.3.1-next-f1338f8080-20240426"};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var rc=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!rc.isDisabled&&rc.supportsFiber)try{ot=rc.inject(nc),it=rc}catch(ce){}}t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=ec,t.createPortal=function(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Ys(t))throw Error(i(200));return function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:S,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}(e,t,null,n)},t.createRoot=function(e,t){if(!Ys(e))throw Error(i(299));var n=!1,r="",o=Ks;return null!=t&&(!0===t.unstable_strictMode&&(n=!0),void 0!==t.identifierPrefix&&(r=t.identifierPrefix),void 0!==t.onRecoverableError&&(o=t.onRecoverableError)),t=Bs(e,1,!1,null,0,n,0,r,o),e[yo]=t.current,Wr(8===e.nodeType?e.parentNode:e),new Qs(t)},t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(i(188));throw e=Object.keys(e).join(","),Error(i(268,e))}return null===(e=Ve(t))?null:e.stateNode},t.flushSync=function(e){return cs(e)},t.hydrate=function(e,t,n){if(!Xs(t))throw Error(i(200));return Zs(null,e,t,!0,n)},t.hydrateRoot=function(e,t,n){if(!Ys(e))throw Error(i(405));var r=null!=n&&n.hydratedSources||null,o=!1,a="",u=Ks;if(null!=n&&(!0===n.unstable_strictMode&&(o=!0),void 0!==n.identifierPrefix&&(a=n.identifierPrefix),void 0!==n.onRecoverableError&&(u=n.onRecoverableError)),t=Ws(t,null,e,1,null!=n?n:null,o,0,a,u),e[yo]=t.current,Wr(e),r)for(e=0;e<r.length;e++)o=(o=(n=r[e])._getVersion)(n._source),null==t.mutableSourceEagerHydrationData?t.mutableSourceEagerHydrationData=[n,o]:t.mutableSourceEagerHydrationData.push(n,o);return new Gs(t)},t.render=function(e,t,n){if(!Xs(t))throw Error(i(200));return Zs(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!Xs(e))throw Error(i(40));return!!e._reactRootContainer&&(cs(function(){Zs(null,null,e,!1,function(){e._reactRootContainer=null,e[yo]=null})}),!0)},t.unstable_batchedUpdates=ss,t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!Xs(n))throw Error(i(200));if(null==e||void 0===e._reactInternals)throw Error(i(38));return Zs(e,t,n,!1,r)},t.version="18.3.1-next-f1338f8080-20240426"},556:(e,t,n)=>{e.exports=n(694)()},659:e=>{"use strict";var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},691:e=>{"use strict";var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var i={},a=[],u=0;u<e.length;u++){var l=e[u],s=r.base?l[0]+r.base:l[0],c=i[s]||0,f="".concat(s," ").concat(c);i[s]=c+1;var d=n(f),p={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==d)t[d].references++,t[d].updater(p);else{var h=o(p,r);r.byIndex=u,t.splice(u,0,{identifier:f,updater:h,references:1})}a.push(f)}return a}function o(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,o){var i=r(e=e||[],o=o||{});return function(e){e=e||[];for(var a=0;a<i.length;a++){var u=n(i[a]);t[u].references--}for(var l=r(e,o),s=0;s<i.length;s++){var c=n(i[s]);0===t[c].references&&(t[c].updater(),t.splice(c,1))}i=l}}},694:(e,t,n)=>{"use strict";var r=n(925);function o(){}function i(){}i.resetWarningCache=o,e.exports=function(){function e(e,t,n,o,i,a){if(a!==r){var u=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw u.name="Invariant Violation",u}}function t(){return e}e.isRequired=e;var n={array:e,bigint:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:i,resetWarningCache:o};return n.PropTypes=n,n}},795:(e,t,n)=>{"use strict";function r(e){i.length||o(),i[i.length]=e}e.exports=r;var o,i=[],a=0;function u(){for(;a<i.length;){var e=a;if(a+=1,i[e].call(),a>1024){for(var t=0,n=i.length-a;t<n;t++)i[t]=i[t+a];i.length-=a,a=0}}i.length=0,a=0}var l,s,c,f=void 0!==n.g?n.g:self,d=f.MutationObserver||f.WebKitMutationObserver;function p(e){return function(){var t=setTimeout(r,0),n=setInterval(r,50);function r(){clearTimeout(t),clearInterval(n),e()}}}"function"==typeof d?(l=1,s=new d(u),c=document.createTextNode(""),s.observe(c,{characterData:!0}),o=function(){l=-l,c.data=l}):o=p(u),r.requestFlush=o,r.makeRequestCallFromTimer=p},799:(e,t)=>{"use strict";var n=Symbol.for("react.element"),r=Symbol.for("react.portal"),o=Symbol.for("react.fragment"),i=Symbol.for("react.strict_mode"),a=Symbol.for("react.profiler"),u=Symbol.for("react.provider"),l=Symbol.for("react.context"),s=Symbol.for("react.server_context"),c=Symbol.for("react.forward_ref"),f=Symbol.for("react.suspense"),d=Symbol.for("react.suspense_list"),p=Symbol.for("react.memo"),h=Symbol.for("react.lazy");Symbol.for("react.offscreen");Symbol.for("react.module.reference"),t.isContextConsumer=function(e){return function(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case n:switch(e=e.type){case o:case a:case i:case f:case d:return e;default:switch(e=e&&e.$$typeof){case s:case l:case c:case h:case p:case u:return e;default:return t}}case r:return t}}}(e)===l}},825:e=>{"use strict";e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var o=void 0!==n.layer;o&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,o&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var i=n.sourceMap;i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},888:(e,t,n)=>{"use strict";e.exports=n(493)},925:e=>{"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},961:(e,t,n)=>{"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(551)},982:(e,t,n)=>{"use strict";e.exports=n(463)}},r={};function o(e){var t=r[e];if(void 0!==t)return t.exports;var i=r[e]={id:e,exports:{}};return n[e](i,i.exports,o),i.exports}o.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return o.d(t,{a:t}),t},t=Object.getPrototypeOf?e=>Object.getPrototypeOf(e):e=>e.__proto__,o.t=function(n,r){if(1&r&&(n=this(n)),8&r)return n;if("object"==typeof n&&n){if(4&r&&n.__esModule)return n;if(16&r&&"function"==typeof n.then)return n}var i=Object.create(null);o.r(i);var a={};e=e||[null,t({}),t([]),t(t)];for(var u=2&r&&n;"object"==typeof u&&!~e.indexOf(u);u=t(u))Object.getOwnPropertyNames(u).forEach(e=>a[e]=()=>n[e]);return a.default=()=>n,o.d(i,a),i},o.d=(e,t)=>{for(var n in t)o.o(t,n)&&!o.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},o.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),o.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),o.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{var e;o.g.importScripts&&(e=o.g.location+"");var t=o.g.document;if(!e&&t&&(t.currentScript&&"SCRIPT"===t.currentScript.tagName.toUpperCase()&&(e=t.currentScript.src),!e)){var n=t.getElementsByTagName("script");if(n.length)for(var r=n.length-1;r>-1&&(!e||!/^http(s?):/.test(e));)e=n[r--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/^blob:/,"").replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),o.p=e})(),o.nc=void 0,(()=>{"use strict";var e=o(540),t=o(961);function n(e){return n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},n(e)}function r(e,t,r){return(t=function(e){var t=function(e){if("object"!=n(e)||!e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var r=t.call(e,"string");if("object"!=n(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==n(t)?t:t+""}(t))in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach(function(t){r(e,t,n[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})}return e}function u(e){return"Minified Redux error #"+e+"; visit https://redux.js.org/Errors?code="+e+" for the full message or use the non-minified dev environment for full errors. "}var l="function"==typeof Symbol&&Symbol.observable||"@@observable",s=function(){return Math.random().toString(36).substring(7).split("").join(".")},c={INIT:"@@redux/INIT"+s(),REPLACE:"@@redux/REPLACE"+s(),PROBE_UNKNOWN_ACTION:function(){return"@@redux/PROBE_UNKNOWN_ACTION"+s()}};function f(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return 0===t.length?function(e){return e}:1===t.length?t[0]:t.reduce(function(e,t){return function(){return e(t.apply(void 0,arguments))}})}var d=o(888),p=o(242);let h=function(e){e()};const y=()=>h,m=Symbol.for("react-redux-context"),v="undefined"!=typeof globalThis?globalThis:{};function g(){var t;if(!e.createContext)return{};const n=null!=(t=v[m])?t:v[m]=new Map;let r=n.get(e.createContext);return r||(r=e.createContext(null),n.set(e.createContext,r)),r}const b=g();let _=null;function w(){return w=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)({}).hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},w.apply(null,arguments)}function S(e,t){if(null==e)return{};var n={};for(var r in e)if({}.hasOwnProperty.call(e,r)){if(-1!==t.indexOf(r))continue;n[r]=e[r]}return n}var k=o(146),x=o.n(k),E=o(363);const O=["initMapStateToProps","initMapDispatchToProps","initMergeProps"];function C(e,t,n,r,{areStatesEqual:o,areOwnPropsEqual:i,areStatePropsEqual:a}){let u,l,s,c,f,d=!1;return function(p,h){return d?function(d,p){const h=!i(p,l),y=!o(d,u,p,l);return u=d,l=p,h&&y?(s=e(u,l),t.dependsOnOwnProps&&(c=t(r,l)),f=n(s,c,l),f):h?(e.dependsOnOwnProps&&(s=e(u,l)),t.dependsOnOwnProps&&(c=t(r,l)),f=n(s,c,l),f):y?function(){const t=e(u,l),r=!a(t,s);return s=t,r&&(f=n(s,c,l)),f}():f}(p,h):(u=p,l=h,s=e(u,l),c=t(r,l),f=n(s,c,l),d=!0,f)}}function P(e){return function(t){const n=e(t);function r(){return n}return r.dependsOnOwnProps=!1,r}}function z(e){return e.dependsOnOwnProps?Boolean(e.dependsOnOwnProps):1!==e.length}function j(e,t){return function(t,{displayName:n}){const r=function(e,t){return r.dependsOnOwnProps?r.mapToProps(e,t):r.mapToProps(e,void 0)};return r.dependsOnOwnProps=!0,r.mapToProps=function(t,n){r.mapToProps=e,r.dependsOnOwnProps=z(e);let o=r(t,n);return"function"==typeof o&&(r.mapToProps=o,r.dependsOnOwnProps=z(o),o=r(t,n)),o},r}}function I(e,t){return(n,r)=>{throw new Error(`Invalid value of type ${typeof e} for ${t} argument when connecting component ${r.wrappedComponentName}.`)}}function N(e,t,n){return w({},n,e,t)}const T={notify(){},get:()=>[]};function M(e,t){let n,r=T,o=0,i=!1;function a(){s.onStateChange&&s.onStateChange()}function u(){o++,n||(n=t?t.addNestedSub(a):e.subscribe(a),r=function(){const e=y();let t=null,n=null;return{clear(){t=null,n=null},notify(){e(()=>{let e=t;for(;e;)e.callback(),e=e.next})},get(){let e=[],n=t;for(;n;)e.push(n),n=n.next;return e},subscribe(e){let r=!0,o=n={callback:e,next:null,prev:n};return o.prev?o.prev.next=o:t=o,function(){r&&null!==t&&(r=!1,o.next?o.next.prev=o.prev:n=o.prev,o.prev?o.prev.next=o.next:t=o.next)}}}}())}function l(){o--,n&&0===o&&(n(),n=void 0,r.clear(),r=T)}const s={addNestedSub:function(e){u();const t=r.subscribe(e);let n=!1;return()=>{n||(n=!0,t(),l())}},notifyNestedSubs:function(){r.notify()},handleChangeWrapper:a,isSubscribed:function(){return i},trySubscribe:function(){i||(i=!0,u())},tryUnsubscribe:function(){i&&(i=!1,l())},getListeners:()=>r};return s}const R="undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement?e.useLayoutEffect:e.useEffect;function D(e,t){return e===t?0!==e||0!==t||1/e==1/t:e!=e&&t!=t}function A(e,t){if(D(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;const n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(let r=0;r<n.length;r++)if(!Object.prototype.hasOwnProperty.call(t,n[r])||!D(e[n[r]],t[n[r]]))return!1;return!0}const L=["reactReduxForwardedRef"];let F=()=>{throw new Error("uSES not initialized!")};const B=[null,null];function U(e,t,n,r,o,i){e.current=r,n.current=!1,o.current&&(o.current=null,i())}function W(e,t){return e===t}const q=function(t,n,r,{pure:o,areStatesEqual:i=W,areOwnPropsEqual:a=A,areStatePropsEqual:u=A,areMergedPropsEqual:l=A,forwardRef:s=!1,context:c=b}={}){const f=c,d=function(e){return e?"function"==typeof e?j(e):I(e,"mapStateToProps"):P(()=>({}))}(t),p=function(e){return e&&"object"==typeof e?P(t=>function(e,t){const n={};for(const r in e){const o=e[r];"function"==typeof o&&(n[r]=(...e)=>t(o(...e)))}return n}(e,t)):e?"function"==typeof e?j(e):I(e,"mapDispatchToProps"):P(e=>({dispatch:e}))}(n),h=function(e){return e?"function"==typeof e?function(e){return function(t,{displayName:n,areMergedPropsEqual:r}){let o,i=!1;return function(t,n,a){const u=e(t,n,a);return i?r(u,o)||(o=u):(i=!0,o=u),o}}}(e):I(e,"mergeProps"):()=>N}(r),y=Boolean(t);return t=>{const n=t.displayName||t.name||"Component",r=`Connect(${n})`,o={shouldHandleStateChanges:y,displayName:r,wrappedComponentName:n,WrappedComponent:t,initMapStateToProps:d,initMapDispatchToProps:p,initMergeProps:h,areStatesEqual:i,areStatePropsEqual:u,areOwnPropsEqual:a,areMergedPropsEqual:l};function c(n){const[r,i,a]=e.useMemo(()=>{const{reactReduxForwardedRef:e}=n,t=S(n,L);return[n.context,e,t]},[n]),u=e.useMemo(()=>r&&r.Consumer&&(0,E.isContextConsumer)(e.createElement(r.Consumer,null))?r:f,[r,f]),l=e.useContext(u),s=Boolean(n.store)&&Boolean(n.store.getState)&&Boolean(n.store.dispatch),c=Boolean(l)&&Boolean(l.store),d=s?n.store:l.store,p=c?l.getServerState:d.getState,h=e.useMemo(()=>function(e,t){let{initMapStateToProps:n,initMapDispatchToProps:r,initMergeProps:o}=t,i=S(t,O);return C(n(e,i),r(e,i),o(e,i),e,i)}(d.dispatch,o),[d]),[m,v]=e.useMemo(()=>{if(!y)return B;const e=M(d,s?void 0:l.subscription),t=e.notifyNestedSubs.bind(e);return[e,t]},[d,s,l]),g=e.useMemo(()=>s?l:w({},l,{subscription:m}),[s,l,m]),b=e.useRef(),_=e.useRef(a),k=e.useRef(),x=e.useRef(!1),P=(e.useRef(!1),e.useRef(!1)),z=e.useRef();R(()=>(P.current=!0,()=>{P.current=!1}),[]);const j=e.useMemo(()=>()=>k.current&&a===_.current?k.current:h(d.getState(),a),[d,a]),I=e.useMemo(()=>e=>m?function(e,t,n,r,o,i,a,u,l,s,c){if(!e)return()=>{};let f=!1,d=null;const p=()=>{if(f||!u.current)return;const e=t.getState();let n,p;try{n=r(e,o.current)}catch(e){p=e,d=e}p||(d=null),n===i.current?a.current||s():(i.current=n,l.current=n,a.current=!0,c())};return n.onStateChange=p,n.trySubscribe(),p(),()=>{if(f=!0,n.tryUnsubscribe(),n.onStateChange=null,d)throw d}}(y,d,m,h,_,b,x,P,k,v,e):()=>{},[m]);var N,T;let D;N=U,T=[_,b,x,a,k,v],R(()=>N(...T),undefined);try{D=F(I,j,p?()=>h(p(),a):j)}catch(e){throw z.current&&(e.message+=`\nThe error may be correlated with this previous error:\n${z.current.stack}\n\n`),e}R(()=>{z.current=void 0,k.current=void 0,b.current=D});const A=e.useMemo(()=>e.createElement(t,w({},D,{ref:i})),[i,t,D]);return e.useMemo(()=>y?e.createElement(u.Provider,{value:g},A):A,[u,A,g])}const m=e.memo(c);if(m.WrappedComponent=t,m.displayName=c.displayName=r,s){const n=e.forwardRef(function(t,n){return e.createElement(m,w({},t,{reactReduxForwardedRef:n}))});return n.displayName=r,n.WrappedComponent=t,x()(n,t)}return x()(m,t)}},$=function({store:t,context:n,children:r,serverState:o,stabilityCheck:i="once",noopCheck:a="once"}){const u=e.useMemo(()=>{const e=M(t);return{store:t,subscription:e,getServerState:o?()=>o:void 0,stabilityCheck:i,noopCheck:a}},[t,o,i,a]),l=e.useMemo(()=>t.getState(),[t]);R(()=>{const{subscription:e}=u;return e.onStateChange=e.notifyNestedSubs,e.trySubscribe(),l!==t.getState()&&e.notifyNestedSubs(),()=>{e.tryUnsubscribe(),e.onStateChange=void 0}},[u,l]);const s=n||b;return e.createElement(s.Provider,{value:u},r)};var V;function H(e){return function(t){var n=t.dispatch,r=t.getState;return function(t){return function(o){return"function"==typeof o?o(n,r,e):t(o)}}}}_=p.useSyncExternalStoreWithSelector,(e=>{F=e})(d.useSyncExternalStore),V=t.unstable_batchedUpdates,h=V;var K=H();K.withExtraArgument=H;const Q=K;var G=o(556),Y=o.n(G),X="LOGIN",J="LOGOUT",Z="DISPLAY_NOTIFICATION_DRAWER",ee="HIDE_NOTIFICATION_DRAWER",te="LOGIN_SUCCESS",ne="LOGIN_FAILURE";function re(){return{type:J}}const oe=o.p+"24bab5d633e36ca8d17edc63164cf934.jpg";var ie=o(459),ae=o.n(ie),ue=o(236),le=o.n(ue);function se(e){return se="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},se(e)}function ce(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function fe(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter(function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),r.forEach(function(t){ce(e,t,n[t])})}return e}function de(e){return function(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}var pe=/([A-Z])/g,he=function(e){return"-".concat(e.toLowerCase())},ye={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridRow:!0,gridColumn:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},me=["Webkit","ms","Moz","O"];Object.keys(ye).forEach(function(e){me.forEach(function(t){ye[function(e,t){return e+t.charAt(0).toUpperCase()+t.substring(1)}(t,e)]=ye[e]})});var ve=function(e,t){return"number"==typeof t?ye[e]?""+t:t+"px":""+t},ge=function(e,t){return _e(ve(e,t))},be=function(e,t){return ae()(e).toString(36)},_e=function(e){return"!"===e[e.length-10]&&" !important"===e.slice(-11)?e:"".concat(e," !important")},we="undefined"!=typeof Map,Se=function(){function e(){this.elements={},this.keyOrder=[]}var t=e.prototype;return t.forEach=function(e){for(var t=0;t<this.keyOrder.length;t++)e(this.elements[this.keyOrder[t]],this.keyOrder[t])},t.set=function(t,n,r){if(this.elements.hasOwnProperty(t)){if(r){var o=this.keyOrder.indexOf(t);this.keyOrder.splice(o,1),this.keyOrder.push(t)}}else this.keyOrder.push(t);if(null!=n){if(we&&n instanceof Map||n instanceof e){var i=this.elements.hasOwnProperty(t)?this.elements[t]:new e;return n.forEach(function(e,t){i.set(t,e,r)}),void(this.elements[t]=i)}if(Array.isArray(n)||"object"!==se(n))this.elements[t]=n;else{for(var a=this.elements.hasOwnProperty(t)?this.elements[t]:new e,u=Object.keys(n),l=0;l<u.length;l+=1)a.set(u[l],n[u[l]],r);this.elements[t]=a}}else this.elements[t]=n},t.get=function(e){return this.elements[e]},t.has=function(e){return this.elements.hasOwnProperty(e)},t.addStyleType=function(t){var n=this;if(we&&t instanceof Map||t instanceof e)t.forEach(function(e,t){n.set(t,e,!0)});else for(var r=Object.keys(t),o=0;o<r.length;o++)this.set(r[o],t[r[o]],!0)},e}();function ke(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}function xe(e,t){return e(t={exports:{}},t.exports),t.exports}var Ee=xe(function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return e.charAt(0).toUpperCase()+e.slice(1)}});ke(Ee);var Oe=xe(function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,n){if(e.hasOwnProperty(t)){for(var o={},i=e[t],a=(0,r.default)(t),u=Object.keys(n),l=0;l<u.length;l++){var s=u[l];if(s===t)for(var c=0;c<i.length;c++)o[i[c]+a]=n[t];o[s]=n[s]}return o}return n};var n,r=(n=Ee)&&n.__esModule?n:{default:n}});ke(Oe);var Ce=xe(function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,n,r,o){for(var i=0,a=e.length;i<a;++i){var u=e[i](t,n,r,o);if(u)return u}}});ke(Ce);var Pe=xe(function(e,t){function n(e,t){-1===e.indexOf(t)&&e.push(t)}Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if(Array.isArray(t))for(var r=0,o=t.length;r<o;++r)n(e,t[r]);else n(e,t)}});ke(Pe);var ze=xe(function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return e instanceof Object&&!Array.isArray(e)}});ke(ze);var je=ke(xe(function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){var t=e.prefixMap,a=e.plugins;return function e(u){for(var l in u){var s=u[l];if((0,i.default)(s))u[l]=e(s);else if(Array.isArray(s)){for(var c=[],f=0,d=s.length;f<d;++f){var p=(0,r.default)(a,l,s[f],u,t);(0,o.default)(c,p||s[f])}c.length>0&&(u[l]=c)}else{var h=(0,r.default)(a,l,s,u,t);h&&(u[l]=h),u=(0,n.default)(t,l,u)}}return u}};var n=a(Oe),r=a(Ce),o=a(Pe),i=a(ze);function a(e){return e&&e.__esModule?e:{default:e}}})),Ie=ke(xe(function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if("string"==typeof t&&"text"===t)return["-webkit-text","text"]}})),Ne=xe(function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return"string"==typeof e&&n.test(e)};var n=/-webkit-|-moz-|-ms-/;e.exports=t.default});ke(Ne);var Te=xe(function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if("string"==typeof t&&!(0,r.default)(t)&&t.indexOf("calc(")>-1)return o.map(function(e){return t.replace(/calc\(/g,e+"calc(")})};var n,r=(n=Ne)&&n.__esModule?n:{default:n},o=["-webkit-","-moz-",""]}),Me=ke(Te),Re=xe(function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if("string"==typeof t&&!(0,r.default)(t)&&t.indexOf("cross-fade(")>-1)return o.map(function(e){return t.replace(/cross-fade\(/g,e+"cross-fade(")})};var n,r=(n=Ne)&&n.__esModule?n:{default:n},o=["-webkit-",""]}),De=ke(Re),Ae=xe(function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if("cursor"===e&&r.hasOwnProperty(t))return n.map(function(e){return e+t})};var n=["-webkit-","-moz-",""],r={"zoom-in":!0,"zoom-out":!0,grab:!0,grabbing:!0}}),Le=ke(Ae),Fe=xe(function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if("string"==typeof t&&!(0,r.default)(t)&&t.indexOf("filter(")>-1)return o.map(function(e){return t.replace(/filter\(/g,e+"filter(")})};var n,r=(n=Ne)&&n.__esModule?n:{default:n},o=["-webkit-",""]}),Be=ke(Fe),Ue=ke(xe(function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if("display"===e&&n.hasOwnProperty(t))return n[t]};var n={flex:["-webkit-box","-moz-box","-ms-flexbox","-webkit-flex","flex"],"inline-flex":["-webkit-inline-box","-moz-inline-box","-ms-inline-flexbox","-webkit-inline-flex","inline-flex"]}})),We=xe(function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,a){if(Object.prototype.hasOwnProperty.call(r,e)&&(a[r[e]]=n[t]||t),"flex"===e){if(Object.prototype.hasOwnProperty.call(o,t))return void(a.msFlex=o[t]);if(i.test(t))return void(a.msFlex=t+" 1 0%");var u=t.split(/\s/);switch(u.length){case 1:return void(a.msFlex="1 1 "+t);case 2:return void(i.test(u[1])?a.msFlex=u[0]+" "+u[1]+" 0%":a.msFlex=u[0]+" 1 "+u[1]);default:a.msFlex=t}}};var n={"space-around":"distribute","space-between":"justify","flex-start":"start","flex-end":"end"},r={alignContent:"msFlexLinePack",alignSelf:"msFlexItemAlign",alignItems:"msFlexAlign",justifyContent:"msFlexPack",order:"msFlexOrder",flexGrow:"msFlexPositive",flexShrink:"msFlexNegative",flexBasis:"msFlexPreferredSize"},o={auto:"1 1 auto",inherit:"inherit",initial:"0 1 auto",none:"0 0 auto",unset:"unset"},i=/^\d+(\.\d+)?$/}),qe=ke(We),$e=ke(xe(function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,o){"flexDirection"===e&&"string"==typeof t&&(t.indexOf("column")>-1?o.WebkitBoxOrient="vertical":o.WebkitBoxOrient="horizontal",t.indexOf("reverse")>-1?o.WebkitBoxDirection="reverse":o.WebkitBoxDirection="normal"),r.hasOwnProperty(e)&&(o[r[e]]=n[t]||t)};var n={"space-around":"justify","space-between":"justify","flex-start":"start","flex-end":"end","wrap-reverse":"multiple",wrap:"multiple"},r={alignItems:"WebkitBoxAlign",justifyContent:"WebkitBoxPack",flexWrap:"WebkitBoxLines",flexGrow:"WebkitBoxFlex"}})),Ve=xe(function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if("string"==typeof t&&!(0,r.default)(t)&&i.test(t))return o.map(function(e){return t.replace(i,function(t){return e+t})})};var n,r=(n=Ne)&&n.__esModule?n:{default:n},o=["-webkit-","-moz-",""],i=/linear-gradient|radial-gradient|repeating-linear-gradient|repeating-radial-gradient/gi}),He=ke(Ve),Ke=xe(function(e,t){Object.defineProperty(t,"__esModule",{value:!0});var n=function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var n=[],r=!0,o=!1,i=void 0;try{for(var a,u=e[Symbol.iterator]();!(r=(a=u.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{!r&&u.return&&u.return()}finally{if(o)throw i}}return n}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")};function r(e){return"number"==typeof e&&!isNaN(e)}t.default=function(e,t,n){if("display"===e&&t in i)return i[t];e in a&&(0,a[e])(t,n)};var o=["center","end","start","stretch"],i={"inline-grid":["-ms-inline-grid","inline-grid"],grid:["-ms-grid","grid"]},a={alignSelf:function(e,t){o.indexOf(e)>-1&&(t.msGridRowAlign=e)},gridColumn:function(e,t){if(r(e))t.msGridColumn=e;else{var o=e.split("/").map(function(e){return+e}),i=n(o,2),u=i[0],l=i[1];a.gridColumnStart(u,t),a.gridColumnEnd(l,t)}},gridColumnEnd:function(e,t){var n=t.msGridColumn;r(e)&&r(n)&&(t.msGridColumnSpan=e-n)},gridColumnStart:function(e,t){r(e)&&(t.msGridColumn=e)},gridRow:function(e,t){if(r(e))t.msGridRow=e;else{var o=e.split("/").map(function(e){return+e}),i=n(o,2),u=i[0],l=i[1];a.gridRowStart(u,t),a.gridRowEnd(l,t)}},gridRowEnd:function(e,t){var n=t.msGridRow;r(e)&&r(n)&&(t.msGridRowSpan=e-n)},gridRowStart:function(e,t){r(e)&&(t.msGridRow=e)},gridTemplateColumns:function(e,t){t.msGridColumns=e},gridTemplateRows:function(e,t){t.msGridRows=e},justifySelf:function(e,t){o.indexOf(e)>-1&&(t.msGridColumnAlign=e)}}}),Qe=ke(Ke),Ge=xe(function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if("string"==typeof t&&!(0,r.default)(t)&&t.indexOf("image-set(")>-1)return o.map(function(e){return t.replace(/image-set\(/g,e+"image-set(")})};var n,r=(n=Ne)&&n.__esModule?n:{default:n},o=["-webkit-",""]}),Ye=ke(Ge),Xe=ke(xe(function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,r){if(Object.prototype.hasOwnProperty.call(n,e))for(var o=n[e],i=0,a=o.length;i<a;++i)r[o[i]]=t};var n={marginBlockStart:["WebkitMarginBefore"],marginBlockEnd:["WebkitMarginAfter"],marginInlineStart:["WebkitMarginStart","MozMarginStart"],marginInlineEnd:["WebkitMarginEnd","MozMarginEnd"],paddingBlockStart:["WebkitPaddingBefore"],paddingBlockEnd:["WebkitPaddingAfter"],paddingInlineStart:["WebkitPaddingStart","MozPaddingStart"],paddingInlineEnd:["WebkitPaddingEnd","MozPaddingEnd"],borderBlockStart:["WebkitBorderBefore"],borderBlockStartColor:["WebkitBorderBeforeColor"],borderBlockStartStyle:["WebkitBorderBeforeStyle"],borderBlockStartWidth:["WebkitBorderBeforeWidth"],borderBlockEnd:["WebkitBorderAfter"],borderBlockEndColor:["WebkitBorderAfterColor"],borderBlockEndStyle:["WebkitBorderAfterStyle"],borderBlockEndWidth:["WebkitBorderAfterWidth"],borderInlineStart:["WebkitBorderStart","MozBorderStart"],borderInlineStartColor:["WebkitBorderStartColor","MozBorderStartColor"],borderInlineStartStyle:["WebkitBorderStartStyle","MozBorderStartStyle"],borderInlineStartWidth:["WebkitBorderStartWidth","MozBorderStartWidth"],borderInlineEnd:["WebkitBorderEnd","MozBorderEnd"],borderInlineEndColor:["WebkitBorderEndColor","MozBorderEndColor"],borderInlineEndStyle:["WebkitBorderEndStyle","MozBorderEndStyle"],borderInlineEndWidth:["WebkitBorderEndWidth","MozBorderEndWidth"]}})),Je=ke(xe(function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if("position"===e&&"sticky"===t)return["-webkit-sticky","sticky"]}})),Ze=xe(function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if(r.hasOwnProperty(e)&&o.hasOwnProperty(t))return n.map(function(e){return e+t})};var n=["-webkit-","-moz-",""],r={maxHeight:!0,maxWidth:!0,width:!0,height:!0,columnWidth:!0,minWidth:!0,minHeight:!0},o={"min-content":!0,"max-content":!0,"fill-available":!0,"fit-content":!0,"contain-floats":!0}}),et=ke(Ze),tt=/[A-Z]/g,nt=/^ms-/,rt={};function ot(e){return"-"+e.toLowerCase()}var it,at=(it=Object.freeze({default:function(e){if(rt.hasOwnProperty(e))return rt[e];var t=e.replace(tt,ot);return rt[e]=nt.test(t)?"-"+t:t}}))&&it.default||it,ut=xe(function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return(0,r.default)(e)};var n,r=(n=at)&&n.__esModule?n:{default:n};e.exports=t.default});ke(ut);var lt=xe(function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,i,l){if("string"==typeof t&&a.hasOwnProperty(e)){var s=function(e,t){if((0,r.default)(e))return e;for(var o=e.split(/,(?![^()]*(?:\([^()]*\))?\))/g),i=0,a=o.length;i<a;++i){var l=o[i],s=[l];for(var c in t){var f=(0,n.default)(c);if(l.indexOf(f)>-1&&"order"!==f)for(var d=t[c],p=0,h=d.length;p<h;++p)s.unshift(l.replace(f,u[d[p]]+f))}o[i]=s.join(",")}return o.join(",")}(t,l),c=s.split(/,(?![^()]*(?:\([^()]*\))?\))/g).filter(function(e){return!/-moz-|-ms-/.test(e)}).join(",");if(e.indexOf("Webkit")>-1)return c;var f=s.split(/,(?![^()]*(?:\([^()]*\))?\))/g).filter(function(e){return!/-webkit-|-ms-/.test(e)}).join(",");return e.indexOf("Moz")>-1?f:(i["Webkit"+(0,o.default)(e)]=c,i["Moz"+(0,o.default)(e)]=f,s)}};var n=i(ut),r=i(Ne),o=i(Ee);function i(e){return e&&e.__esModule?e:{default:e}}var a={transition:!0,transitionProperty:!0,WebkitTransition:!0,WebkitTransitionProperty:!0,MozTransition:!0,MozTransitionProperty:!0},u={Webkit:"-webkit-",Moz:"-moz-",ms:"-ms-"}}),st=["Webkit"],ct=["Moz"],ft=["ms"],dt=["Webkit","Moz"],pt=["Webkit","ms"],ht=["Webkit","Moz","ms"],yt=je({plugins:[Ie,Me,De,Le,Be,Ue,qe,$e,He,Qe,Ye,Xe,Je,et,ke(lt)],prefixMap:{transform:pt,transformOrigin:pt,transformOriginX:pt,transformOriginY:pt,backfaceVisibility:st,perspective:st,perspectiveOrigin:st,transformStyle:st,transformOriginZ:st,animation:st,animationDelay:st,animationDirection:st,animationFillMode:st,animationDuration:st,animationIterationCount:st,animationName:st,animationPlayState:st,animationTimingFunction:st,appearance:dt,userSelect:ht,fontKerning:st,textEmphasisPosition:st,textEmphasis:st,textEmphasisStyle:st,textEmphasisColor:st,boxDecorationBreak:st,clipPath:st,maskImage:st,maskMode:st,maskRepeat:st,maskPosition:st,maskClip:st,maskOrigin:st,maskSize:st,maskComposite:st,mask:st,maskBorderSource:st,maskBorderMode:st,maskBorderSlice:st,maskBorderWidth:st,maskBorderOutset:st,maskBorderRepeat:st,maskBorder:st,maskType:st,textDecorationStyle:dt,textDecorationSkip:dt,textDecorationLine:dt,textDecorationColor:dt,filter:st,fontFeatureSettings:dt,breakAfter:ht,breakBefore:ht,breakInside:ht,columnCount:dt,columnFill:dt,columnGap:dt,columnRule:dt,columnRuleColor:dt,columnRuleStyle:dt,columnRuleWidth:dt,columns:dt,columnSpan:dt,columnWidth:dt,writingMode:pt,flex:pt,flexBasis:st,flexDirection:pt,flexGrow:st,flexFlow:pt,flexShrink:st,flexWrap:pt,alignContent:st,alignItems:st,alignSelf:st,justifyContent:st,order:st,transitionDelay:st,transitionDuration:st,transitionProperty:st,transitionTimingFunction:st,backdropFilter:st,scrollSnapType:pt,scrollSnapPointsX:pt,scrollSnapPointsY:pt,scrollSnapDestination:pt,scrollSnapCoordinate:pt,shapeImageThreshold:st,shapeImageMargin:st,shapeImageOutside:st,hyphens:ht,flowInto:pt,flowFrom:pt,regionFragment:pt,textOrientation:st,boxSizing:ct,textAlignLast:ct,tabSize:ct,wrapFlow:ft,wrapThrough:ft,wrapMargin:ft,touchAction:ft,textSizeAdjust:pt,borderImage:st,borderImageOutset:st,borderImageRepeat:st,borderImageSlice:st,borderImageSource:st,borderImageWidth:st}}),mt=[function(e,t,n){return":"!==e[0]?null:n(t+e)},function(e,t,n){if("@"!==e[0])return null;var r=n(t);return["".concat(e,"{").concat(r.join(""),"}")]}],vt=function e(t,n,r,o,i){for(var a=new Se,u=0;u<n.length;u++)a.addStyleType(n[u]);var l=new Se,s=[];a.forEach(function(n,a){r.some(function(u){var l=u(a,t,function(t){return e(t,[n],r,o,i)});if(null!=l)return Array.isArray(l)?s.push.apply(s,de(l)):(console.warn("WARNING: Selector handlers should return an array of rules.Returning a string containing multiple rules is deprecated.",u),s.push("@media all {".concat(l,"}"))),!0})||l.set(a,n,!0)});var c=_t(t,l,o,i,r);return c&&s.unshift(c),s},gt=function(e,t,n){return"".concat((r=e,o=r.replace(pe,he),"m"===o[0]&&"s"===o[1]&&"-"===o[2]?"-".concat(o):o),":").concat(n(e,t),";");var r,o},bt=function(e,t){return e[t]=!0,e},_t=function(e,t,n,r,o){!function(e,t,n){if(t)for(var r=Object.keys(t),o=0;o<r.length;o++){var i=r[o];e.has(i)&&e.set(i,t[i](e.get(i),n),!1)}}(t,n,o);var i=Object.keys(t.elements).reduce(bt,Object.create(null)),a=yt(t.elements),u=Object.keys(a);if(u.length!==t.keyOrder.length)for(var l=0;l<u.length;l++)if(!i[u[l]]){var s;if((s="W"===u[l][0]?u[l][6].toLowerCase()+u[l].slice(7):"o"===u[l][1]?u[l][3].toLowerCase()+u[l].slice(4):u[l][2].toLowerCase()+u[l].slice(3))&&i[s]){var c=t.keyOrder.indexOf(s);t.keyOrder.splice(c,0,u[l])}else t.keyOrder.unshift(u[l])}for(var f=!1===r?ve:ge,d=[],p=0;p<t.keyOrder.length;p++){var h=t.keyOrder[p],y=a[h];if(Array.isArray(y))for(var m=0;m<y.length;m++)d.push(gt(h,y[m],f));else d.push(gt(h,y,f))}return d.length?"".concat(e,"{").concat(d.join(""),"}"):""},wt=null,St={fontFamily:function e(t){if(Array.isArray(t)){var n={};return t.forEach(function(t){n[e(t)]=!0}),Object.keys(n).join(",")}return"object"===se(t)?(Ct(t.src,"@font-face",[t],!1),'"'.concat(t.fontFamily,'"')):t},animationName:function e(t,n){if(Array.isArray(t))return t.map(function(t){return e(t,n)}).join(",");if("object"===se(t)){var r="keyframe_".concat((i=t,be(JSON.stringify(i)))),o="@keyframes ".concat(r,"{");return t instanceof Se?t.forEach(function(e,t){o+=vt(t,[e],n,St,!1).join("")}):Object.keys(t).forEach(function(e){o+=vt(e,[t[e]],n,St,!1).join("")}),Ot(r,[o+="}"]),r}return t;var i}},kt={},xt=[],Et=!1,Ot=function(e,t){var n;if(!kt[e]){if(!Et){if("undefined"==typeof document)throw new Error("Cannot automatically buffer without a document");Et=!0,le()(It)}(n=xt).push.apply(n,de(t)),kt[e]=!0}},Ct=function(e,t,n,r){var o=arguments.length>4&&void 0!==arguments[4]?arguments[4]:[];if(!kt[e]){var i=vt(t,n,o,St,r);Ot(e,i)}},Pt=function(){xt=[],kt={},Et=!1,wt=null},zt=function(e){delete kt[e]},jt=function(){Et=!1;var e=xt;return xt=[],e},It=function(){var e=jt();e.length>0&&function(e){if(null==wt&&null==(wt=document.querySelector("style[data-aphrodite]"))){var t=document.head||document.getElementsByTagName("head")[0];(wt=document.createElement("style")).type="text/css",wt.setAttribute("data-aphrodite",""),t.appendChild(wt)}var n=wt.styleSheet||wt.sheet;if(n.insertRule){var r=n.cssRules.length;e.forEach(function(e){try{n.insertRule(e,r),r+=1}catch(e){}})}else wt.innerText=(wt.innerText||"")+e.join("")}(e)},Nt=function(e){return"_definition"in e&&"_name"in e&&"_len"in e},Tt=function e(t,n,r,o){for(var i=0;i<t.length;i+=1)if(t[i])if(Array.isArray(t[i]))o+=e(t[i],n,r,o);else{if(!Nt(t[i]))throw new Error("Invalid Style Definition: Styles should be defined using the StyleSheet.create method.");n.push(t[i]._name),r.push(t[i]._definition),o+=t[i]._len}return o},Mt=function(e,t,n){var r,o=[],i=[],a=Tt(t,o,i,0);return 0===o.length?"":(r=1===o.length?"_".concat(o[0]):"_".concat(be(o.join())).concat((a%36).toString(36)),Ct(r,".".concat(r),i,e,n),r)},Rt=function(e,t){return"".concat(t,"_").concat(be(e))},Dt=be,At={create:function(e){for(var t={},n=Object.keys(e),r=0;r<n.length;r+=1){var o=n[r],i=e[o],a=JSON.stringify(i);t[o]={_len:a.length,_name:Dt(a,o),_definition:i}}return t},rehydrate:function(){(arguments.length>0&&void 0!==arguments[0]?arguments[0]:[]).forEach(function(e){kt[e]=!0})}},Lt="undefined"!=typeof window?null:{renderStatic:function(e){return Pt(),function(){if(Et)throw new Error("Cannot buffer while already buffering");Et=!0}(),{html:e(),css:{content:jt().join(""),renderedClassNames:Object.keys(kt)}}}},Ft=function e(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:mt;return{StyleSheet:fe({},At,{extend:function(r){var o=r.map(function(e){return e.selectorHandler}).filter(function(e){return e});return e(t,n.concat(o))}}),StyleSheetServer:Lt,StyleSheetTestUtils:null,minify:function(e){Dt=e?be:Rt},css:function(){for(var e=arguments.length,r=new Array(e),o=0;o<e;o++)r[o]=arguments[o];return Mt(t,r,n)},flushToStyleTag:It,injectAndGetClassName:Mt,defaultSelectorHandlers:mt,reset:Pt,resetInjectedStyle:zt}}(!0),Bt=Ft.StyleSheet,Ut=(Ft.StyleSheetServer,Ft.StyleSheetTestUtils,Ft.css);function Wt(e){return Wt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Wt(e)}function qt(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,$t(r.key),r)}}function $t(e){var t=function(e){if("object"!=Wt(e)||!e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var n=t.call(e,"string");if("object"!=Wt(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==Wt(t)?t:t+""}function Vt(){try{var e=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){}))}catch(e){}return(Vt=function(){return!!e})()}function Ht(e){return Ht=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},Ht(e)}function Kt(e,t){return Kt=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},Kt(e,t)}Ft.minify,Ft.flushToStyleTag,Ft.injectAndGetClassName,Ft.defaultSelectorHandlers,Ft.reset,Ft.resetInjectedStyle;var Qt=function(t){function n(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,n),function(e,t,n){return t=Ht(t),function(e,t){if(t&&("object"==Wt(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}(e,Vt()?Reflect.construct(t,n||[],Ht(e).constructor):t.apply(e,n))}(this,n,arguments)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&Kt(e,t)}(n,t),r=n,o=[{key:"render",value:function(){var t=this.props,n=t.user,r=t.logout;return e.createElement(e.Fragment,null,e.createElement("div",{className:Ut(Yt.header)},e.createElement("img",{src:oe,alt:"logo",className:Ut(Yt.headerImg)}),e.createElement("h1",null,"School dashboard")),n&&n.isLoggedIn&&e.createElement("section",{id:"logoutSection",className:Ut(Yt.logoutSection)},"Welcome ",n.email," (",e.createElement("a",{href:"#",onClick:function(e){e.preventDefault(),r()},className:Ut(Yt.logoutLink)},"logout"),")"))}}],o&&qt(r.prototype,o),Object.defineProperty(r,"prototype",{writable:!1}),r;var r,o}(e.Component);Qt.propTypes={user:Y().object,logout:Y().func},Qt.defaultProps={user:null,logout:function(){}};const Gt=q(function(e){return{user:e.ui.get("user")}},{logout:re})(Qt);var Yt=Bt.create({header:{fontSize:"1.4rem",color:"#e0354b",display:"flex",alignItems:"center",borderBottom:"3px solid #e0354b"},headerImg:{width:"200px",height:"200px"},logoutSection:{color:"#000",fontSize:"1rem",fontStyle:"italic",margin:"10px 0"},logoutLink:{color:"#e0354b",cursor:"pointer",textDecoration:"underline"}}),Xt=o(691),Jt=o.n(Xt),Zt=o(825),en=o.n(Zt),tn=o(659),nn=o.n(tn),rn=o(56),on=o.n(rn),an=o(159),un=o.n(an),ln=o(113),sn=o.n(ln),cn=o(126),fn={};function dn(t){var n=t.user;return e.createElement("div",{className:"App-footer"},e.createElement("p",null,"Copyright ",(new Date).getFullYear()," - ","ALX main dashboard"),n&&n.isLoggedIn&&e.createElement("p",null,e.createElement("a",{href:"#"},"Contact us")))}fn.styleTagTransform=sn(),fn.setAttributes=on(),fn.insert=nn().bind(null,"head"),fn.domAPI=en(),fn.insertStyleElement=un(),Jt()(cn.A,fn),cn.A&&cn.A.locals&&cn.A.locals,dn.propTypes={user:Y().object},dn.defaultProps={user:null};const pn=q(function(e){return{user:e.ui.get("user")}})(dn);function hn(e){return hn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},hn(e)}function yn(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,mn(r.key),r)}}function mn(e){var t=function(e){if("object"!=hn(e)||!e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var n=t.call(e,"string");if("object"!=hn(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==hn(t)?t:t+""}function vn(){try{var e=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){}))}catch(e){}return(vn=function(){return!!e})()}function gn(e){return gn=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},gn(e)}function bn(e,t){return bn=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},bn(e,t)}var _n=function(t){function n(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,n),(t=function(e,t,n){return t=gn(t),function(e,t){if(t&&("object"==hn(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}(e,vn()?Reflect.construct(t,n||[],gn(e).constructor):t.apply(e,n))}(this,n,[e])).state={email:"",password:"",enableSubmit:!1},t.handleLoginSubmit=t.handleLoginSubmit.bind(t),t.handleChangeEmail=t.handleChangeEmail.bind(t),t.handleChangePassword=t.handleChangePassword.bind(t),t}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&bn(e,t)}(n,t),r=n,(o=[{key:"handleLoginSubmit",value:function(e){e.preventDefault();var t=this.state,n=t.email,r=t.password;this.props.logIn(n,r)}},{key:"handleChangeEmail",value:function(e){var t=this,n=e.target.value;this.setState({email:n},function(){t.updateSubmitButton()})}},{key:"handleChangePassword",value:function(e){var t=this,n=e.target.value;this.setState({password:n},function(){t.updateSubmitButton()})}},{key:"updateSubmitButton",value:function(){var e=this.state,t=e.email,n=e.password;this.setState({enableSubmit:""!==t&&""!==n})}},{key:"render",value:function(){var t=this.state,n=t.email,r=t.password,o=t.enableSubmit;return e.createElement(e.Fragment,null,e.createElement("div",{className:Ut(Sn.body)},e.createElement("p",null,"Login to access the full dashboard"),e.createElement("form",{className:Ut(Sn.form),onSubmit:this.handleLoginSubmit},e.createElement("div",{className:Ut(Sn.inputGroup)},e.createElement("label",{htmlFor:"email",className:Ut(Sn.label)},"Email:"),e.createElement("input",{type:"email",name:"email",id:"email",value:n,onChange:this.handleChangeEmail,className:Ut(Sn.input)})),e.createElement("div",{className:Ut(Sn.inputGroup)},e.createElement("label",{htmlFor:"password",className:Ut(Sn.label)},"Password:"),e.createElement("input",{type:"password",name:"password",id:"password",value:r,onChange:this.handleChangePassword,className:Ut(Sn.input)})),e.createElement("input",{type:"submit",value:"OK",disabled:!o,className:Ut(Sn.button)}))))}}])&&yn(r.prototype,o),Object.defineProperty(r,"prototype",{writable:!1}),r;var r,o}(e.Component);_n.propTypes={logIn:Y().func},_n.defaultProps={logIn:function(){}};const wn=_n;var Sn=Bt.create({body:{fontSize:"1rem",height:"45%"},form:{display:"flex",alignItems:"center",flexDirection:"row","@media (max-width: 900px)":{flexDirection:"column"}},inputGroup:{display:"flex",alignItems:"center",flexDirection:"row",margin:"10px",marginBottom:"10px","@media (max-width: 900px)":{flexDirection:"column"}},label:{marginRight:"5px","@media (max-width: 900px)":{marginBottom:"5px"}},input:{padding:"8px",borderRadius:"8px",border:"1px solid #ccc",width:"200px","@media (max-width: 900px)":{margin:"0 0 10px 0",width:"100%"}},button:{width:"80px",height:"40px",borderRadius:"8px",backgroundColor:"darkgrey",color:"white",border:"none",cursor:"pointer",transition:"all .3s linear",":hover":{backgroundColor:"gray"},":disabled":{backgroundColor:"#ccc",cursor:"not-allowed"},"@media (max-width: 900px)":{width:"80px",marginTop:"10px"}}});function kn(t){var n=t.isHeader,r=t.textFirstCell,o=t.textSecondCell,i=t.isChecked,a=t.onChangeRow,u=t.id;return e.createElement("tr",{className:Ut(n?xn.headerRow:xn.defaultRow,i&&xn.rowChecked)},n?null===o?e.createElement("th",{colSpan:"2",className:Ut(xn.thDefault)},r):e.createElement(e.Fragment,null,e.createElement("th",{className:Ut(xn.thDefault,xn.thFirstChild)},r),e.createElement("th",{className:Ut(xn.thDefault)},o)):e.createElement(e.Fragment,null,e.createElement("td",{className:Ut(xn.tdDefault)},e.createElement("input",{type:"checkbox",checked:i||!1,onChange:function(){a(u,!i)}}),r),e.createElement("td",{className:Ut(xn.tdDefault)},o)))}var xn=Bt.create({headerRow:{backgroundColor:"#deb5b545"},defaultRow:{backgroundColor:"#f5f5f5ab"},rowChecked:{backgroundColor:"#e6e4e4"},thDefault:{borderBottom:"2px solid lightgray",padding:"0.5rem"},thFirstChild:{textAlign:"left"},tdDefault:{padding:"0.5rem"}});kn.propTypes={isHeader:Y().bool,textFirstCell:Y().string.isRequired,textSecondCell:Y().oneOfType([Y().string,Y().number]),isChecked:Y().bool,onChangeRow:Y().func,id:Y().oneOfType([Y().string,Y().number])},kn.defaultProps={isHeader:!1,textSecondCell:null,isChecked:!1,onChangeRow:function(){},id:null};const En=kn;var On="SELECT_COURSE",Cn="UNSELECT_COURSE",Pn="FETCH_COURSE_SUCCESS";var zn="delete",jn=32,In=31,Nn={};function Tn(e){e&&(e.value=!0)}function Mn(){}function Rn(e){return void 0===e.size&&(e.size=e.__iterate(An)),e.size}function Dn(e,t){if("number"!=typeof t){var n=t>>>0;if(""+n!==t||4294967295===n)return NaN;t=n}return t<0?Rn(e)+t:t}function An(){return!0}function Ln(e,t,n){return(0===e&&!Wn(e)||void 0!==n&&e<=-n)&&(void 0===t||void 0!==n&&t>=n)}function Fn(e,t){return Un(e,t,0)}function Bn(e,t){return Un(e,t,t)}function Un(e,t,n){return void 0===e?n:Wn(e)?t===1/0?t:0|Math.max(0,t+e):void 0===t||t===e?e:0|Math.min(t,e)}function Wn(e){return e<0||0===e&&1/e==-1/0}var qn="@@__IMMUTABLE_ITERABLE__@@";function $n(e){return Boolean(e&&e[qn])}var Vn="@@__IMMUTABLE_KEYED__@@";function Hn(e){return Boolean(e&&e[Vn])}var Kn="@@__IMMUTABLE_INDEXED__@@";function Qn(e){return Boolean(e&&e[Kn])}function Gn(e){return Hn(e)||Qn(e)}var Yn=function(e){return $n(e)?e:br(e)},Xn=function(e){function t(e){return Hn(e)?e:_r(e)}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t}(Yn),Jn=function(e){function t(e){return Qn(e)?e:wr(e)}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t}(Yn),Zn=function(e){function t(e){return $n(e)&&!Gn(e)?e:Sr(e)}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t}(Yn);Yn.Keyed=Xn,Yn.Indexed=Jn,Yn.Set=Zn;var er="@@__IMMUTABLE_SEQ__@@";function tr(e){return Boolean(e&&e[er])}var nr="@@__IMMUTABLE_RECORD__@@";function rr(e){return Boolean(e&&e[nr])}function or(e){return $n(e)||rr(e)}var ir="@@__IMMUTABLE_ORDERED__@@";function ar(e){return Boolean(e&&e[ir])}var ur="function"==typeof Symbol&&Symbol.iterator,lr="@@iterator",sr=ur||lr,cr=function(e){this.next=e};function fr(e,t,n,r){var o=0===e?t:1===e?n:[t,n];return r?r.value=o:r={value:o,done:!1},r}function dr(){return{value:void 0,done:!0}}function pr(e){return!!Array.isArray(e)||!!mr(e)}function hr(e){return e&&"function"==typeof e.next}function yr(e){var t=mr(e);return t&&t.call(e)}function mr(e){var t=e&&(ur&&e[ur]||e[lr]);if("function"==typeof t)return t}cr.prototype.toString=function(){return"[Iterator]"},cr.KEYS=0,cr.VALUES=1,cr.ENTRIES=2,cr.prototype.inspect=cr.prototype.toSource=function(){return this.toString()},cr.prototype[sr]=function(){return this};var vr=Object.prototype.hasOwnProperty;function gr(e){return!(!Array.isArray(e)&&"string"!=typeof e)||e&&"object"==typeof e&&Number.isInteger(e.length)&&e.length>=0&&(0===e.length?1===Object.keys(e).length:e.hasOwnProperty(e.length-1))}var br=function(e){function t(e){return null==e?Cr():or(e)?e.toSeq():function(e){var t,n,r=jr(e);if(r)return(n=mr(t=e))&&n===t.entries?r.fromEntrySeq():function(e){var t=mr(e);return t&&t===e.keys}(e)?r.toSetSeq():r;if("object"==typeof e)return new xr(e);throw new TypeError("Expected Array or collection object of values, or keyed object: "+e)}(e)}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.prototype.toSeq=function(){return this},t.prototype.toString=function(){return this.__toString("Seq {","}")},t.prototype.cacheResult=function(){return!this._cache&&this.__iterateUncached&&(this._cache=this.entrySeq().toArray(),this.size=this._cache.length),this},t.prototype.__iterate=function(e,t){var n=this._cache;if(n){for(var r=n.length,o=0;o!==r;){var i=n[t?r-++o:o++];if(!1===e(i[1],i[0],this))break}return o}return this.__iterateUncached(e,t)},t.prototype.__iterator=function(e,t){var n=this._cache;if(n){var r=n.length,o=0;return new cr(function(){if(o===r)return{value:void 0,done:!0};var i=n[t?r-++o:o++];return fr(e,i[0],i[1])})}return this.__iteratorUncached(e,t)},t}(Yn),_r=function(e){function t(e){return null==e?Cr().toKeyedSeq():$n(e)?Hn(e)?e.toSeq():e.fromEntrySeq():rr(e)?e.toSeq():Pr(e)}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.prototype.toKeyedSeq=function(){return this},t}(br),wr=function(e){function t(e){return null==e?Cr():$n(e)?Hn(e)?e.entrySeq():e.toIndexedSeq():rr(e)?e.toSeq().entrySeq():zr(e)}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.of=function(){return t(arguments)},t.prototype.toIndexedSeq=function(){return this},t.prototype.toString=function(){return this.__toString("Seq [","]")},t}(br),Sr=function(e){function t(e){return($n(e)&&!Gn(e)?e:wr(e)).toSetSeq()}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.of=function(){return t(arguments)},t.prototype.toSetSeq=function(){return this},t}(br);br.isSeq=tr,br.Keyed=_r,br.Set=Sr,br.Indexed=wr,br.prototype[er]=!0;var kr=function(e){function t(e){this._array=e,this.size=e.length}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.prototype.get=function(e,t){return this.has(e)?this._array[Dn(this,e)]:t},t.prototype.__iterate=function(e,t){for(var n=this._array,r=n.length,o=0;o!==r;){var i=t?r-++o:o++;if(!1===e(n[i],i,this))break}return o},t.prototype.__iterator=function(e,t){var n=this._array,r=n.length,o=0;return new cr(function(){if(o===r)return{value:void 0,done:!0};var i=t?r-++o:o++;return fr(e,i,n[i])})},t}(wr),xr=function(e){function t(e){var t=Object.keys(e).concat(Object.getOwnPropertySymbols?Object.getOwnPropertySymbols(e):[]);this._object=e,this._keys=t,this.size=t.length}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.prototype.get=function(e,t){return void 0===t||this.has(e)?this._object[e]:t},t.prototype.has=function(e){return vr.call(this._object,e)},t.prototype.__iterate=function(e,t){for(var n=this._object,r=this._keys,o=r.length,i=0;i!==o;){var a=r[t?o-++i:i++];if(!1===e(n[a],a,this))break}return i},t.prototype.__iterator=function(e,t){var n=this._object,r=this._keys,o=r.length,i=0;return new cr(function(){if(i===o)return{value:void 0,done:!0};var a=r[t?o-++i:i++];return fr(e,a,n[a])})},t}(_r);xr.prototype[ir]=!0;var Er,Or=function(e){function t(e){this._collection=e,this.size=e.length||e.size}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.prototype.__iterateUncached=function(e,t){if(t)return this.cacheResult().__iterate(e,t);var n=yr(this._collection),r=0;if(hr(n))for(var o;!(o=n.next()).done&&!1!==e(o.value,r++,this););return r},t.prototype.__iteratorUncached=function(e,t){if(t)return this.cacheResult().__iterator(e,t);var n=yr(this._collection);if(!hr(n))return new cr(dr);var r=0;return new cr(function(){var t=n.next();return t.done?t:fr(e,r++,t.value)})},t}(wr);function Cr(){return Er||(Er=new kr([]))}function Pr(e){var t=jr(e);if(t)return t.fromEntrySeq();if("object"==typeof e)return new xr(e);throw new TypeError("Expected Array or collection object of [k, v] entries, or keyed object: "+e)}function zr(e){var t=jr(e);if(t)return t;throw new TypeError("Expected Array or collection object of values: "+e)}function jr(e){return gr(e)?new kr(e):pr(e)?new Or(e):void 0}var Ir="@@__IMMUTABLE_MAP__@@";function Nr(e){return Boolean(e&&e[Ir])}function Tr(e){return Nr(e)&&ar(e)}function Mr(e){return Boolean(e&&"function"==typeof e.equals&&"function"==typeof e.hashCode)}function Rr(e,t){if(e===t||e!=e&&t!=t)return!0;if(!e||!t)return!1;if("function"==typeof e.valueOf&&"function"==typeof t.valueOf){if((e=e.valueOf())===(t=t.valueOf())||e!=e&&t!=t)return!0;if(!e||!t)return!1}return!!(Mr(e)&&Mr(t)&&e.equals(t))}var Dr="function"==typeof Math.imul&&-2===Math.imul(4294967295,2)?Math.imul:function(e,t){var n=65535&(e|=0),r=65535&(t|=0);return n*r+((e>>>16)*r+n*(t>>>16)<<16>>>0)|0};function Ar(e){return e>>>1&1073741824|3221225471&e}var Lr=Object.prototype.valueOf;function Fr(e){if(null==e)return Br(e);if("function"==typeof e.hashCode)return Ar(e.hashCode(e));var t,n,r,o=(t=e).valueOf!==Lr&&"function"==typeof t.valueOf?t.valueOf(t):t;if(null==o)return Br(o);switch(typeof o){case"boolean":return o?1108378657:1108378656;case"number":return function(e){if(e!=e||e===1/0)return 0;var t=0|e;for(t!==e&&(t^=4294967295*e);e>4294967295;)t^=e/=4294967295;return Ar(t)}(o);case"string":return o.length>Yr?(void 0===(r=Zr[n=o])&&(r=Ur(n),Jr===Xr&&(Jr=0,Zr={}),Jr++,Zr[n]=r),r):Ur(o);case"object":case"function":return function(e){var t;if(Hr&&void 0!==(t=Vr.get(e)))return t;if(void 0!==(t=e[Gr]))return t;if(!qr){if(void 0!==(t=e.propertyIsEnumerable&&e.propertyIsEnumerable[Gr]))return t;if(void 0!==(t=function(e){if(e&&e.nodeType>0)switch(e.nodeType){case 1:return e.uniqueID;case 9:return e.documentElement&&e.documentElement.uniqueID}}(e)))return t}if(t=$r(),Hr)Vr.set(e,t);else{if(void 0!==Wr&&!1===Wr(e))throw new Error("Non-extensible objects are not allowed as keys.");if(qr)Object.defineProperty(e,Gr,{enumerable:!1,configurable:!1,writable:!1,value:t});else if(void 0!==e.propertyIsEnumerable&&e.propertyIsEnumerable===e.constructor.prototype.propertyIsEnumerable)e.propertyIsEnumerable=function(){return this.constructor.prototype.propertyIsEnumerable.apply(this,arguments)},e.propertyIsEnumerable[Gr]=t;else{if(void 0===e.nodeType)throw new Error("Unable to set a non-enumerable property on object.");e[Gr]=t}}return t}(o);case"symbol":return function(e){var t=Kr[e];return void 0!==t||(t=$r(),Kr[e]=t),t}(o);default:if("function"==typeof o.toString)return Ur(o.toString());throw new Error("Value type "+typeof o+" cannot be hashed.")}}function Br(e){return null===e?1108378658:1108378659}function Ur(e){for(var t=0,n=0;n<e.length;n++)t=31*t+e.charCodeAt(n)|0;return Ar(t)}var Wr=Object.isExtensible,qr=function(){try{return Object.defineProperty({},"@",{}),!0}catch(e){return!1}}();function $r(){var e=++Qr;return 1073741824&Qr&&(Qr=0),e}var Vr,Hr="function"==typeof WeakMap;Hr&&(Vr=new WeakMap);var Kr=Object.create(null),Qr=0,Gr="__immutablehash__";"function"==typeof Symbol&&(Gr=Symbol(Gr));var Yr=16,Xr=255,Jr=0,Zr={},eo=function(e){function t(e,t){this._iter=e,this._useKeys=t,this.size=e.size}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.prototype.get=function(e,t){return this._iter.get(e,t)},t.prototype.has=function(e){return this._iter.has(e)},t.prototype.valueSeq=function(){return this._iter.valueSeq()},t.prototype.reverse=function(){var e=this,t=ao(this,!0);return this._useKeys||(t.valueSeq=function(){return e._iter.toSeq().reverse()}),t},t.prototype.map=function(e,t){var n=this,r=io(this,e,t);return this._useKeys||(r.valueSeq=function(){return n._iter.toSeq().map(e,t)}),r},t.prototype.__iterate=function(e,t){var n=this;return this._iter.__iterate(function(t,r){return e(t,r,n)},t)},t.prototype.__iterator=function(e,t){return this._iter.__iterator(e,t)},t}(_r);eo.prototype[ir]=!0;var to=function(e){function t(e){this._iter=e,this.size=e.size}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.prototype.includes=function(e){return this._iter.includes(e)},t.prototype.__iterate=function(e,t){var n=this,r=0;return t&&Rn(this),this._iter.__iterate(function(o){return e(o,t?n.size-++r:r++,n)},t)},t.prototype.__iterator=function(e,t){var n=this,r=this._iter.__iterator(1,t),o=0;return t&&Rn(this),new cr(function(){var i=r.next();return i.done?i:fr(e,t?n.size-++o:o++,i.value,i)})},t}(wr),no=function(e){function t(e){this._iter=e,this.size=e.size}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.prototype.has=function(e){return this._iter.includes(e)},t.prototype.__iterate=function(e,t){var n=this;return this._iter.__iterate(function(t){return e(t,t,n)},t)},t.prototype.__iterator=function(e,t){var n=this._iter.__iterator(1,t);return new cr(function(){var t=n.next();return t.done?t:fr(e,t.value,t.value,t)})},t}(Sr),ro=function(e){function t(e){this._iter=e,this.size=e.size}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.prototype.entrySeq=function(){return this._iter.toSeq()},t.prototype.__iterate=function(e,t){var n=this;return this._iter.__iterate(function(t){if(t){go(t);var r=$n(t);return e(r?t.get(1):t[1],r?t.get(0):t[0],n)}},t)},t.prototype.__iterator=function(e,t){var n=this._iter.__iterator(1,t);return new cr(function(){for(;;){var t=n.next();if(t.done)return t;var r=t.value;if(r){go(r);var o=$n(r);return fr(e,o?r.get(0):r[0],o?r.get(1):r[1],t)}}})},t}(_r);function oo(e){var t=_o(e);return t._iter=e,t.size=e.size,t.flip=function(){return e},t.reverse=function(){var t=e.reverse.apply(this);return t.flip=function(){return e.reverse()},t},t.has=function(t){return e.includes(t)},t.includes=function(t){return e.has(t)},t.cacheResult=wo,t.__iterateUncached=function(t,n){var r=this;return e.__iterate(function(e,n){return!1!==t(n,e,r)},n)},t.__iteratorUncached=function(t,n){if(2===t){var r=e.__iterator(t,n);return new cr(function(){var e=r.next();if(!e.done){var t=e.value[0];e.value[0]=e.value[1],e.value[1]=t}return e})}return e.__iterator(1===t?0:1,n)},t}function io(e,t,n){var r=_o(e);return r.size=e.size,r.has=function(t){return e.has(t)},r.get=function(r,o){var i=e.get(r,Nn);return i===Nn?o:t.call(n,i,r,e)},r.__iterateUncached=function(r,o){var i=this;return e.__iterate(function(e,o,a){return!1!==r(t.call(n,e,o,a),o,i)},o)},r.__iteratorUncached=function(r,o){var i=e.__iterator(2,o);return new cr(function(){var o=i.next();if(o.done)return o;var a=o.value,u=a[0];return fr(r,u,t.call(n,a[1],u,e),o)})},r}function ao(e,t){var n=this,r=_o(e);return r._iter=e,r.size=e.size,r.reverse=function(){return e},e.flip&&(r.flip=function(){var t=oo(e);return t.reverse=function(){return e.flip()},t}),r.get=function(n,r){return e.get(t?n:-1-n,r)},r.has=function(n){return e.has(t?n:-1-n)},r.includes=function(t){return e.includes(t)},r.cacheResult=wo,r.__iterate=function(n,r){var o=this,i=0;return r&&Rn(e),e.__iterate(function(e,a){return n(e,t?a:r?o.size-++i:i++,o)},!r)},r.__iterator=function(r,o){var i=0;o&&Rn(e);var a=e.__iterator(2,!o);return new cr(function(){var e=a.next();if(e.done)return e;var u=e.value;return fr(r,t?u[0]:o?n.size-++i:i++,u[1],e)})},r}function uo(e,t,n,r){var o=_o(e);return r&&(o.has=function(r){var o=e.get(r,Nn);return o!==Nn&&!!t.call(n,o,r,e)},o.get=function(r,o){var i=e.get(r,Nn);return i!==Nn&&t.call(n,i,r,e)?i:o}),o.__iterateUncached=function(o,i){var a=this,u=0;return e.__iterate(function(e,i,l){if(t.call(n,e,i,l))return u++,o(e,r?i:u-1,a)},i),u},o.__iteratorUncached=function(o,i){var a=e.__iterator(2,i),u=0;return new cr(function(){for(;;){var i=a.next();if(i.done)return i;var l=i.value,s=l[0],c=l[1];if(t.call(n,c,s,e))return fr(o,r?s:u++,c,i)}})},o}function lo(e,t,n,r){var o=e.size;if(Ln(t,n,o))return e;if(void 0===o&&(t<0||n<0))return lo(e.toSeq().cacheResult(),t,n,r);var i,a=Fn(t,o),u=Bn(n,o)-a;u==u&&(i=u<0?0:u);var l=_o(e);return l.size=0===i?i:e.size&&i||void 0,!r&&tr(e)&&i>=0&&(l.get=function(t,n){return(t=Dn(this,t))>=0&&t<i?e.get(t+a,n):n}),l.__iterateUncached=function(t,n){var o=this;if(0===i)return 0;if(n)return this.cacheResult().__iterate(t,n);var u=0,l=!0,s=0;return e.__iterate(function(e,n){if(!l||!(l=u++<a))return s++,!1!==t(e,r?n:s-1,o)&&s!==i}),s},l.__iteratorUncached=function(t,n){if(0!==i&&n)return this.cacheResult().__iterator(t,n);if(0===i)return new cr(dr);var o=e.__iterator(t,n),u=0,l=0;return new cr(function(){for(;u++<a;)o.next();if(++l>i)return{value:void 0,done:!0};var e=o.next();return r||1===t||e.done?e:fr(t,l-1,0===t?void 0:e.value[1],e)})},l}function so(e,t,n,r){var o=_o(e);return o.__iterateUncached=function(o,i){var a=this;if(i)return this.cacheResult().__iterate(o,i);var u=!0,l=0;return e.__iterate(function(e,i,s){if(!u||!(u=t.call(n,e,i,s)))return l++,o(e,r?i:l-1,a)}),l},o.__iteratorUncached=function(o,i){var a=this;if(i)return this.cacheResult().__iterator(o,i);var u=e.__iterator(2,i),l=!0,s=0;return new cr(function(){var e,i,c;do{if((e=u.next()).done)return r||1===o?e:fr(o,s++,0===o?void 0:e.value[1],e);var f=e.value;i=f[0],c=f[1],l&&(l=t.call(n,c,i,a))}while(l);return 2===o?e:fr(o,i,c,e)})},o}to.prototype.cacheResult=eo.prototype.cacheResult=no.prototype.cacheResult=ro.prototype.cacheResult=wo;var co=function(e){function t(e){this._wrappedIterables=e.flatMap(function(e){return e._wrappedIterables?e._wrappedIterables:[e]}),this.size=this._wrappedIterables.reduce(function(e,t){if(void 0!==e){var n=t.size;if(void 0!==n)return e+n}},0),this[Vn]=this._wrappedIterables[0][Vn],this[Kn]=this._wrappedIterables[0][Kn],this[ir]=this._wrappedIterables[0][ir]}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.prototype.__iterateUncached=function(e,t){if(0!==this._wrappedIterables.length){if(t)return this.cacheResult().__iterate(e,t);for(var n=0,r=Hn(this),o=r?2:1,i=this._wrappedIterables[n].__iterator(o,t),a=!0,u=0;a;){for(var l=i.next();l.done;){if(++n===this._wrappedIterables.length)return u;l=(i=this._wrappedIterables[n].__iterator(o,t)).next()}a=!1!==(r?e(l.value[1],l.value[0],this):e(l.value,u,this)),u++}return u}},t.prototype.__iteratorUncached=function(e,t){var n=this;if(0===this._wrappedIterables.length)return new cr(dr);if(t)return this.cacheResult().__iterator(e,t);var r=0,o=this._wrappedIterables[r].__iterator(e,t);return new cr(function(){for(var i=o.next();i.done;){if(++r===n._wrappedIterables.length)return i;i=(o=n._wrappedIterables[r].__iterator(e,t)).next()}return i})},t}(br);function fo(e,t,n){var r=_o(e);return r.__iterateUncached=function(o,i){if(i)return this.cacheResult().__iterate(o,i);var a=0,u=!1;return function e(l,s){l.__iterate(function(i,l){return(!t||s<t)&&$n(i)?e(i,s+1):(a++,!1===o(i,n?l:a-1,r)&&(u=!0)),!u},i)}(e,0),a},r.__iteratorUncached=function(r,o){if(o)return this.cacheResult().__iterator(r,o);var i=e.__iterator(r,o),a=[],u=0;return new cr(function(){for(;i;){var e=i.next();if(!1===e.done){var l=e.value;if(2===r&&(l=l[1]),t&&!(a.length<t)||!$n(l))return n?e:fr(r,u++,l,e);a.push(i),i=l.__iterator(r,o)}else i=a.pop()}return{value:void 0,done:!0}})},r}function po(e,t,n){t||(t=So);var r=Hn(e),o=0,i=e.toSeq().map(function(t,r){return[r,t,o++,n?n(t,r,e):t]}).valueSeq().toArray();return i.sort(function(e,n){return t(e[3],n[3])||e[2]-n[2]}).forEach(r?function(e,t){i[t].length=2}:function(e,t){i[t]=e[1]}),r?_r(i):Qn(e)?wr(i):Sr(i)}function ho(e,t,n){if(t||(t=So),n){var r=e.toSeq().map(function(t,r){return[t,n(t,r,e)]}).reduce(function(e,n){return yo(t,e[1],n[1])?n:e});return r&&r[0]}return e.reduce(function(e,n){return yo(t,e,n)?n:e})}function yo(e,t,n){var r=e(n,t);return 0===r&&n!==t&&(null==n||n!=n)||r>0}function mo(e,t,n,r){var o=_o(e),i=new kr(n).map(function(e){return e.size});return o.size=r?i.max():i.min(),o.__iterate=function(e,t){for(var n,r=this.__iterator(1,t),o=0;!(n=r.next()).done&&!1!==e(n.value,o++,this););return o},o.__iteratorUncached=function(e,o){var i=n.map(function(e){return e=Yn(e),yr(o?e.reverse():e)}),a=0,u=!1;return new cr(function(){var n;return u||(n=i.map(function(e){return e.next()}),u=r?n.every(function(e){return e.done}):n.some(function(e){return e.done})),u?{value:void 0,done:!0}:fr(e,a++,t.apply(null,n.map(function(e){return e.value})))})},o}function vo(e,t){return e===t?e:tr(e)?t:e.constructor(t)}function go(e){if(e!==Object(e))throw new TypeError("Expected [K, V] tuple: "+e)}function bo(e){return Hn(e)?Xn:Qn(e)?Jn:Zn}function _o(e){return Object.create((Hn(e)?_r:Qn(e)?wr:Sr).prototype)}function wo(){return this._iter.cacheResult?(this._iter.cacheResult(),this.size=this._iter.size,this):br.prototype.cacheResult.call(this)}function So(e,t){return void 0===e&&void 0===t?0:void 0===e?1:void 0===t?-1:e>t?1:e<t?-1:0}function ko(e,t){t=t||0;for(var n=Math.max(0,e.length-t),r=new Array(n),o=0;o<n;o++)r[o]=e[o+t];return r}function xo(e,t){if(!e)throw new Error(t)}function Eo(e){xo(e!==1/0,"Cannot perform this action with an infinite size.")}function Oo(e){if(gr(e)&&"string"!=typeof e)return e;if(ar(e))return e.toArray();throw new TypeError("Invalid keyPath: expected Ordered Collection or Array: "+e)}var Co=Object.prototype.toString;function Po(e){if(!e||"object"!=typeof e||"[object Object]"!==Co.call(e))return!1;var t=Object.getPrototypeOf(e);if(null===t)return!0;for(var n=t,r=Object.getPrototypeOf(t);null!==r;)n=r,r=Object.getPrototypeOf(n);return n===t}function zo(e){return"object"==typeof e&&(or(e)||Array.isArray(e)||Po(e))}function jo(e){try{return"string"==typeof e?JSON.stringify(e):String(e)}catch(t){return JSON.stringify(e)}}function Io(e,t,n){return or(e)?e.get(t,n):function(e,t){return or(e)?e.has(t):zo(e)&&vr.call(e,t)}(e,t)?"function"==typeof e.get?e.get(t):e[t]:n}function No(e){if(Array.isArray(e))return ko(e);var t={};for(var n in e)vr.call(e,n)&&(t[n]=e[n]);return t}function To(e,t,n,r){r||(r=n,n=void 0);var o=Mo(or(e),e,Oo(t),0,n,r);return o===Nn?n:o}function Mo(e,t,n,r,o,i){var a=t===Nn;if(r===n.length){var u=a?o:t,l=i(u);return l===u?t:l}if(!a&&!zo(t))throw new TypeError("Cannot update within non-data-structure value in path ["+Array.from(n).slice(0,r).map(jo)+"]: "+t);var s=n[r],c=a?Nn:Io(t,s,Nn),f=Mo(c===Nn?e:or(c),c,n,r+1,o,i);return f===c?t:f===Nn?function(e,t){if(!zo(e))throw new TypeError("Cannot update non-data-structure value: "+e);if(or(e)){if(!e.remove)throw new TypeError("Cannot update immutable value without .remove() method: "+e);return e.remove(t)}if(!vr.call(e,t))return e;var n=No(e);return Array.isArray(n)?n.splice(t,1):delete n[t],n}(t,s):function(e,t,n){if(!zo(e))throw new TypeError("Cannot update non-data-structure value: "+e);if(or(e)){if(!e.set)throw new TypeError("Cannot update immutable value without .set() method: "+e);return e.set(t,n)}if(vr.call(e,t)&&n===e[t])return e;var r=No(e);return r[t]=n,r}(a?e?fi():{}:t,s,f)}function Ro(e,t){return function(e,t,n){return To(e,t,Nn,function(){return n})}(this,e,t)}function Do(e){return function(e,t){return To(e,t,function(){return Nn})}(this,e)}function Ao(e,t,n,r){return To(e,[t],n,r)}function Lo(e,t,n){return 1===arguments.length?e(this):Ao(this,e,t,n)}function Fo(e,t,n){return To(this,e,t,n)}function Bo(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];return Wo(this,e)}function Uo(e){for(var t=[],n=arguments.length-1;n-- >0;)t[n]=arguments[n+1];if("function"!=typeof e)throw new TypeError("Invalid merger function: "+e);return Wo(this,t,e)}function Wo(e,t,n){for(var r=[],o=0;o<t.length;o++){var i=Xn(t[o]);0!==i.size&&r.push(i)}return 0===r.length?e:0!==e.toSeq().size||e.__ownerID||1!==r.length?e.withMutations(function(e){for(var t=n?function(t,r){Ao(e,r,Nn,function(e){return e===Nn?t:n(e,t,r)})}:function(t,n){e.set(n,t)},o=0;o<r.length;o++)r[o].forEach(t)}):rr(e)?e:e.constructor(r[0])}function qo(e,t,n){return $o(e,t,function(e){return function t(n,r,o){return zo(n)&&zo(r)&&(i=r,a=br(n),u=br(i),Qn(a)===Qn(u)&&Hn(a)===Hn(u))?$o(n,[r],t):e?e(n,r,o):r;var i,a,u}}(n))}function $o(e,t,n){if(!zo(e))throw new TypeError("Cannot merge into non-data-structure value: "+e);if(or(e))return"function"==typeof n&&e.mergeWith?e.mergeWith.apply(e,[n].concat(t)):e.merge?e.merge.apply(e,t):e.concat.apply(e,t);for(var r=Array.isArray(e),o=e,i=r?Jn:Xn,a=r?function(t){o===e&&(o=No(o)),o.push(t)}:function(t,r){var i=vr.call(o,r),a=i&&n?n(o[r],t,r):t;i&&a===o[r]||(o===e&&(o=No(o)),o[r]=a)},u=0;u<t.length;u++)i(t[u]).forEach(a);return o}function Vo(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];return qo(this,e)}function Ho(e){for(var t=[],n=arguments.length-1;n-- >0;)t[n]=arguments[n+1];return qo(this,t,e)}function Ko(e){for(var t=[],n=arguments.length-1;n-- >0;)t[n]=arguments[n+1];return To(this,e,fi(),function(e){return $o(e,t)})}function Qo(e){for(var t=[],n=arguments.length-1;n-- >0;)t[n]=arguments[n+1];return To(this,e,fi(),function(e){return qo(e,t)})}function Go(e){var t=this.asMutable();return e(t),t.wasAltered()?t.__ensureOwner(this.__ownerID):this}function Yo(){return this.__ownerID?this:this.__ensureOwner(new Mn)}function Xo(){return this.__ensureOwner()}function Jo(){return this.__altered}var Zo=function(e){function t(t){return null==t?fi():Nr(t)&&!ar(t)?t:fi().withMutations(function(n){var r=e(t);Eo(r.size),r.forEach(function(e,t){return n.set(t,e)})})}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.prototype.toString=function(){return this.__toString("Map {","}")},t.prototype.get=function(e,t){return this._root?this._root.get(0,void 0,e,t):t},t.prototype.set=function(e,t){return di(this,e,t)},t.prototype.remove=function(e){return di(this,e,Nn)},t.prototype.deleteAll=function(e){var t=Yn(e);return 0===t.size?this:this.withMutations(function(e){t.forEach(function(t){return e.remove(t)})})},t.prototype.clear=function(){return 0===this.size?this:this.__ownerID?(this.size=0,this._root=null,this.__hash=void 0,this.__altered=!0,this):fi()},t.prototype.sort=function(e){return Di(po(this,e))},t.prototype.sortBy=function(e,t){return Di(po(this,t,e))},t.prototype.map=function(e,t){var n=this;return this.withMutations(function(r){r.forEach(function(o,i){r.set(i,e.call(t,o,i,n))})})},t.prototype.__iterator=function(e,t){return new ui(this,e,t)},t.prototype.__iterate=function(e,t){var n=this,r=0;return this._root&&this._root.iterate(function(t){return r++,e(t[1],t[0],n)},t),r},t.prototype.__ensureOwner=function(e){return e===this.__ownerID?this:e?ci(this.size,this._root,e,this.__hash):0===this.size?fi():(this.__ownerID=e,this.__altered=!1,this)},t}(Xn);Zo.isMap=Nr;var ei=Zo.prototype;ei[Ir]=!0,ei[zn]=ei.remove,ei.removeAll=ei.deleteAll,ei.setIn=Ro,ei.removeIn=ei.deleteIn=Do,ei.update=Lo,ei.updateIn=Fo,ei.merge=ei.concat=Bo,ei.mergeWith=Uo,ei.mergeDeep=Vo,ei.mergeDeepWith=Ho,ei.mergeIn=Ko,ei.mergeDeepIn=Qo,ei.withMutations=Go,ei.wasAltered=Jo,ei.asImmutable=Xo,ei["@@transducer/init"]=ei.asMutable=Yo,ei["@@transducer/step"]=function(e,t){return e.set(t[0],t[1])},ei["@@transducer/result"]=function(e){return e.asImmutable()};var ti=function(e,t){this.ownerID=e,this.entries=t};ti.prototype.get=function(e,t,n,r){for(var o=this.entries,i=0,a=o.length;i<a;i++)if(Rr(n,o[i][0]))return o[i][1];return r},ti.prototype.update=function(e,t,n,r,o,i,a){for(var u=o===Nn,l=this.entries,s=0,c=l.length;s<c&&!Rr(r,l[s][0]);s++);var f=s<c;if(f?l[s][1]===o:u)return this;if(Tn(a),(u||!f)&&Tn(i),!u||1!==l.length){if(!f&&!u&&l.length>=gi)return function(e,t,n,r){e||(e=new Mn);for(var o=new ii(e,Fr(n),[n,r]),i=0;i<t.length;i++){var a=t[i];o=o.update(e,0,void 0,a[0],a[1])}return o}(e,l,r,o);var d=e&&e===this.ownerID,p=d?l:ko(l);return f?u?s===c-1?p.pop():p[s]=p.pop():p[s]=[r,o]:p.push([r,o]),d?(this.entries=p,this):new ti(e,p)}};var ni=function(e,t,n){this.ownerID=e,this.bitmap=t,this.nodes=n};ni.prototype.get=function(e,t,n,r){void 0===t&&(t=Fr(n));var o=1<<((0===e?t:t>>>e)&In),i=this.bitmap;return 0===(i&o)?r:this.nodes[mi(i&o-1)].get(e+5,t,n,r)},ni.prototype.update=function(e,t,n,r,o,i,a){void 0===n&&(n=Fr(r));var u=(0===t?n:n>>>t)&In,l=1<<u,s=this.bitmap,c=0!==(s&l);if(!c&&o===Nn)return this;var f=mi(s&l-1),d=this.nodes,p=c?d[f]:void 0,h=pi(p,e,t+5,n,r,o,i,a);if(h===p)return this;if(!c&&h&&d.length>=bi)return function(e,t,n,r,o){for(var i=0,a=new Array(jn),u=0;0!==n;u++,n>>>=1)a[u]=1&n?t[i++]:void 0;return a[r]=o,new ri(e,i+1,a)}(e,d,s,u,h);if(c&&!h&&2===d.length&&hi(d[1^f]))return d[1^f];if(c&&h&&1===d.length&&hi(h))return h;var y=e&&e===this.ownerID,m=c?h?s:s^l:s|l,v=c?h?vi(d,f,h,y):function(e,t,n){var r=e.length-1;if(n&&t===r)return e.pop(),e;for(var o=new Array(r),i=0,a=0;a<r;a++)a===t&&(i=1),o[a]=e[a+i];return o}(d,f,y):function(e,t,n,r){var o=e.length+1;if(r&&t+1===o)return e[t]=n,e;for(var i=new Array(o),a=0,u=0;u<o;u++)u===t?(i[u]=n,a=-1):i[u]=e[u+a];return i}(d,f,h,y);return y?(this.bitmap=m,this.nodes=v,this):new ni(e,m,v)};var ri=function(e,t,n){this.ownerID=e,this.count=t,this.nodes=n};ri.prototype.get=function(e,t,n,r){void 0===t&&(t=Fr(n));var o=(0===e?t:t>>>e)&In,i=this.nodes[o];return i?i.get(e+5,t,n,r):r},ri.prototype.update=function(e,t,n,r,o,i,a){void 0===n&&(n=Fr(r));var u=(0===t?n:n>>>t)&In,l=o===Nn,s=this.nodes,c=s[u];if(l&&!c)return this;var f=pi(c,e,t+5,n,r,o,i,a);if(f===c)return this;var d=this.count;if(c){if(!f&&--d<_i)return function(e,t,n,r){for(var o=0,i=0,a=new Array(n),u=0,l=1,s=t.length;u<s;u++,l<<=1){var c=t[u];void 0!==c&&u!==r&&(o|=l,a[i++]=c)}return new ni(e,o,a)}(e,s,d,u)}else d++;var p=e&&e===this.ownerID,h=vi(s,u,f,p);return p?(this.count=d,this.nodes=h,this):new ri(e,d,h)};var oi=function(e,t,n){this.ownerID=e,this.keyHash=t,this.entries=n};oi.prototype.get=function(e,t,n,r){for(var o=this.entries,i=0,a=o.length;i<a;i++)if(Rr(n,o[i][0]))return o[i][1];return r},oi.prototype.update=function(e,t,n,r,o,i,a){void 0===n&&(n=Fr(r));var u=o===Nn;if(n!==this.keyHash)return u?this:(Tn(a),Tn(i),yi(this,e,t,n,[r,o]));for(var l=this.entries,s=0,c=l.length;s<c&&!Rr(r,l[s][0]);s++);var f=s<c;if(f?l[s][1]===o:u)return this;if(Tn(a),(u||!f)&&Tn(i),u&&2===c)return new ii(e,this.keyHash,l[1^s]);var d=e&&e===this.ownerID,p=d?l:ko(l);return f?u?s===c-1?p.pop():p[s]=p.pop():p[s]=[r,o]:p.push([r,o]),d?(this.entries=p,this):new oi(e,this.keyHash,p)};var ii=function(e,t,n){this.ownerID=e,this.keyHash=t,this.entry=n};ii.prototype.get=function(e,t,n,r){return Rr(n,this.entry[0])?this.entry[1]:r},ii.prototype.update=function(e,t,n,r,o,i,a){var u=o===Nn,l=Rr(r,this.entry[0]);return(l?o===this.entry[1]:u)?this:(Tn(a),u?void Tn(i):l?e&&e===this.ownerID?(this.entry[1]=o,this):new ii(e,this.keyHash,[r,o]):(Tn(i),yi(this,e,t,Fr(r),[r,o])))},ti.prototype.iterate=oi.prototype.iterate=function(e,t){for(var n=this.entries,r=0,o=n.length-1;r<=o;r++)if(!1===e(n[t?o-r:r]))return!1},ni.prototype.iterate=ri.prototype.iterate=function(e,t){for(var n=this.nodes,r=0,o=n.length-1;r<=o;r++){var i=n[t?o-r:r];if(i&&!1===i.iterate(e,t))return!1}},ii.prototype.iterate=function(e,t){return e(this.entry)};var ai,ui=function(e){function t(e,t,n){this._type=t,this._reverse=n,this._stack=e._root&&si(e._root)}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.prototype.next=function(){for(var e=this._type,t=this._stack;t;){var n=t.node,r=t.index++,o=void 0;if(n.entry){if(0===r)return li(e,n.entry)}else if(n.entries){if(r<=(o=n.entries.length-1))return li(e,n.entries[this._reverse?o-r:r])}else if(r<=(o=n.nodes.length-1)){var i=n.nodes[this._reverse?o-r:r];if(i){if(i.entry)return li(e,i.entry);t=this._stack=si(i,t)}continue}t=this._stack=this._stack.__prev}return{value:void 0,done:!0}},t}(cr);function li(e,t){return fr(e,t[0],t[1])}function si(e,t){return{node:e,index:0,__prev:t}}function ci(e,t,n,r){var o=Object.create(ei);return o.size=e,o._root=t,o.__ownerID=n,o.__hash=r,o.__altered=!1,o}function fi(){return ai||(ai=ci(0))}function di(e,t,n){var r,o;if(e._root){var i={value:!1},a={value:!1};if(r=pi(e._root,e.__ownerID,0,void 0,t,n,i,a),!a.value)return e;o=e.size+(i.value?n===Nn?-1:1:0)}else{if(n===Nn)return e;o=1,r=new ti(e.__ownerID,[[t,n]])}return e.__ownerID?(e.size=o,e._root=r,e.__hash=void 0,e.__altered=!0,e):r?ci(o,r):fi()}function pi(e,t,n,r,o,i,a,u){return e?e.update(t,n,r,o,i,a,u):i===Nn?e:(Tn(u),Tn(a),new ii(t,r,[o,i]))}function hi(e){return e.constructor===ii||e.constructor===oi}function yi(e,t,n,r,o){if(e.keyHash===r)return new oi(t,r,[e.entry,o]);var i,a=(0===n?e.keyHash:e.keyHash>>>n)&In,u=(0===n?r:r>>>n)&In,l=a===u?[yi(e,t,n+5,r,o)]:(i=new ii(t,r,o),a<u?[e,i]:[i,e]);return new ni(t,1<<a|1<<u,l)}function mi(e){return e=(e=(858993459&(e-=e>>1&1431655765))+(e>>2&858993459))+(e>>4)&252645135,127&(e+=e>>8)+(e>>16)}function vi(e,t,n,r){var o=r?e:ko(e);return o[t]=n,o}var gi=8,bi=16,_i=8,wi="@@__IMMUTABLE_LIST__@@";function Si(e){return Boolean(e&&e[wi])}var ki=function(e){function t(t){var n=zi();if(null==t)return n;if(Si(t))return t;var r=e(t),o=r.size;return 0===o?n:(Eo(o),o>0&&o<jn?Pi(0,o,5,null,new Ei(r.toArray())):n.withMutations(function(e){e.setSize(o),r.forEach(function(t,n){return e.set(n,t)})}))}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.of=function(){return this(arguments)},t.prototype.toString=function(){return this.__toString("List [","]")},t.prototype.get=function(e,t){if((e=Dn(this,e))>=0&&e<this.size){var n=Ni(this,e+=this._origin);return n&&n.array[e&In]}return t},t.prototype.set=function(e,t){return function(e,t,n){if((t=Dn(e,t))!=t)return e;if(t>=e.size||t<0)return e.withMutations(function(e){t<0?Ti(e,t).set(0,n):Ti(e,0,t+1).set(t,n)});t+=e._origin;var r=e._tail,o=e._root,i={value:!1};return t>=Mi(e._capacity)?r=ji(r,e.__ownerID,0,t,n,i):o=ji(o,e.__ownerID,e._level,t,n,i),i.value?e.__ownerID?(e._root=o,e._tail=r,e.__hash=void 0,e.__altered=!0,e):Pi(e._origin,e._capacity,e._level,o,r):e}(this,e,t)},t.prototype.remove=function(e){return this.has(e)?0===e?this.shift():e===this.size-1?this.pop():this.splice(e,1):this},t.prototype.insert=function(e,t){return this.splice(e,0,t)},t.prototype.clear=function(){return 0===this.size?this:this.__ownerID?(this.size=this._origin=this._capacity=0,this._level=5,this._root=this._tail=this.__hash=void 0,this.__altered=!0,this):zi()},t.prototype.push=function(){var e=arguments,t=this.size;return this.withMutations(function(n){Ti(n,0,t+e.length);for(var r=0;r<e.length;r++)n.set(t+r,e[r])})},t.prototype.pop=function(){return Ti(this,0,-1)},t.prototype.unshift=function(){var e=arguments;return this.withMutations(function(t){Ti(t,-e.length);for(var n=0;n<e.length;n++)t.set(n,e[n])})},t.prototype.shift=function(){return Ti(this,1)},t.prototype.shuffle=function(e){return void 0===e&&(e=Math.random),this.withMutations(function(t){for(var n,r,o=t.size;o;)n=Math.floor(e()*o--),r=t.get(n),t.set(n,t.get(o)),t.set(o,r)})},t.prototype.concat=function(){for(var t=arguments,n=[],r=0;r<arguments.length;r++){var o=t[r],i=e("string"!=typeof o&&pr(o)?o:[o]);0!==i.size&&n.push(i)}return 0===n.length?this:0!==this.size||this.__ownerID||1!==n.length?this.withMutations(function(e){n.forEach(function(t){return t.forEach(function(t){return e.push(t)})})}):this.constructor(n[0])},t.prototype.setSize=function(e){return Ti(this,0,e)},t.prototype.map=function(e,t){var n=this;return this.withMutations(function(r){for(var o=0;o<n.size;o++)r.set(o,e.call(t,r.get(o),o,n))})},t.prototype.slice=function(e,t){var n=this.size;return Ln(e,t,n)?this:Ti(this,Fn(e,n),Bn(t,n))},t.prototype.__iterator=function(e,t){var n=t?this.size:0,r=Ci(this,t);return new cr(function(){var o=r();return o===Oi?{value:void 0,done:!0}:fr(e,t?--n:n++,o)})},t.prototype.__iterate=function(e,t){for(var n,r=t?this.size:0,o=Ci(this,t);(n=o())!==Oi&&!1!==e(n,t?--r:r++,this););return r},t.prototype.__ensureOwner=function(e){return e===this.__ownerID?this:e?Pi(this._origin,this._capacity,this._level,this._root,this._tail,e,this.__hash):0===this.size?zi():(this.__ownerID=e,this.__altered=!1,this)},t}(Jn);ki.isList=Si;var xi=ki.prototype;xi[wi]=!0,xi[zn]=xi.remove,xi.merge=xi.concat,xi.setIn=Ro,xi.deleteIn=xi.removeIn=Do,xi.update=Lo,xi.updateIn=Fo,xi.mergeIn=Ko,xi.mergeDeepIn=Qo,xi.withMutations=Go,xi.wasAltered=Jo,xi.asImmutable=Xo,xi["@@transducer/init"]=xi.asMutable=Yo,xi["@@transducer/step"]=function(e,t){return e.push(t)},xi["@@transducer/result"]=function(e){return e.asImmutable()};var Ei=function(e,t){this.array=e,this.ownerID=t};Ei.prototype.removeBefore=function(e,t,n){if(!(n&(1<<t+5)-1)||0===this.array.length)return this;var r=n>>>t&In;if(r>=this.array.length)return new Ei([],e);var o,i=0===r;if(t>0){var a=this.array[r];if((o=a&&a.removeBefore(e,t-5,n))===a&&i)return this}if(i&&!o)return this;var u=Ii(this,e);if(!i)for(var l=0;l<r;l++)u.array[l]=void 0;return o&&(u.array[r]=o),u},Ei.prototype.removeAfter=function(e,t,n){if(n===(t?1<<t+5:jn)||0===this.array.length)return this;var r,o=n-1>>>t&In;if(o>=this.array.length)return this;if(t>0){var i=this.array[o];if((r=i&&i.removeAfter(e,t-5,n))===i&&o===this.array.length-1)return this}var a=Ii(this,e);return a.array.splice(o+1),r&&(a.array[o]=r),a};var Oi={};function Ci(e,t){var n=e._origin,r=e._capacity,o=Mi(r),i=e._tail;return function e(a,u,l){return 0===u?function(e,a){var u=a===o?i&&i.array:e&&e.array,l=a>n?0:n-a,s=r-a;return s>jn&&(s=jn),function(){if(l===s)return Oi;var e=t?--s:l++;return u&&u[e]}}(a,l):function(o,i,a){var u,l=o&&o.array,s=a>n?0:n-a>>i,c=1+(r-a>>i);return c>jn&&(c=jn),function(){for(;;){if(u){var n=u();if(n!==Oi)return n;u=null}if(s===c)return Oi;var r=t?--c:s++;u=e(l&&l[r],i-5,a+(r<<i))}}}(a,u,l)}(e._root,e._level,0)}function Pi(e,t,n,r,o,i,a){var u=Object.create(xi);return u.size=t-e,u._origin=e,u._capacity=t,u._level=n,u._root=r,u._tail=o,u.__ownerID=i,u.__hash=a,u.__altered=!1,u}function zi(){return Pi(0,0,5)}function ji(e,t,n,r,o,i){var a,u=r>>>n&In,l=e&&u<e.array.length;if(!l&&void 0===o)return e;if(n>0){var s=e&&e.array[u],c=ji(s,t,n-5,r,o,i);return c===s?e:((a=Ii(e,t)).array[u]=c,a)}return l&&e.array[u]===o?e:(i&&Tn(i),a=Ii(e,t),void 0===o&&u===a.array.length-1?a.array.pop():a.array[u]=o,a)}function Ii(e,t){return t&&e&&t===e.ownerID?e:new Ei(e?e.array.slice():[],t)}function Ni(e,t){if(t>=Mi(e._capacity))return e._tail;if(t<1<<e._level+5){for(var n=e._root,r=e._level;n&&r>0;)n=n.array[t>>>r&In],r-=5;return n}}function Ti(e,t,n){void 0!==t&&(t|=0),void 0!==n&&(n|=0);var r=e.__ownerID||new Mn,o=e._origin,i=e._capacity,a=o+t,u=void 0===n?i:n<0?i+n:o+n;if(a===o&&u===i)return e;if(a>=u)return e.clear();for(var l=e._level,s=e._root,c=0;a+c<0;)s=new Ei(s&&s.array.length?[void 0,s]:[],r),c+=1<<(l+=5);c&&(a+=c,o+=c,u+=c,i+=c);for(var f=Mi(i),d=Mi(u);d>=1<<l+5;)s=new Ei(s&&s.array.length?[s]:[],r),l+=5;var p=e._tail,h=d<f?Ni(e,u-1):d>f?new Ei([],r):p;if(p&&d>f&&a<i&&p.array.length){for(var y=s=Ii(s,r),m=l;m>5;m-=5){var v=f>>>m&In;y=y.array[v]=Ii(y.array[v],r)}y.array[f>>>5&In]=p}if(u<i&&(h=h&&h.removeAfter(r,0,u)),a>=d)a-=d,u-=d,l=5,s=null,h=h&&h.removeBefore(r,0,a);else if(a>o||d<f){for(c=0;s;){var g=a>>>l&In;if(g!==d>>>l&In)break;g&&(c+=(1<<l)*g),l-=5,s=s.array[g]}s&&a>o&&(s=s.removeBefore(r,l,a-c)),s&&d<f&&(s=s.removeAfter(r,l,d-c)),c&&(a-=c,u-=c)}return e.__ownerID?(e.size=u-a,e._origin=a,e._capacity=u,e._level=l,e._root=s,e._tail=h,e.__hash=void 0,e.__altered=!0,e):Pi(a,u,l,s,h)}function Mi(e){return e<jn?0:e-1>>>5<<5}var Ri,Di=function(e){function t(e){return null==e?Li():Tr(e)?e:Li().withMutations(function(t){var n=Xn(e);Eo(n.size),n.forEach(function(e,n){return t.set(n,e)})})}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.of=function(){return this(arguments)},t.prototype.toString=function(){return this.__toString("OrderedMap {","}")},t.prototype.get=function(e,t){var n=this._map.get(e);return void 0!==n?this._list.get(n)[1]:t},t.prototype.clear=function(){return 0===this.size?this:this.__ownerID?(this.size=0,this._map.clear(),this._list.clear(),this.__altered=!0,this):Li()},t.prototype.set=function(e,t){return Fi(this,e,t)},t.prototype.remove=function(e){return Fi(this,e,Nn)},t.prototype.__iterate=function(e,t){var n=this;return this._list.__iterate(function(t){return t&&e(t[1],t[0],n)},t)},t.prototype.__iterator=function(e,t){return this._list.fromEntrySeq().__iterator(e,t)},t.prototype.__ensureOwner=function(e){if(e===this.__ownerID)return this;var t=this._map.__ensureOwner(e),n=this._list.__ensureOwner(e);return e?Ai(t,n,e,this.__hash):0===this.size?Li():(this.__ownerID=e,this.__altered=!1,this._map=t,this._list=n,this)},t}(Zo);function Ai(e,t,n,r){var o=Object.create(Di.prototype);return o.size=e?e.size:0,o._map=e,o._list=t,o.__ownerID=n,o.__hash=r,o.__altered=!1,o}function Li(){return Ri||(Ri=Ai(fi(),zi()))}function Fi(e,t,n){var r,o,i=e._map,a=e._list,u=i.get(t),l=void 0!==u;if(n===Nn){if(!l)return e;a.size>=jn&&a.size>=2*i.size?(r=(o=a.filter(function(e,t){return void 0!==e&&u!==t})).toKeyedSeq().map(function(e){return e[0]}).flip().toMap(),e.__ownerID&&(r.__ownerID=o.__ownerID=e.__ownerID)):(r=i.remove(t),o=u===a.size-1?a.pop():a.set(u,void 0))}else if(l){if(n===a.get(u)[1])return e;r=i,o=a.set(u,[t,n])}else r=i.set(t,a.size),o=a.set(a.size,[t,n]);return e.__ownerID?(e.size=r.size,e._map=r,e._list=o,e.__hash=void 0,e.__altered=!0,e):Ai(r,o)}Di.isOrderedMap=Tr,Di.prototype[ir]=!0,Di.prototype[zn]=Di.prototype.remove;var Bi="@@__IMMUTABLE_STACK__@@";function Ui(e){return Boolean(e&&e[Bi])}var Wi=function(e){function t(e){return null==e?Hi():Ui(e)?e:Hi().pushAll(e)}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.of=function(){return this(arguments)},t.prototype.toString=function(){return this.__toString("Stack [","]")},t.prototype.get=function(e,t){var n=this._head;for(e=Dn(this,e);n&&e--;)n=n.next;return n?n.value:t},t.prototype.peek=function(){return this._head&&this._head.value},t.prototype.push=function(){var e=arguments;if(0===arguments.length)return this;for(var t=this.size+arguments.length,n=this._head,r=arguments.length-1;r>=0;r--)n={value:e[r],next:n};return this.__ownerID?(this.size=t,this._head=n,this.__hash=void 0,this.__altered=!0,this):Vi(t,n)},t.prototype.pushAll=function(t){if(0===(t=e(t)).size)return this;if(0===this.size&&Ui(t))return t;Eo(t.size);var n=this.size,r=this._head;return t.__iterate(function(e){n++,r={value:e,next:r}},!0),this.__ownerID?(this.size=n,this._head=r,this.__hash=void 0,this.__altered=!0,this):Vi(n,r)},t.prototype.pop=function(){return this.slice(1)},t.prototype.clear=function(){return 0===this.size?this:this.__ownerID?(this.size=0,this._head=void 0,this.__hash=void 0,this.__altered=!0,this):Hi()},t.prototype.slice=function(t,n){if(Ln(t,n,this.size))return this;var r=Fn(t,this.size);if(Bn(n,this.size)!==this.size)return e.prototype.slice.call(this,t,n);for(var o=this.size-r,i=this._head;r--;)i=i.next;return this.__ownerID?(this.size=o,this._head=i,this.__hash=void 0,this.__altered=!0,this):Vi(o,i)},t.prototype.__ensureOwner=function(e){return e===this.__ownerID?this:e?Vi(this.size,this._head,e,this.__hash):0===this.size?Hi():(this.__ownerID=e,this.__altered=!1,this)},t.prototype.__iterate=function(e,t){var n=this;if(t)return new kr(this.toArray()).__iterate(function(t,r){return e(t,r,n)},t);for(var r=0,o=this._head;o&&!1!==e(o.value,r++,this);)o=o.next;return r},t.prototype.__iterator=function(e,t){if(t)return new kr(this.toArray()).__iterator(e,t);var n=0,r=this._head;return new cr(function(){if(r){var t=r.value;return r=r.next,fr(e,n++,t)}return{value:void 0,done:!0}})},t}(Jn);Wi.isStack=Ui;var qi,$i=Wi.prototype;function Vi(e,t,n,r){var o=Object.create($i);return o.size=e,o._head=t,o.__ownerID=n,o.__hash=r,o.__altered=!1,o}function Hi(){return qi||(qi=Vi(0))}$i[Bi]=!0,$i.shift=$i.pop,$i.unshift=$i.push,$i.unshiftAll=$i.pushAll,$i.withMutations=Go,$i.wasAltered=Jo,$i.asImmutable=Xo,$i["@@transducer/init"]=$i.asMutable=Yo,$i["@@transducer/step"]=function(e,t){return e.unshift(t)},$i["@@transducer/result"]=function(e){return e.asImmutable()};var Ki="@@__IMMUTABLE_SET__@@";function Qi(e){return Boolean(e&&e[Ki])}function Gi(e){return Qi(e)&&ar(e)}function Yi(e,t){if(e===t)return!0;if(!$n(t)||void 0!==e.size&&void 0!==t.size&&e.size!==t.size||void 0!==e.__hash&&void 0!==t.__hash&&e.__hash!==t.__hash||Hn(e)!==Hn(t)||Qn(e)!==Qn(t)||ar(e)!==ar(t))return!1;if(0===e.size&&0===t.size)return!0;var n=!Gn(e);if(ar(e)){var r=e.entries();return t.every(function(e,t){var o=r.next().value;return o&&Rr(o[1],e)&&(n||Rr(o[0],t))})&&r.next().done}var o=!1;if(void 0===e.size)if(void 0===t.size)"function"==typeof e.cacheResult&&e.cacheResult();else{o=!0;var i=e;e=t,t=i}var a=!0,u=t.__iterate(function(t,r){if(n?!e.has(t):o?!Rr(t,e.get(r,Nn)):!Rr(e.get(r,Nn),t))return a=!1,!1});return a&&e.size===u}function Xi(e,t){var n=function(n){e.prototype[n]=t[n]};return Object.keys(t).forEach(n),Object.getOwnPropertySymbols&&Object.getOwnPropertySymbols(t).forEach(n),e}function Ji(e){if(!e||"object"!=typeof e)return e;if(!$n(e)){if(!zo(e))return e;e=br(e)}if(Hn(e)){var t={};return e.__iterate(function(e,n){t[n]=Ji(e)}),t}var n=[];return e.__iterate(function(e){n.push(Ji(e))}),n}var Zi=function(e){function t(t){return null==t?oa():Qi(t)&&!ar(t)?t:oa().withMutations(function(n){var r=e(t);Eo(r.size),r.forEach(function(e){return n.add(e)})})}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.of=function(){return this(arguments)},t.fromKeys=function(e){return this(Xn(e).keySeq())},t.intersect=function(e){return(e=Yn(e).toArray()).length?ta.intersect.apply(t(e.pop()),e):oa()},t.union=function(e){return(e=Yn(e).toArray()).length?ta.union.apply(t(e.pop()),e):oa()},t.prototype.toString=function(){return this.__toString("Set {","}")},t.prototype.has=function(e){return this._map.has(e)},t.prototype.add=function(e){return na(this,this._map.set(e,e))},t.prototype.remove=function(e){return na(this,this._map.remove(e))},t.prototype.clear=function(){return na(this,this._map.clear())},t.prototype.map=function(e,t){var n=this,r=!1,o=na(this,this._map.mapEntries(function(o){var i=o[1],a=e.call(t,i,i,n);return a!==i&&(r=!0),[a,a]},t));return r?o:this},t.prototype.union=function(){for(var t=[],n=arguments.length;n--;)t[n]=arguments[n];return 0===(t=t.filter(function(e){return 0!==e.size})).length?this:0!==this.size||this.__ownerID||1!==t.length?this.withMutations(function(n){for(var r=0;r<t.length;r++)"string"==typeof t[r]?n.add(t[r]):e(t[r]).forEach(function(e){return n.add(e)})}):this.constructor(t[0])},t.prototype.intersect=function(){for(var t=[],n=arguments.length;n--;)t[n]=arguments[n];if(0===t.length)return this;t=t.map(function(t){return e(t)});var r=[];return this.forEach(function(e){t.every(function(t){return t.includes(e)})||r.push(e)}),this.withMutations(function(e){r.forEach(function(t){e.remove(t)})})},t.prototype.subtract=function(){for(var t=[],n=arguments.length;n--;)t[n]=arguments[n];if(0===t.length)return this;t=t.map(function(t){return e(t)});var r=[];return this.forEach(function(e){t.some(function(t){return t.includes(e)})&&r.push(e)}),this.withMutations(function(e){r.forEach(function(t){e.remove(t)})})},t.prototype.sort=function(e){return Sa(po(this,e))},t.prototype.sortBy=function(e,t){return Sa(po(this,t,e))},t.prototype.wasAltered=function(){return this._map.wasAltered()},t.prototype.__iterate=function(e,t){var n=this;return this._map.__iterate(function(t){return e(t,t,n)},t)},t.prototype.__iterator=function(e,t){return this._map.__iterator(e,t)},t.prototype.__ensureOwner=function(e){if(e===this.__ownerID)return this;var t=this._map.__ensureOwner(e);return e?this.__make(t,e):0===this.size?this.__empty():(this.__ownerID=e,this._map=t,this)},t}(Zn);Zi.isSet=Qi;var ea,ta=Zi.prototype;function na(e,t){return e.__ownerID?(e.size=t.size,e._map=t,e):t===e._map?e:0===t.size?e.__empty():e.__make(t)}function ra(e,t){var n=Object.create(ta);return n.size=e?e.size:0,n._map=e,n.__ownerID=t,n}function oa(){return ea||(ea=ra(fi()))}ta[Ki]=!0,ta[zn]=ta.remove,ta.merge=ta.concat=ta.union,ta.withMutations=Go,ta.asImmutable=Xo,ta["@@transducer/init"]=ta.asMutable=Yo,ta["@@transducer/step"]=function(e,t){return e.add(t)},ta["@@transducer/result"]=function(e){return e.asImmutable()},ta.__empty=oa,ta.__make=ra;var ia,aa=function(e){function t(e,n,r){if(void 0===r&&(r=1),!(this instanceof t))return new t(e,n,r);if(xo(0!==r,"Cannot step a Range by 0"),xo(void 0!==e,"You must define a start value when using Range"),xo(void 0!==n,"You must define an end value when using Range"),r=Math.abs(r),n<e&&(r=-r),this._start=e,this._end=n,this._step=r,this.size=Math.max(0,Math.ceil((n-e)/r-1)+1),0===this.size){if(ia)return ia;ia=this}}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.prototype.toString=function(){return 0===this.size?"Range []":"Range [ "+this._start+"..."+this._end+(1!==this._step?" by "+this._step:"")+" ]"},t.prototype.get=function(e,t){return this.has(e)?this._start+Dn(this,e)*this._step:t},t.prototype.includes=function(e){var t=(e-this._start)/this._step;return t>=0&&t<this.size&&t===Math.floor(t)},t.prototype.slice=function(e,n){return Ln(e,n,this.size)?this:(e=Fn(e,this.size),(n=Bn(n,this.size))<=e?new t(0,0):new t(this.get(e,this._end),this.get(n,this._end),this._step))},t.prototype.indexOf=function(e){var t=e-this._start;if(t%this._step===0){var n=t/this._step;if(n>=0&&n<this.size)return n}return-1},t.prototype.lastIndexOf=function(e){return this.indexOf(e)},t.prototype.__iterate=function(e,t){for(var n=this.size,r=this._step,o=t?this._start+(n-1)*r:this._start,i=0;i!==n&&!1!==e(o,t?n-++i:i++,this);)o+=t?-r:r;return i},t.prototype.__iterator=function(e,t){var n=this.size,r=this._step,o=t?this._start+(n-1)*r:this._start,i=0;return new cr(function(){if(i===n)return{value:void 0,done:!0};var a=o;return o+=t?-r:r,fr(e,t?n-++i:i++,a)})},t.prototype.equals=function(e){return e instanceof t?this._start===e._start&&this._end===e._end&&this._step===e._step:Yi(this,e)},t}(wr);function ua(e,t,n){for(var r=Oo(t),o=0;o!==r.length;)if((e=Io(e,r[o++],Nn))===Nn)return n;return e}function la(e,t){return ua(this,e,t)}function sa(){Eo(this.size);var e={};return this.__iterate(function(t,n){e[n]=t}),e}Yn.Iterator=cr,Xi(Yn,{toArray:function(){Eo(this.size);var e=new Array(this.size||0),t=Hn(this),n=0;return this.__iterate(function(r,o){e[n++]=t?[o,r]:r}),e},toIndexedSeq:function(){return new to(this)},toJS:function(){return Ji(this)},toKeyedSeq:function(){return new eo(this,!0)},toMap:function(){return Zo(this.toKeyedSeq())},toObject:sa,toOrderedMap:function(){return Di(this.toKeyedSeq())},toOrderedSet:function(){return Sa(Hn(this)?this.valueSeq():this)},toSet:function(){return Zi(Hn(this)?this.valueSeq():this)},toSetSeq:function(){return new no(this)},toSeq:function(){return Qn(this)?this.toIndexedSeq():Hn(this)?this.toKeyedSeq():this.toSetSeq()},toStack:function(){return Wi(Hn(this)?this.valueSeq():this)},toList:function(){return ki(Hn(this)?this.valueSeq():this)},toString:function(){return"[Collection]"},__toString:function(e,t){return 0===this.size?e+t:e+" "+this.toSeq().map(this.__toStringMapper).join(", ")+" "+t},concat:function(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];return vo(this,function(e,t){var n=Hn(e),r=[e].concat(t).map(function(e){return $n(e)?n&&(e=Xn(e)):e=n?Pr(e):zr(Array.isArray(e)?e:[e]),e}).filter(function(e){return 0!==e.size});if(0===r.length)return e;if(1===r.length){var o=r[0];if(o===e||n&&Hn(o)||Qn(e)&&Qn(o))return o}return new co(r)}(this,e))},includes:function(e){return this.some(function(t){return Rr(t,e)})},entries:function(){return this.__iterator(2)},every:function(e,t){Eo(this.size);var n=!0;return this.__iterate(function(r,o,i){if(!e.call(t,r,o,i))return n=!1,!1}),n},filter:function(e,t){return vo(this,uo(this,e,t,!0))},partition:function(e,t){return function(e,t,n){var r=Hn(e),o=[[],[]];e.__iterate(function(i,a){o[t.call(n,i,a,e)?1:0].push(r?[a,i]:i)});var i=bo(e);return o.map(function(t){return vo(e,i(t))})}(this,e,t)},find:function(e,t,n){var r=this.findEntry(e,t);return r?r[1]:n},forEach:function(e,t){return Eo(this.size),this.__iterate(t?e.bind(t):e)},join:function(e){Eo(this.size),e=void 0!==e?""+e:",";var t="",n=!0;return this.__iterate(function(r){n?n=!1:t+=e,t+=null!=r?r.toString():""}),t},keys:function(){return this.__iterator(0)},map:function(e,t){return vo(this,io(this,e,t))},reduce:function(e,t,n){return ha(this,e,t,n,arguments.length<2,!1)},reduceRight:function(e,t,n){return ha(this,e,t,n,arguments.length<2,!0)},reverse:function(){return vo(this,ao(this,!0))},slice:function(e,t){return vo(this,lo(this,e,t,!0))},some:function(e,t){Eo(this.size);var n=!1;return this.__iterate(function(r,o,i){if(e.call(t,r,o,i))return n=!0,!1}),n},sort:function(e){return vo(this,po(this,e))},values:function(){return this.__iterator(1)},butLast:function(){return this.slice(0,-1)},isEmpty:function(){return void 0!==this.size?0===this.size:!this.some(function(){return!0})},count:function(e,t){return Rn(e?this.toSeq().filter(e,t):this)},countBy:function(e,t){return function(e,t,n){var r=Zo().asMutable();return e.__iterate(function(o,i){r.update(t.call(n,o,i,e),0,function(e){return e+1})}),r.asImmutable()}(this,e,t)},equals:function(e){return Yi(this,e)},entrySeq:function(){var e=this;if(e._cache)return new kr(e._cache);var t=e.toSeq().map(ma).toIndexedSeq();return t.fromEntrySeq=function(){return e.toSeq()},t},filterNot:function(e,t){return this.filter(va(e),t)},findEntry:function(e,t,n){var r=n;return this.__iterate(function(n,o,i){if(e.call(t,n,o,i))return r=[o,n],!1}),r},findKey:function(e,t){var n=this.findEntry(e,t);return n&&n[0]},findLast:function(e,t,n){return this.toKeyedSeq().reverse().find(e,t,n)},findLastEntry:function(e,t,n){return this.toKeyedSeq().reverse().findEntry(e,t,n)},findLastKey:function(e,t){return this.toKeyedSeq().reverse().findKey(e,t)},first:function(e){return this.find(An,null,e)},flatMap:function(e,t){return vo(this,function(e,t,n){var r=bo(e);return e.toSeq().map(function(o,i){return r(t.call(n,o,i,e))}).flatten(!0)}(this,e,t))},flatten:function(e){return vo(this,fo(this,e,!0))},fromEntrySeq:function(){return new ro(this)},get:function(e,t){return this.find(function(t,n){return Rr(n,e)},void 0,t)},getIn:la,groupBy:function(e,t){return function(e,t,n){var r=Hn(e),o=(ar(e)?Di():Zo()).asMutable();e.__iterate(function(i,a){o.update(t.call(n,i,a,e),function(e){return(e=e||[]).push(r?[a,i]:i),e})});var i=bo(e);return o.map(function(t){return vo(e,i(t))}).asImmutable()}(this,e,t)},has:function(e){return this.get(e,Nn)!==Nn},hasIn:function(e){return ua(this,e,Nn)!==Nn},isSubset:function(e){return e="function"==typeof e.includes?e:Yn(e),this.every(function(t){return e.includes(t)})},isSuperset:function(e){return(e="function"==typeof e.isSubset?e:Yn(e)).isSubset(this)},keyOf:function(e){return this.findKey(function(t){return Rr(t,e)})},keySeq:function(){return this.toSeq().map(ya).toIndexedSeq()},last:function(e){return this.toSeq().reverse().first(e)},lastKeyOf:function(e){return this.toKeyedSeq().reverse().keyOf(e)},max:function(e){return ho(this,e)},maxBy:function(e,t){return ho(this,t,e)},min:function(e){return ho(this,e?ga(e):_a)},minBy:function(e,t){return ho(this,t?ga(t):_a,e)},rest:function(){return this.slice(1)},skip:function(e){return 0===e?this:this.slice(Math.max(0,e))},skipLast:function(e){return 0===e?this:this.slice(0,-Math.max(0,e))},skipWhile:function(e,t){return vo(this,so(this,e,t,!0))},skipUntil:function(e,t){return this.skipWhile(va(e),t)},sortBy:function(e,t){return vo(this,po(this,t,e))},take:function(e){return this.slice(0,Math.max(0,e))},takeLast:function(e){return this.slice(-Math.max(0,e))},takeWhile:function(e,t){return vo(this,function(e,t,n){var r=_o(e);return r.__iterateUncached=function(r,o){var i=this;if(o)return this.cacheResult().__iterate(r,o);var a=0;return e.__iterate(function(e,o,u){return t.call(n,e,o,u)&&++a&&r(e,o,i)}),a},r.__iteratorUncached=function(r,o){var i=this;if(o)return this.cacheResult().__iterator(r,o);var a=e.__iterator(2,o),u=!0;return new cr(function(){if(!u)return{value:void 0,done:!0};var e=a.next();if(e.done)return e;var o=e.value,l=o[0],s=o[1];return t.call(n,s,l,i)?2===r?e:fr(r,l,s,e):(u=!1,{value:void 0,done:!0})})},r}(this,e,t))},takeUntil:function(e,t){return this.takeWhile(va(e),t)},update:function(e){return e(this)},valueSeq:function(){return this.toIndexedSeq()},hashCode:function(){return this.__hash||(this.__hash=function(e){if(e.size===1/0)return 0;var t=ar(e),n=Hn(e),r=t?1:0;return e.__iterate(n?t?function(e,t){r=31*r+wa(Fr(e),Fr(t))|0}:function(e,t){r=r+wa(Fr(e),Fr(t))|0}:t?function(e){r=31*r+Fr(e)|0}:function(e){r=r+Fr(e)|0}),function(e,t){return t=Dr(t,3432918353),t=Dr(t<<15|t>>>-15,461845907),t=Dr(t<<13|t>>>-13,5),t=Dr((t=(t+3864292196|0)^e)^t>>>16,2246822507),Ar((t=Dr(t^t>>>13,3266489909))^t>>>16)}(e.size,r)}(this))}});var ca=Yn.prototype;ca[qn]=!0,ca[sr]=ca.values,ca.toJSON=ca.toArray,ca.__toStringMapper=jo,ca.inspect=ca.toSource=function(){return this.toString()},ca.chain=ca.flatMap,ca.contains=ca.includes,Xi(Xn,{flip:function(){return vo(this,oo(this))},mapEntries:function(e,t){var n=this,r=0;return vo(this,this.toSeq().map(function(o,i){return e.call(t,[i,o],r++,n)}).fromEntrySeq())},mapKeys:function(e,t){var n=this;return vo(this,this.toSeq().flip().map(function(r,o){return e.call(t,r,o,n)}).flip())}});var fa=Xn.prototype;fa[Vn]=!0,fa[sr]=ca.entries,fa.toJSON=sa,fa.__toStringMapper=function(e,t){return jo(t)+": "+jo(e)},Xi(Jn,{toKeyedSeq:function(){return new eo(this,!1)},filter:function(e,t){return vo(this,uo(this,e,t,!1))},findIndex:function(e,t){var n=this.findEntry(e,t);return n?n[0]:-1},indexOf:function(e){var t=this.keyOf(e);return void 0===t?-1:t},lastIndexOf:function(e){var t=this.lastKeyOf(e);return void 0===t?-1:t},reverse:function(){return vo(this,ao(this,!1))},slice:function(e,t){return vo(this,lo(this,e,t,!1))},splice:function(e,t){var n=arguments.length;if(t=Math.max(t||0,0),0===n||2===n&&!t)return this;e=Fn(e,e<0?this.count():this.size);var r=this.slice(0,e);return vo(this,1===n?r:r.concat(ko(arguments,2),this.slice(e+t)))},findLastIndex:function(e,t){var n=this.findLastEntry(e,t);return n?n[0]:-1},first:function(e){return this.get(0,e)},flatten:function(e){return vo(this,fo(this,e,!1))},get:function(e,t){return(e=Dn(this,e))<0||this.size===1/0||void 0!==this.size&&e>this.size?t:this.find(function(t,n){return n===e},void 0,t)},has:function(e){return(e=Dn(this,e))>=0&&(void 0!==this.size?this.size===1/0||e<this.size:-1!==this.indexOf(e))},interpose:function(e){return vo(this,function(e,t){var n=_o(e);return n.size=e.size&&2*e.size-1,n.__iterateUncached=function(n,r){var o=this,i=0;return e.__iterate(function(e){return(!i||!1!==n(t,i++,o))&&!1!==n(e,i++,o)},r),i},n.__iteratorUncached=function(n,r){var o,i=e.__iterator(1,r),a=0;return new cr(function(){return(!o||a%2)&&(o=i.next()).done?o:a%2?fr(n,a++,t):fr(n,a++,o.value,o)})},n}(this,e))},interleave:function(){var e=[this].concat(ko(arguments)),t=mo(this.toSeq(),wr.of,e),n=t.flatten(!0);return t.size&&(n.size=t.size*e.length),vo(this,n)},keySeq:function(){return aa(0,this.size)},last:function(e){return this.get(-1,e)},skipWhile:function(e,t){return vo(this,so(this,e,t,!1))},zip:function(){return vo(this,mo(this,ba,[this].concat(ko(arguments))))},zipAll:function(){return vo(this,mo(this,ba,[this].concat(ko(arguments)),!0))},zipWith:function(e){var t=ko(arguments);return t[0]=this,vo(this,mo(this,e,t))}});var da=Jn.prototype;da[Kn]=!0,da[ir]=!0,Xi(Zn,{get:function(e,t){return this.has(e)?e:t},includes:function(e){return this.has(e)},keySeq:function(){return this.valueSeq()}});var pa=Zn.prototype;function ha(e,t,n,r,o,i){return Eo(e.size),e.__iterate(function(e,i,a){o?(o=!1,n=e):n=t.call(r,n,e,i,a)},i),n}function ya(e,t){return t}function ma(e,t){return[t,e]}function va(e){return function(){return!e.apply(this,arguments)}}function ga(e){return function(){return-e.apply(this,arguments)}}function ba(){return ko(arguments)}function _a(e,t){return e<t?1:e>t?-1:0}function wa(e,t){return e^t+2654435769+(e<<6)+(e>>2)|0}pa.has=ca.includes,pa.contains=pa.includes,pa.keys=pa.values,Xi(_r,fa),Xi(wr,da),Xi(Sr,pa);var Sa=function(e){function t(e){return null==e?Oa():Gi(e)?e:Oa().withMutations(function(t){var n=Zn(e);Eo(n.size),n.forEach(function(e){return t.add(e)})})}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.of=function(){return this(arguments)},t.fromKeys=function(e){return this(Xn(e).keySeq())},t.prototype.toString=function(){return this.__toString("OrderedSet {","}")},t}(Zi);Sa.isOrderedSet=Gi;var ka,xa=Sa.prototype;function Ea(e,t){var n=Object.create(xa);return n.size=e?e.size:0,n._map=e,n.__ownerID=t,n}function Oa(){return ka||(ka=Ea(Li()))}xa[ir]=!0,xa.zip=da.zip,xa.zipWith=da.zipWith,xa.zipAll=da.zipAll,xa.__empty=Oa,xa.__make=Ea;var Ca=function(e,t){var n;!function(e){if(rr(e))throw new Error("Can not call `Record` with an immutable Record as default values. Use a plain javascript object instead.");if(or(e))throw new Error("Can not call `Record` with an immutable Collection as default values. Use a plain javascript object instead.");if(null===e||"object"!=typeof e)throw new Error("Can not call `Record` with a non-object as default values. Use a plain javascript object instead.")}(e);var r=function(i){var a=this;if(i instanceof r)return i;if(!(this instanceof r))return new r(i);if(!n){n=!0;var u=Object.keys(e),l=o._indices={};o._name=t,o._keys=u,o._defaultValues=e;for(var s=0;s<u.length;s++){var c=u[s];l[c]=s,o[c]?"object"==typeof console&&console.warn&&console.warn("Cannot define "+ja(this)+' with property "'+c+'" since that property name is part of the Record API.'):Na(o,c)}}return this.__ownerID=void 0,this._values=ki().withMutations(function(e){e.setSize(a._keys.length),Xn(i).forEach(function(t,n){e.set(a._indices[n],t===a._defaultValues[n]?void 0:t)})}),this},o=r.prototype=Object.create(Pa);return o.constructor=r,t&&(r.displayName=t),r};Ca.prototype.toString=function(){for(var e,t=ja(this)+" { ",n=this._keys,r=0,o=n.length;r!==o;r++)t+=(r?", ":"")+(e=n[r])+": "+jo(this.get(e));return t+" }"},Ca.prototype.equals=function(e){return this===e||rr(e)&&Ia(this).equals(Ia(e))},Ca.prototype.hashCode=function(){return Ia(this).hashCode()},Ca.prototype.has=function(e){return this._indices.hasOwnProperty(e)},Ca.prototype.get=function(e,t){if(!this.has(e))return t;var n=this._indices[e],r=this._values.get(n);return void 0===r?this._defaultValues[e]:r},Ca.prototype.set=function(e,t){if(this.has(e)){var n=this._values.set(this._indices[e],t===this._defaultValues[e]?void 0:t);if(n!==this._values&&!this.__ownerID)return za(this,n)}return this},Ca.prototype.remove=function(e){return this.set(e)},Ca.prototype.clear=function(){var e=this._values.clear().setSize(this._keys.length);return this.__ownerID?this:za(this,e)},Ca.prototype.wasAltered=function(){return this._values.wasAltered()},Ca.prototype.toSeq=function(){return Ia(this)},Ca.prototype.toJS=function(){return Ji(this)},Ca.prototype.entries=function(){return this.__iterator(2)},Ca.prototype.__iterator=function(e,t){return Ia(this).__iterator(e,t)},Ca.prototype.__iterate=function(e,t){return Ia(this).__iterate(e,t)},Ca.prototype.__ensureOwner=function(e){if(e===this.__ownerID)return this;var t=this._values.__ensureOwner(e);return e?za(this,t,e):(this.__ownerID=e,this._values=t,this)},Ca.isRecord=rr,Ca.getDescriptiveName=ja;var Pa=Ca.prototype;function za(e,t,n){var r=Object.create(Object.getPrototypeOf(e));return r._values=t,r.__ownerID=n,r}function ja(e){return e.constructor.displayName||e.constructor.name||"Record"}function Ia(e){return Pr(e._keys.map(function(t){return[t,e.get(t)]}))}function Na(e,t){try{Object.defineProperty(e,t,{get:function(){return this.get(t)},set:function(e){xo(this.__ownerID,"Cannot set on an immutable record."),this.set(t,e)}})}catch(e){}}function Ta(e,t){return Ma([],t||Ra,e,"",t&&t.length>2?[]:void 0,{"":e})}function Ma(e,t,n,r,o,i){if("string"!=typeof n&&!or(n)&&(gr(n)||pr(n)||Po(n))){if(~e.indexOf(n))throw new TypeError("Cannot convert circular structure to Immutable");e.push(n),o&&""!==r&&o.push(r);var a=t.call(i,r,br(n).map(function(r,i){return Ma(e,t,r,i,o,n)}),o&&o.slice());return e.pop(),o&&o.pop(),a}return n}function Ra(e,t){return Qn(t)?t.toList():Hn(t)?t.toMap():t.toSet()}Pa[nr]=!0,Pa[zn]=Pa.remove,Pa.deleteIn=Pa.removeIn=Do,Pa.getIn=la,Pa.hasIn=ca.hasIn,Pa.merge=Bo,Pa.mergeWith=Uo,Pa.mergeIn=Ko,Pa.mergeDeep=Vo,Pa.mergeDeepWith=Ho,Pa.mergeDeepIn=Qo,Pa.setIn=Ro,Pa.update=Lo,Pa.updateIn=Fo,Pa.withMutations=Go,Pa.asMutable=Yo,Pa.asImmutable=Xo,Pa[sr]=Pa.entries,Pa.toJSON=Pa.toObject=ca.toObject,Pa.inspect=Pa.toSource=function(){return this.toString()};var Da=function(e){return e.valueSeq()};function Aa(e){return Aa="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Aa(e)}function La(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,Wa(r.key),r)}}function Fa(){try{var e=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){}))}catch(e){}return(Fa=function(){return!!e})()}function Ba(e){return Ba=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},Ba(e)}function Ua(e,t){return Ua=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},Ua(e,t)}function Wa(e){var t=function(e){if("object"!=Aa(e)||!e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var n=t.call(e,"string");if("object"!=Aa(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==Aa(t)?t:t+""}var qa=function(t){function n(){var e,t,r,o;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,n);for(var i=arguments.length,a=new Array(i),u=0;u<i;u++)a[u]=arguments[u];return e=function(e,t,n){return t=Ba(t),function(e,t){if(t&&("object"==Aa(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}(e,Fa()?Reflect.construct(t,n||[],Ba(e).constructor):t.apply(e,n))}(this,n,[].concat(a)),t=e,o=function(t,n){n?e.props.selectCourse(t):e.props.unSelectCourse(t)},(r=Wa(r="onChangeRow"))in t?Object.defineProperty(t,r,{value:o,enumerable:!0,configurable:!0,writable:!0}):t[r]=o,e}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&Ua(e,t)}(n,t),r=n,o=[{key:"componentDidMount",value:function(){this.props.fetchCourses()}},{key:"render",value:function(){var t=this,n=this.props.listCourses;return e.createElement("table",{id:"CourseList",className:Ut($a.table)},e.createElement("thead",{className:Ut($a.thead)},e.createElement(En,{textFirstCell:"Available courses",isHeader:!0}),e.createElement(En,{textFirstCell:"Course name",textSecondCell:"Credit",isHeader:!0})),e.createElement("tbody",null,0===n.length?e.createElement(En,{textFirstCell:"No course available yet",isHeader:!1}):n.map(function(n){return e.createElement(En,{key:n.get("id"),textFirstCell:n.get("name"),textSecondCell:String(n.get("credit")),isHeader:!1,isChecked:n.get("isSelected"),onChangeRow:t.onChangeRow,id:n.get("id")})})))}}],o&&La(r.prototype,o),Object.defineProperty(r,"prototype",{writable:!1}),r;var r,o}(e.Component),$a=Bt.create({table:{width:"80%",border:"1px solid #ddd",borderCollapse:"collapse",marginTop:"2rem",marginLeft:"auto",marginRight:"auto"},thead:{borderBottom:"2px solid #ddd",padding:"0.5rem",textAlign:"left"}});qa.propTypes={listCourses:Y().array,fetchCourses:Y().func.isRequired,selectCourse:Y().func.isRequired,unSelectCourse:Y().func.isRequired},qa.defaultProps={listCourses:[]};const Va=q(function(e){return{listCourses:Da(e.courses).toArray()}},{fetchCourses:function(){return function(e){return fetch("/courses.json").then(function(e){return e.json()}).then(function(t){return e(function(e){return{type:Pn,data:e}}(t))}).catch(function(e){console.error("Error fetching courses:",e)})}},selectCourse:function(e){return{type:On,index:e}},unSelectCourse:function(e){return{type:Cn,index:e}}})(qa),Ha=o.p+"f43f9b317d0c13a73eed49b0ae650fdd.png";function Ka(e){return Ka="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Ka(e)}function Qa(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,Ga(r.key),r)}}function Ga(e){var t=function(e){if("object"!=Ka(e)||!e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var n=t.call(e,"string");if("object"!=Ka(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==Ka(t)?t:t+""}function Ya(){try{var e=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){}))}catch(e){}return(Ya=function(){return!!e})()}function Xa(e){return Xa=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},Xa(e)}function Ja(e,t){return Ja=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},Ja(e,t)}var Za=function(t){function n(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,n),function(e,t,n){return t=Xa(t),function(e,t){if(t&&("object"==Ka(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}(e,Ya()?Reflect.construct(t,n||[],Xa(e).constructor):t.apply(e,n))}(this,n,arguments)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&Ja(e,t)}(n,t),r=n,(o=[{key:"render",value:function(){var t=this.props,n=t.type,r=t.html,o=t.value,i=t.markAsRead,a=t.id,u="urgent"===n?eu.urgent:eu.default;return r?e.createElement("li",{className:Ut(u,eu.item),"data-notification-type":n,dangerouslySetInnerHTML:r,onClick:function(){return i(a)}}):e.createElement("li",{className:Ut(u,eu.item),"data-notification-type":n,onClick:function(){return i(a)}},o)}}])&&Qa(r.prototype,o),Object.defineProperty(r,"prototype",{writable:!1}),r;var r,o}(e.PureComponent),eu=Bt.create({item:{padding:"4px",marginInline:"16px",fontSize:"16px","@media (max-width: 900px)":{width:"100%",borderBottom:"1px solid black",fontSize:"16px"}},default:{color:"blue"},urgent:{color:"red",fontWeight:"bold"}});Za.defaultProps={type:"default",markAsRead:function(){},id:0},Za.propTypes={html:Y().shape({__html:Y().string}),type:Y().string.isRequired,value:Y().string,markAsRead:Y().func,id:Y().number.isRequired};const tu=Za;var nu="MARK_AS_READ",ru="SET_TYPE_FILTER",ou="FETCH_NOTIFICATIONS_SUCCESS",iu="SET_LOADING_STATE",au="DEFAULT",uu="URGENT";function lu(t){var n=t.displayDrawer,r=t.listNotifications,o=t.handleDisplayDrawer,i=t.handleHideDrawer,a=t.markNotificationAsRead,u=t.setNotificationFilter;return e.createElement(e.Fragment,null,!n&&e.createElement("div",{className:Ut(su.menuItem),onClick:o},e.createElement("p",null,"Your notifications")),n&&e.createElement("div",{className:Ut(su.Notifications)},e.createElement("button",{style:{color:"#3a3a3a",fontWeight:"bold",background:"none",border:"none",fontSize:"15px",position:"absolute",right:"2px",top:"2px",cursor:"pointer"},"aria-label":"Close",onClick:i},e.createElement("img",{className:Ut(su.img),src:Ha,alt:"closeIcon"})),0===r.length?e.createElement("p",null,"No new notification for now"):e.createElement(e.Fragment,null,e.createElement("p",{className:Ut(su.p)},"Here is the list of notifications"),e.createElement("button",{className:Ut(su.filterButton),onClick:function(){return u(uu)}},"‼️"),e.createElement("button",{className:Ut(su.filterButton),onClick:function(){return u(au)}},"💠"),e.createElement("ul",{className:Ut(su.notificationsList)},r.map(function(t){var n=t.id,r=t.type,o=t.value,i=t.html;return e.createElement(tu,{key:n,id:n,type:r,value:o,html:i,markAsRead:a})})))))}var su=Bt.create({Notifications:{top:"2rem",right:"1rem",position:"absolute",padding:"0 0 0 1.5rem",border:"2px dashed #e0354b",fontSize:"20px",zIndex:"100",backgroundColor:"white","@media (max-width: 900px)":{width:"100%",padding:"0",position:"relative",right:0,left:0,bottom:0,height:"100%",border:"none"}},menuItem:{top:"0",right:"0",position:"absolute",textAlign:"right",marginRight:"1rem",padding:"0.5rem 0",cursor:"pointer",zIndex:"100",":hover":{animationName:[{"0%":{opacity:.5},"100%":{opacity:1}},{"0%":{transform:"translateY(0px)"},"25%":{transform:"translateY(-5px)"},"50%":{transform:"translateY(0px)"},"75%":{transform:"translateY(5px)"},"100%":{transform:"translateY(0px)"}}],animationDuration:["1s","0.5s"],animationIterationCount:3}},notificationsList:{padding:0,"@media (max-width: 900px)":{padding:0}},p:{margin:"0",marginTop:"15px"},img:{marginTop:"5px",width:"15px"},filterButton:{backgroundColor:"transparent",border:"1px solid #ddd",borderRadius:"4px",padding:"8px 12px",margin:"0 5px 10px 0",cursor:"pointer",fontSize:"16px",":hover":{backgroundColor:"#f5f5f5"}}});lu.propTypes={displayDrawer:Y().bool,listNotifications:Y().array,handleDisplayDrawer:Y().func,handleHideDrawer:Y().func,markNotificationAsRead:Y().func,setNotificationFilter:Y().func},lu.defaultProps={displayDrawer:!1,listNotifications:[],handleDisplayDrawer:function(){},handleHideDrawer:function(){},markNotificationAsRead:function(){},setNotificationFilter:function(){}};const cu=lu;function fu(e){return{type:iu,isLoading:e}}var du=e=>Array.isArray(e)?e:[e];Symbol(),Object.getPrototypeOf({});var pu="undefined"!=typeof WeakRef?WeakRef:class{constructor(e){this.value=e}deref(){return this.value}};function hu(){return{s:0,v:void 0,o:null,p:null}}function yu(e,t={}){let n={s:0,v:void 0,o:null,p:null};const{resultEqualityCheck:r}=t;let o,i=0;function a(){let t=n;const{length:a}=arguments;for(let e=0,n=a;e<n;e++){const n=arguments[e];if("function"==typeof n||"object"==typeof n&&null!==n){let e=t.o;null===e&&(t.o=e=new WeakMap);const r=e.get(n);void 0===r?(t=hu(),e.set(n,t)):t=r}else{let e=t.p;null===e&&(t.p=e=new Map);const r=e.get(n);void 0===r?(t=hu(),e.set(n,t)):t=r}}const u=t;let l;if(1===t.s)l=t.v;else if(l=e.apply(null,arguments),i++,r){const e=o?.deref?.()??o;null!=e&&r(e,l)&&(l=e,0!==i&&i--),o="object"==typeof l&&null!==l||"function"==typeof l?new pu(l):l}return u.s=1,u.v=l,l}return a.clearCache=()=>{n={s:0,v:void 0,o:null,p:null},a.resetResultsCount()},a.resultsCount=()=>i,a.resetResultsCount=()=>{i=0},a}function mu(e,...t){const n="function"==typeof e?{memoize:e,memoizeOptions:t}:e,r=(...e)=>{let t,r=0,o=0,i={},a=e.pop();"object"==typeof a&&(i=a,a=e.pop()),function(e,t="expected a function, instead received "+typeof e){if("function"!=typeof e)throw new TypeError(t)}(a,`createSelector expects an output function after the inputs, but received: [${typeof a}]`);const u={...n,...i},{memoize:l,memoizeOptions:s=[],argsMemoize:c=yu,argsMemoizeOptions:f=[],devModeChecks:d={}}=u,p=du(s),h=du(f),y=function(e){const t=Array.isArray(e[0])?e[0]:e;return function(e,t="expected all items to be functions, instead received the following types: "){if(!e.every(e=>"function"==typeof e)){const n=e.map(e=>"function"==typeof e?`function ${e.name||"unnamed"}()`:typeof e).join(", ");throw new TypeError(`${t}[${n}]`)}}(t,"createSelector expects all input-selectors to be functions, but received the following types: "),t}(e),m=l(function(){return r++,a.apply(null,arguments)},...p),v=c(function(){o++;const e=function(e,t){const n=[],{length:r}=e;for(let o=0;o<r;o++)n.push(e[o].apply(null,t));return n}(y,arguments);return t=m.apply(null,e),t},...h);return Object.assign(v,{resultFunc:a,memoizedResultFunc:m,dependencies:y,dependencyRecomputations:()=>o,resetDependencyRecomputations:()=>{o=0},lastResult:()=>t,recomputations:()=>r,resetRecomputations:()=>{r=0},memoize:l,argsMemoize:c})};return Object.assign(r,{withTypes:()=>r}),r}var vu=mu(yu),gu=Object.assign((e,t=vu)=>{!function(e,t="expected an object, instead received "+typeof e){if("object"!=typeof e)throw new TypeError(t)}(e,"createStructuredSelector expects first argument to be an object where each property is a selector, instead received a "+typeof e);const n=Object.keys(e);return t(n.map(t=>e[t]),(...e)=>e.reduce((e,t,r)=>(e[n[r]]=t,e),{}))},{withTypes:()=>gu}),bu=vu([function(e){return e.get("filter")},function(e){return e.get("notifications")}],function(e,t){var n=t.filter(function(e){return!1===e.get("isRead")});return e===au?n:e===uu?n.filter(function(e){return"urgent"===e.get("type")}):n});function _u(e){return _u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},_u(e)}function wu(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,Su(r.key),r)}}function Su(e){var t=function(e){if("object"!=_u(e)||!e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var n=t.call(e,"string");if("object"!=_u(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==_u(t)?t:t+""}function ku(){try{var e=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){}))}catch(e){}return(ku=function(){return!!e})()}function xu(e){return xu=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},xu(e)}function Eu(e,t){return Eu=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},Eu(e,t)}var Ou=function(t){function n(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,n),function(e,t,n){return t=xu(t),function(e,t){if(t&&("object"==_u(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}(e,ku()?Reflect.construct(t,n||[],xu(e).constructor):t.apply(e,n))}(this,n,arguments)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&Eu(e,t)}(n,t),r=n,(o=[{key:"componentDidMount",value:function(){this.props.fetchNotifications()}},{key:"render",value:function(){return e.createElement(cu,this.props)}}])&&wu(r.prototype,o),Object.defineProperty(r,"prototype",{writable:!1}),r;var r,o}(e.Component);const Cu=q(function(e){return{listNotifications:bu(e.notifications).valueSeq().toArray()}},{fetchNotifications:function(){return function(e){return e(fu(!0)),fetch("/notifications.json").then(function(e){return e.json()}).then(function(t){return e(function(e){return{type:ou,data:e}}(t))}).catch(function(e){console.error("Error fetching notifications:",e)}).finally(function(){e(fu(!1))})}},markNotificationAsRead:function(e){return{type:nu,index:e}},setNotificationFilter:function(e){return{type:ru,filter:e}}})(Ou);function Pu(t){var n=t.title,r=t.children;return e.createElement("div",{className:Ut(zu.bodySection)},e.createElement("h2",null,n),r)}var zu=Bt.create({bodySection:{padding:"0 20px 0 20px"}});Pu.propTypes={title:Y().string.isRequired,children:Y().node};const ju=Pu;function Iu(t){return e.createElement("div",{className:Ut(Nu.bodySectionWithMargin)},e.createElement(ju,t))}Iu.propTypes={title:Y().string.isRequired,children:Y().node};var Nu=Bt.create({bodySectionWithMargin:{marginBottom:"40px"}});const Tu=Iu;var Mu={email:"",password:"",isLoggedIn:!1};const Ru=e.createContext({user:Mu,logOut:function(){}});function Du(e){return Du="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Du(e)}function Au(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,Lu(r.key),r)}}function Lu(e){var t=function(e){if("object"!=Du(e)||!e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var n=t.call(e,"string");if("object"!=Du(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==Du(t)?t:t+""}function Fu(){try{var e=!Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){}))}catch(e){}return(Fu=function(){return!!e})()}function Bu(e){return Bu=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},Bu(e)}function Uu(e,t){return Uu=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},Uu(e,t)}var Wu=function(t){function n(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,n),(t=function(e,t,n){return t=Bu(t),function(e,t){if(t&&("object"==Du(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}(e,Fu()?Reflect.construct(t,n||[],Bu(e).constructor):t.apply(e,n))}(this,n,[e])).state={user:Mu,logOut:t.logOut},t.handleKeyDown=t.handleKeyDown.bind(t),t.logOut=t.logOut.bind(t),t}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&Uu(e,t)}(n,t),r=n,o=[{key:"logOut",value:function(){this.setState({user:Mu})}},{key:"componentDidMount",value:function(){document.addEventListener("keydown",this.handleKeyDown)}},{key:"componentWillUnmount",value:function(){document.removeEventListener("keydown",this.handleKeyDown)}},{key:"handleKeyDown",value:function(e){e.ctrlKey&&"h"===e.key&&(alert("Logging you out"),this.logOut())}},{key:"render",value:function(){var t=this.state,n=t.user,r=t.logOut,o=this.props,i=o.displayDrawer,a=o.displayNotificationDrawer,u=o.hideNotificationDrawer,l=o.loginRequest,s={user:n,logOut:r};return e.createElement(Ru.Provider,{value:s},e.createElement(Cu,{displayDrawer:i,handleDisplayDrawer:a,handleHideDrawer:u}),e.createElement("div",{className:Ut(qu.App)},e.createElement(Gt,null),n.isLoggedIn?e.createElement(Tu,{title:"Course list"},e.createElement(Va,null)):e.createElement(Tu,{title:"Log in to continue"},e.createElement(wn,{logIn:l})),e.createElement(ju,{title:"News from the School"},e.createElement("p",null,"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.")),e.createElement(pn,null)))}}],o&&Au(r.prototype,o),Object.defineProperty(r,"prototype",{writable:!1}),r;var r,o}(e.Component);Wu.propTypes={isLoggedIn:Y().bool,displayDrawer:Y().bool,displayNotificationDrawer:Y().func,hideNotificationDrawer:Y().func,loginRequest:Y().func,logout:Y().func},Wu.defaultProps={isLoggedIn:!1,displayDrawer:!1,displayNotificationDrawer:function(){},hideNotificationDrawer:function(){},loginRequest:function(){},logout:function(){}};var qu=Bt.create({App:{height:"100vh",maxWidth:"100vw",position:"relative",fontFamily:"Arial, Helvetica, sans-serif"}});const $u=q(function(e){return{isLoggedIn:e.ui.get("isUserLoggedIn"),displayDrawer:e.ui.get("isNotificationDrawerVisible")}},{displayNotificationDrawer:function(){return{type:Z}},hideNotificationDrawer:function(){return{type:ee}},loginRequest:function(e,t){return function(n){return n(function(e,t){return{type:X,user:{email:e,password:t}}}(e,t)),fetch("/login-success.json").then(function(e){if(e.ok)return e.json();throw new Error("API request failed")}).then(function(){n({type:te})}).catch(function(){n({type:ne})})}},logout:re})(Wu);function Vu(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function Hu(e,t,n){return t&&Vu(e.prototype,t),n&&Vu(e,n),e}function Ku(){return Ku=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},Ku.apply(this,arguments)}function Qu(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,e.__proto__=t}function Gu(e){return!(!e||"function"!=typeof e.hasOwnProperty||!(e.hasOwnProperty("__ownerID")||e._map&&e._map.hasOwnProperty("__ownerID")))}function Yu(e,t,n){return Object.keys(e).reduce(function(t,r){var o=""+r;return t.has(o)?t.set(o,n(t.get(o),e[o])):t},t)}var Xu=function(){function e(e,t,n){if(void 0===t&&(t={}),void 0===n&&(n={}),!e||"string"!=typeof e)throw new Error("Expected a string key for Entity, but found "+e+".");var r=n,o=r.idAttribute,i=void 0===o?"id":o,a=r.mergeStrategy,u=void 0===a?function(e,t){return Ku({},e,t)}:a,l=r.processStrategy,s=void 0===l?function(e){return Ku({},e)}:l,c=r.fallbackStrategy,f=void 0===c?function(e,t){}:c;this._key=e,this._getId="function"==typeof i?i:function(e){return function(t){return Gu(t)?t.get(e):t[e]}}(i),this._idAttribute=i,this._mergeStrategy=u,this._processStrategy=s,this._fallbackStrategy=f,this.define(t)}var t=e.prototype;return t.define=function(e){this.schema=Object.keys(e).reduce(function(t,n){var r,o=e[n];return Ku({},t,((r={})[n]=o,r))},this.schema||{})},t.getId=function(e,t,n){return this._getId(e,t,n)},t.merge=function(e,t){return this._mergeStrategy(e,t)},t.fallback=function(e,t){return this._fallbackStrategy(e,t)},t.normalize=function(e,t,n,r,o,i){var a=this,u=this.getId(e,t,n),l=this.key;if(l in i||(i[l]={}),u in i[l]||(i[l][u]=[]),i[l][u].some(function(t){return t===e}))return u;i[l][u].push(e);var s=this._processStrategy(e,t,n);return Object.keys(this.schema).forEach(function(t){if(s.hasOwnProperty(t)&&"object"==typeof s[t]){var n=a.schema[t],u="function"==typeof n?n(e):n;s[t]=r(s[t],s,t,u,o,i)}}),o(this,s,e,t,n),u},t.denormalize=function(e,t){var n=this;return Gu(e)?Yu(this.schema,e,t):(Object.keys(this.schema).forEach(function(r){if(e.hasOwnProperty(r)){var o=n.schema[r];e[r]=t(e[r],o)}}),e)},Hu(e,[{key:"key",get:function(){return this._key}},{key:"idAttribute",get:function(){return this._idAttribute}}]),e}(),Ju=function(){function e(e,t){t&&(this._schemaAttribute="string"==typeof t?function(e){return e[t]}:t),this.define(e)}var t=e.prototype;return t.define=function(e){this.schema=e},t.getSchemaAttribute=function(e,t,n){return!this.isSingleSchema&&this._schemaAttribute(e,t,n)},t.inferSchema=function(e,t,n){if(this.isSingleSchema)return this.schema;var r=this.getSchemaAttribute(e,t,n);return this.schema[r]},t.normalizeValue=function(e,t,n,r,o,i){var a=this.inferSchema(e,t,n);if(!a)return e;var u=r(e,t,n,a,o,i);return this.isSingleSchema||null==u?u:{id:u,schema:this.getSchemaAttribute(e,t,n)}},t.denormalizeValue=function(e,t){var n=Gu(e)?e.get("schema"):e.schema;return this.isSingleSchema||n?t((this.isSingleSchema?void 0:Gu(e)?e.get("id"):e.id)||e,this.isSingleSchema?this.schema:this.schema[n]):e},Hu(e,[{key:"isSingleSchema",get:function(){return!this._schemaAttribute}}]),e}(),Zu=function(e){function t(t,n){if(!n)throw new Error('Expected option "schemaAttribute" not found on UnionSchema.');return e.call(this,t,n)||this}Qu(t,e);var n=t.prototype;return n.normalize=function(e,t,n,r,o,i){return this.normalizeValue(e,t,n,r,o,i)},n.denormalize=function(e,t){return this.denormalizeValue(e,t)},t}(Ju),el=function(e){function t(){return e.apply(this,arguments)||this}Qu(t,e);var n=t.prototype;return n.normalize=function(e,t,n,r,o,i){var a=this;return Object.keys(e).reduce(function(t,n,u){var l,s=e[n];return null!=s?Ku({},t,((l={})[n]=a.normalizeValue(s,e,n,r,o,i),l)):t},{})},n.denormalize=function(e,t){var n=this;return Object.keys(e).reduce(function(r,o){var i,a=e[o];return Ku({},r,((i={})[o]=n.denormalizeValue(a,t),i))},{})},t}(Ju),tl=function(e){return Array.isArray(e)?e:Object.keys(e).map(function(t){return e[t]})},nl=function(e,t,n,r,o,i,a){return e=function(e){if(Array.isArray(e)&&e.length>1)throw new Error("Expected schema definition to be a single schema, but found "+e.length+".");return e[0]}(e),tl(t).map(function(t,u){return o(t,n,r,e,i,a)})},rl=function(e){function t(){return e.apply(this,arguments)||this}Qu(t,e);var n=t.prototype;return n.normalize=function(e,t,n,r,o,i){var a=this;return tl(e).map(function(e,u){return a.normalizeValue(e,t,n,r,o,i)}).filter(function(e){return null!=e})},n.denormalize=function(e,t){var n=this;return e&&e.map?e.map(function(e){return n.denormalizeValue(e,t)}):e},t}(Ju),ol=function(e,t,n,r,o,i,a){var u=Ku({},t);return Object.keys(e).forEach(function(n){var r=e[n],l="function"==typeof r?r(t):r,s=o(t[n],t,n,l,i,a);null==s?delete u[n]:u[n]=s}),u},il=function(e,t,n){if(Gu(t))return Yu(e,t,n);var r=Ku({},t);return Object.keys(e).forEach(function(t){null!=r[t]&&(r[t]=n(r[t],e[t]))}),r},al=function(){function e(e){this.define(e)}var t=e.prototype;return t.define=function(e){this.schema=Object.keys(e).reduce(function(t,n){var r,o=e[n];return Ku({},t,((r={})[n]=o,r))},this.schema||{})},t.normalize=function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return ol.apply(void 0,[this.schema].concat(t))},t.denormalize=function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return il.apply(void 0,[this.schema].concat(t))},e}(),ul=function e(t,n,r,o,i,a){return"object"==typeof t&&t?"object"!=typeof o||o.normalize&&"function"==typeof o.normalize?o.normalize(t,n,r,e,i,a):(Array.isArray(o)?nl:ol)(o,t,n,r,e,i,a):t},ll={Array:rl,Entity:Xu,Object:al,Union:Zu,Values:el},sl=function(e,t){if(!e||"object"!=typeof e)throw new Error('Unexpected input given to normalize. Expected type to be "object", found "'+(null===e?"null":typeof e)+'".');var n={},r=function(e){return function(t,n,r,o,i){var a=t.key,u=t.getId(r,o,i);a in e||(e[a]={});var l=e[a][u];e[a][u]=l?t.merge(l,n):n}}(n);return{entities:n,result:ul(e,e,null,t,r,{})}},cl=new ll.Entity("courses");function fl(e){return fl="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},fl(e)}function dl(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),n.push.apply(n,r)}return n}function pl(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?dl(Object(n),!0).forEach(function(t){hl(e,t,n[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):dl(Object(n)).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})}return e}function hl(e,t,n){return(t=function(e){var t=function(e){if("object"!=fl(e)||!e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var n=t.call(e,"string");if("object"!=fl(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==fl(t)?t:t+""}(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var yl=Zo({});const ml=JSON.parse('[{"id":"5debd76480edafc8af244228","author":{"id":"5debd764a7c57c7839d722e9","name":{"first":"Poole","last":"Sanders"},"email":"poole.sanders@holberton.nz","picture":"http://placehold.it/32x32","age":25},"context":{"guid":"2d8e40be-1c78-4de0-afc9-fcc147afd4d2","isRead":true,"type":"urgent","value":"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt."}},{"id":"5debd764507712e7a1307303","author":{"id":"5debd7648ba8641ce0a34ea4","name":{"first":"Norton","last":"Grimes"},"email":"norton.grimes@holberton.nz","picture":"http://placehold.it/32x32","age":37},"context":{"guid":"cec84b7a-7be4-4af0-b833-f1485433f66e","isRead":false,"type":"urgent","value":"ut labore et dolore magna aliqua. Dignissim convallis aenean et tortor at risus viverra adipiscing. Ac tortor dignissim convallis aenean et. "}},{"id":"5debd76444dd4dafea89d53b","author":{"id":"5debd764a7c57c7839d722e9","name":{"first":"Poole","last":"Sanders"},"email":"poole.sanders@holberton.nz","picture":"http://placehold.it/32x32","age":25},"context":{"guid":"280913fe-38dd-4abd-8ab6-acdb4105f922","isRead":false,"type":"urgent","value":"Non diam phasellus vestibulum lorem sed risus ultricies. Tellus mauris a diam maecenas sed"}},{"id":"5debd76485ee4dfd1284f97b","author":{"id":"5debd764f07f50822352e252","name":{"first":"Roach","last":"Cameron"},"email":"roach.cameron@holberton.nz","picture":"http://placehold.it/32x32","age":26},"context":{"guid":"89906f88-a02d-41ee-b214-daa0c54633e3","isRead":true,"type":"urgent","value":"Odio pellentesque diam volutpat commodo sed egestas egestas"}},{"id":"5debd7644e561e022d66e61a","author":{"id":"5debd764e66586653a8a33f3","name":{"first":"Christy","last":"Collier"},"email":"christy.collier@holberton.nz","picture":"http://placehold.it/32x32","age":27},"context":{"guid":"f8d66cca-63ec-4f19-a422-a3e1c8f05a36","isRead":false,"type":"urgent","value":"In hendrerit gravida rutrum quisque non tellus orci. Gravida dictum fusce ut placerat orci nulla pellentesque dignissim enim. Lorem mollis aliquam ut porttitor"}},{"id":"5debd7644aaed86c97bf9d5e","author":{"id":"5debd764f5017139ce541857","name":{"first":"Mason","last":"Douglas"},"email":"mason.douglas@holberton.nz","picture":"http://placehold.it/32x32","age":31},"context":{"guid":"de55f849-8fca-4ac7-afbb-41751f09d0c6","isRead":false,"type":"default","value":"Cursus metus aliquam eleifend mi in nulla posuere. "}},{"id":"5debd76413f0d5e5429c28a0","author":{"id":"5debd76456a6a030695e6a70","name":{"first":"Marshall","last":"Wynn"},"email":"marshall.wynn@holberton.nz","picture":"http://placehold.it/32x32","age":26},"context":{"guid":"8094c267-ab84-47e1-8801-58ddd23f3b2a","isRead":false,"type":"default","value":"Quam viverra orci sagittis eu volutpat odio facilisis mauris sit"}},{"id":"5debd7642e815cd350407777","author":{"id":"5debd764f8452ef92346c772","name":{"first":"Cherry","last":"Miles"},"email":"cherry.miles@holberton.nz","picture":"http://placehold.it/32x32","age":25},"context":{"guid":"3068c575-d619-40af-bf12-dece1ee18dd3","isRead":true,"type":"default","value":"Est ante in nibh mauris cursus mattis molestie a iaculis. Eget lorem dolor sed viverra ipsum nunc aliquet bibendum enim"}},{"id":"5debd764c1127bc5a490a4d0","author":{"id":"5debd76470dcced4a244fe7f","name":{"first":"Sykes","last":"Fulton"},"email":"sykes.fulton@holberton.nz","picture":"http://placehold.it/32x32","age":36},"context":{"guid":"efb6c485-00f7-4fdf-97cc-5e12d14d6c41","isRead":false,"type":"default","value":"Cursus risus at ultrices mi."}},{"id":"5debd7646ef31e0861ec1cab","author":{"id":"5debd7645c8d811b8c6a235d","name":{"first":"Valentine","last":"Juarez"},"email":"valentine.juarez@holberton.nz","picture":"http://placehold.it/32x32","age":25},"context":{"guid":"1d3918d0-67e6-44a4-9031-72d7750234de","isRead":true,"type":"default","value":"Velit laoreet id donec ultrices tincidunt arcu non. Aliquet eget sit amet tellus cras adipiscing"}},{"id":"5debd764a4f11eabef05a81d","author":{"id":"5debd764d0b0e7ed3e45ee6d","name":{"first":"Maryann","last":"Larson"},"email":"maryann.larson@holberton.nz","picture":"http://placehold.it/32x32","age":32},"context":{"guid":"98fe7af4-8300-461f-a376-c147b2987616","isRead":false,"type":"default","value":"Ac placerat vestibulum lectus mauris ultrices eros in cursus. Amet nisl suscipit adipiscing bibendum est ultricies integer. Lorem donec massa sapien faucibus et molestie ac"}},{"id":"5debd764af0fdd1fc815ad9b","author":{"id":"5debd764fb6db3a5c21ce617","name":{"first":"Naomi","last":"Hayes"},"email":"naomi.hayes@holberton.nz","picture":"http://placehold.it/32x32","age":30},"context":{"guid":"cd1a09cf-ad6e-4478-9662-18a292807e2e","isRead":false,"type":"urgent","value":"Nulla malesuada pellentesque elit eget gravida cum sociis"}},{"id":"5debd76468cb5b277fd125f4","author":{"id":"5debd764f7234e1d44828515","name":{"first":"Knowles","last":"Vazquez"},"email":"knowles.vazquez@holberton.nz","picture":"http://placehold.it/32x32","age":28},"context":{"guid":"0f446b01-37c3-4884-9dc6-316f23b7711b","isRead":false,"type":"urgent","value":"Elit eget gravida cum sociis natoque penatibus et. Congue mauris rhoncus aenean vel"}},{"id":"5debd764de9fa684468cdc0b","author":{"id":"5debd764ec7c8d21449be7d7","name":{"first":"Greta","last":"Benjamin"},"email":"greta.benjamin@holberton.nz","picture":"http://placehold.it/32x32","age":23},"context":{"guid":"4cc5bc3a-98fe-4392-b97d-6a41da1d944b","isRead":false,"type":"default","value":"Leo vel fringilla est ullamcorper. Volutpat consequat mauris nunc congue"}}]');var vl=o.t(ml,2),gl=new ll.Entity("users"),bl=new ll.Entity("messages",{},{idAttribute:"guid"}),_l=new ll.Entity("notifications",{author:gl,context:bl});function wl(e){return wl="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},wl(e)}function Sl(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),n.push.apply(n,r)}return n}function kl(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Sl(Object(n),!0).forEach(function(t){xl(e,t,n[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Sl(Object(n)).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})}return e}function xl(e,t,n){return(t=function(e){var t=function(e){if("object"!=wl(e)||!e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var n=t.call(e,"string");if("object"!=wl(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==wl(t)?t:t+""}(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}sl(ml||vl,[_l]);var El=Zo({notifications:Zo({}),filter:"DEFAULT",loading:!1});var Ol=Zo({isNotificationDrawerVisible:!1,isUserLoggedIn:!1,user:{}}),Cl=function e(t,n,r){var o;if("function"==typeof n&&"function"==typeof r||"function"==typeof r&&"function"==typeof arguments[3])throw new Error(u(0));if("function"==typeof n&&void 0===r&&(r=n,n=void 0),void 0!==r){if("function"!=typeof r)throw new Error(u(1));return r(e)(t,n)}if("function"!=typeof t)throw new Error(u(2));var i=t,a=n,s=[],f=s,d=!1;function p(){f===s&&(f=s.slice())}function h(){if(d)throw new Error(u(3));return a}function y(e){if("function"!=typeof e)throw new Error(u(4));if(d)throw new Error(u(5));var t=!0;return p(),f.push(e),function(){if(t){if(d)throw new Error(u(6));t=!1,p();var n=f.indexOf(e);f.splice(n,1),s=null}}}function m(e){if(!function(e){if("object"!=typeof e||null===e)return!1;for(var t=e;null!==Object.getPrototypeOf(t);)t=Object.getPrototypeOf(t);return Object.getPrototypeOf(e)===t}(e))throw new Error(u(7));if(void 0===e.type)throw new Error(u(8));if(d)throw new Error(u(9));try{d=!0,a=i(a,e)}finally{d=!1}for(var t=s=f,n=0;n<t.length;n++)(0,t[n])();return e}return m({type:c.INIT}),(o={dispatch:m,subscribe:y,getState:h,replaceReducer:function(e){if("function"!=typeof e)throw new Error(u(10));i=e,m({type:c.REPLACE})}})[l]=function(){var e,t=y;return(e={subscribe:function(e){if("object"!=typeof e||null===e)throw new Error(u(11));function n(){e.next&&e.next(h())}return n(),{unsubscribe:t(n)}}})[l]=function(){return this},e},o}(function(e){for(var t=Object.keys(e),n={},r=0;r<t.length;r++){var o=t[r];"function"==typeof e[o]&&(n[o]=e[o])}var i,a=Object.keys(n);try{!function(e){Object.keys(e).forEach(function(t){var n=e[t];if(void 0===n(void 0,{type:c.INIT}))throw new Error(u(12));if(void 0===n(void 0,{type:c.PROBE_UNKNOWN_ACTION()}))throw new Error(u(13))})}(n)}catch(e){i=e}return function(e,t){if(void 0===e&&(e={}),i)throw i;for(var r=!1,o={},l=0;l<a.length;l++){var s=a[l],c=n[s],f=e[s],d=c(f,t);if(void 0===d)throw t&&t.type,new Error(u(14));o[s]=d,r=r||d!==f}return(r=r||a.length!==Object.keys(e).length)?o:e}}({courses:function(){var e,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:yl,n=arguments.length>1?arguments[1]:void 0;switch(n.type){case Pn:var r=(e=n.data,sl(e,[cl]));return Ta(Object.keys(r.entities.courses).reduce(function(e,t){return e[t]=pl(pl({},r.entities.courses[t]),{},{isSelected:!1}),e},{}));case On:return t.setIn([String(n.index),"isSelected"],!0);case Cn:return t.setIn([String(n.index),"isSelected"],!1);default:return t}},notifications:function(){var e,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:El,n=arguments.length>1?arguments[1]:void 0;switch(n.type){case ou:var r=(e=n.data,sl(e,[_l])),o=Object.keys(r.entities.notifications).reduce(function(e,t){return e[t]=kl(kl({},r.entities.notifications[t]),{},{isRead:!1}),e},{});return t.mergeDeep({notifications:Ta(o)});case nu:return t.setIn(["notifications",String(n.index),"isRead"],!0);case ru:return t.set("filter",n.filter);case iu:return t.set("loading",n.isLoading);default:return t}},ui:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:Ol,t=arguments.length>1?arguments[1]:void 0;switch(t.type){case Z:return e.set("isNotificationDrawerVisible",!0);case ee:return e.set("isNotificationDrawerVisible",!1);case X:return e.set("user",t.user);case te:return e.set("isUserLoggedIn",!0);case ne:return e.set("isUserLoggedIn",!1);case J:return e.set("isUserLoggedIn",!1).set("user",{});default:return e}}}),("undefined"!=typeof window&&window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__||f)(function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return function(e){return function(){var n=e.apply(void 0,arguments),r=function(){throw new Error(u(15))},o={getState:n.getState,dispatch:function(){return r.apply(void 0,arguments)}},i=t.map(function(e){return e(o)});return r=f.apply(void 0,i)(n.dispatch),a(a({},n),{},{dispatch:r})}}}(Q)));t.render(e.createElement(e.StrictMode,null,e.createElement($,{store:Cl},e.createElement($u,null))),document.getElementById("root"))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,